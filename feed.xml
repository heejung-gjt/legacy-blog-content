<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://heejung-gjt.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" /><updated>2021-07-06T23:52:57+09:00</updated><id>https://heejung-gjt.github.io/</id><title type="html">Studying  Develop</title><subtitle>개발 공부하는 블로그</subtitle><entry><title type="html">(MYSQL) AWS EC2 서버에 MYSQL 구축하기(작성중…)</title><link href="https://heejung-gjt.github.io/db1" rel="alternate" type="text/html" title="(MYSQL) AWS EC2 서버에 MYSQL 구축하기(작성중...)" /><published>2021-07-06T20:30:00+09:00</published><updated>2021-07-06T20:30:00+09:00</updated><id>https://heejung-gjt.github.io/db1</id><content type="html" xml:base="https://heejung-gjt.github.io/db1">&lt;p&gt;AWS에서 EC2로 서버를 생성하여 우분투 OS를 설치하고 그 위에 MYSQL를 구축하는 과정입니다. 가장 먼저 AWS 사이트에 접속후
검색창에 EC2를 입력한 후 인스턴스 생성하기를 누른다&lt;/p&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;1-가장먼저-ami를-선택한다&quot;&gt;1. 가장먼저 AMI를 선택한다&lt;/h4&gt;
&lt;p&gt;AMI는 인스턴스를 시작할때 이 서버에서 필요한 SW 구성이 포함된 템플릿이다. 나는 Ubuntu 18.04 os를 선택하였다. 20.04를 선택해도 상관없다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610242-4bf42f00-deab-11eb-90b3-906df9d41e08.png&quot; alt=&quot;ec2-1&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2-인스턴스-유형을-선택해준다&quot;&gt;2. 인스턴스 유형을 선택해준다.&lt;/h4&gt;
&lt;p&gt;이때 &lt;code class=&quot;highlighter-rouge&quot;&gt;프리티어 사용 가능&lt;/code&gt;이라고 써져 있는 인스턴스를 선택해준다
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610309-5ca4a500-deab-11eb-83dd-83404ce2b6a6.png&quot; alt=&quot;ec2-2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-35단계는-특별히-설정할게-없어서-건너-띄어주었다-6단계인-보안-그룹-구성에서는-설정해주어야-할-것-들이-여러개-있다&quot;&gt;3. 3~5단계는 특별히 설정할게 없어서 건너 띄어주었다. 6단계인 보안 그룹 구성에서는 설정해주어야 할 것 들이 여러개 있다&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610327-5f9f9580-deab-11eb-9c96-ebcb6b6bf164.png&quot; alt=&quot;ec2-3&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-7단계-인스턴스-시작-검토에서-시작하기를-누르면-새-키-페어-생성창이-화면처럼-뜨게-된다&quot;&gt;4. 7단계 인스턴스 시작 검토에서 시작하기를 누르면 새 키 페어 생성창이 화면처럼 뜨게 된다.&lt;/h4&gt;
&lt;p&gt;그럼 해당 키 페어의 이름을 작성해주면 된다. 나는 진행할 프로젝트의 앞 단어들을 따서 지어주었다. 이후 키 페어 다운로드를 눌러서 다운받아준다. 이 파일을
나중에 db를 구현할때 ….
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610337-60d0c280-deab-11eb-8a2c-835c384485aa.png&quot; alt=&quot;ec2-4&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;q1-왜-데이터베이스를-ec2-서버안에서-구축하여-사용할까-&quot;&gt;Q1. 왜 데이터베이스를 ec2 서버안에서 구축하여 사용할까 ?&lt;/h4&gt;
&lt;h4 id=&quot;a-알아보는-중입니다--&quot;&gt;A) 알아보는 중입니다 :-)&lt;/h4&gt;</content><author><name>jung</name></author><category term="database" /><summary type="html"></summary></entry><entry><title type="html">(Python) instance method, class method, static method</title><link href="https://heejung-gjt.github.io/python3" rel="alternate" type="text/html" title="(Python) instance method, class method, static method" /><published>2021-07-06T17:00:00+09:00</published><updated>2021-07-06T17:00:00+09:00</updated><id>https://heejung-gjt.github.io/python3</id><content type="html" xml:base="https://heejung-gjt.github.io/python3">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 목록 순서 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./python-DataStructure&quot;&gt;Python 강좌(1) - 자료구조&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content01 content&quot;&gt;1. 리스트&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content02 content&quot;&gt;2. 튜플&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content03 content&quot;&gt;3. 딕셔너리&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content04 content&quot;&gt;4. 문자열 리스트로 변환 후 딕셔너리 변환&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Function&quot;&gt;Python 강좌(2) - 함수&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-INOutput&quot;&gt;Python 강좌(3) - 입출력&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Class&quot;&gt;Python 강좌(4) - 클래스&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Exception&quot;&gt;Python 강좌(5) - 예외처리&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;!--&lt;script&gt;--&gt;
&lt;!--    const content = document.querySelector('.content')--&gt;
&lt;!--    const lists01 = document.querySelector('.content01');--&gt;
&lt;!--    const lists02 = document.querySelector('.content02');--&gt;
&lt;!--    const lists03 = document.querySelector('.content03');--&gt;
&lt;!--    const lists04 = document.querySelector('.content04');--&gt;
&lt;!--    lists01.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,850);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists02.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,3500);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists03.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,4700);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists04.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,8300);--&gt;
&lt;!--    });--&gt;

&lt;!--&lt;/script&gt;--&gt;

&lt;h2 id=&quot;instance-method&quot;&gt;instance method&lt;/h2&gt;
&lt;p&gt;가장 흔하게 쓰이는 메서드로 생성된 인스턴스 변수에 접근할 수 있도록 첫번째 인자에 항상 객체 자신을 의미하는 self파라미터를 갖는다.&lt;/p&gt;

&lt;h4 id=&quot;접근방법&quot;&gt;접근방법&lt;/h4&gt;
&lt;p&gt;클래스 내부에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.메서드명&lt;/code&gt;으로 접근이 가능하고 클래스 밖에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;객체.메서드명&lt;/code&gt;으로 접근이 가능하다&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;class-method&quot;&gt;class method&lt;/h2&gt;
&lt;p&gt;클래스 메서드는 인스턴스 없이 호출이 가능하다. 즉 &lt;strong&gt;클래스 변수에 대한 메서드라고 생각하면 된다.
(클래스변수의 crud가 필요한 경우 사용)&lt;/strong&gt; 첫번째 인자에 항상 클래스를 의미하는 cls 파라미터를 갖는다. 
cls를 사용하면 클래스 메서드 내부에서 현재 클래스의 인스턴스를 만들수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;접근방법-1&quot;&gt;접근방법&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;@classmethod&lt;/strong&gt; 라는 데코레이터를 붙여 해당 메서드가 클래스 메서드임을 표시한다&lt;/p&gt;

&lt;p&gt;호출방법으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;클래스명.클래스메서드명&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;객체명.클래스 메서드명&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;static-method&quot;&gt;static method&lt;/h2&gt;
&lt;p&gt;객체에 영향을 받지 않는 독립적인 메서드이지만 로직상 클래스 내부에 포함되는 메서드이다. 
self, cls와 같은 파라미터를 가지고 있지 않다. 그렇기 때문에 인스턴스 변수에 접근이 불가능하다. 
하지만 클래스 변수에는 클래스명,클래스속성명으로 접근이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정적 메서드는 메서드의 실행이 인스턴스 상태에 영향을 끼치지 않을때 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;접근방법-2&quot;&gt;접근방법&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;@staticmethod&lt;/strong&gt; 라는 데코레이터를 붙여 해당 메서드가 정적 메서드임을 표시한다.&lt;/p&gt;

&lt;p&gt;호출방법으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;클래스명.정적메서드명&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;객체명.정적메서드명&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;아래의 코드는 지금까지 설명한 내용들을 활용한 실습 코드이다. 방금 본 내용들을 적용시키며 천천히 읽어보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;### 3가지 메서드를 활용한 실습 코드&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# class 설명서 __doc__ 로 볼 수 있음&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Car class
    Author: kim
    Date:2021.07.05
    Description: class, static, instance method
    &quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 클래스 변수(모든 인스턴스가 공유)     &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price_per_raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 이곳 안에서 인스턴스 변수 생성됨&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# str과 repr&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'str: {} - {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'repr: {} - {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    
    &lt;span class=&quot;c&quot;&gt;# 인스턴스 메서드&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'current ID : {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'car detail info : {} {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 인스턴스 메서드&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Before Car Price -&amp;gt; company: {}, price: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 인스턴스 메서드&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'After Car Price -&amp;gt; company: {}, price: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price_per_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 클래스 메서드 &lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raise_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'please enter 1 or more'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price_per_raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'succeed! price increased.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;c&quot;&gt;# 스태틱 메서드&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# utils형으로 유연하게 사용될때 사용&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ok! this car is {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sorry this car is not Bmw'&lt;/span&gt;
  

&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Ferrari'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Silver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 전체 정보&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격 정보(직접 접근)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 변수값이 변경 될 수 있기 때문에 직접 자기 인스턴스 변수에 접근하는 것은 좋지 못한 방법임&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 마찬가지로 값이 변경 될 위험이 있기때문에  좋지 못한방법 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 보통은 메서드를 만들어서 필요로하는 정보만 반환받게 사용함&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격 정보 (인상전)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격 인상(클래스 메서드 미사용) -&amp;gt; 직접접근해서 변경하는 것 좋지 못하다. 메서드 만들자&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Car.price_per_raise = 1.4 # 40% 상승 &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격인상(클래스 메서드 사용)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 인스턴스로 호출(스테이틱)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# staticmethod의 매개변수는 비워있다, 유연하고 메서드를 정의할때 좀 공통적으로 만드는데 유연하게 만들고 싶을때 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 자동차가 만개있을때 해당 자동차가 bmw에서 나온 자동차인지 확인하는 메서드&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 클래스로 호출(스테이틱)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 스택틱 메서드는 클래스로도 호출이 가능하다, 공통적으로 클래스로 호출해도 된다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#클래스와 관련이 있는 기능을 조작하는데 매개변수로 Self나 cls등을 받지 않고도 동작이 가능할때 사용한다&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;코드-결과값&quot;&gt;코드 결과값&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140576165418264&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140576165474712&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;


&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6000.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5000.0&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;please&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;succeed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increased&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9600.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8000.0&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Sorry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sorry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>jung</name></author><category term="python" /><summary type="html"></summary></entry><entry><title type="html">(Python) 클래스변수와 인스턴스 변수</title><link href="https://heejung-gjt.github.io/python2" rel="alternate" type="text/html" title="(Python) 클래스변수와 인스턴스 변수" /><published>2021-07-06T16:00:00+09:00</published><updated>2021-07-06T16:00:00+09:00</updated><id>https://heejung-gjt.github.io/python2</id><content type="html" xml:base="https://heejung-gjt.github.io/python2">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 목록 순서 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./python-DataStructure&quot;&gt;Python 강좌(1) - 자료구조&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content01 content&quot;&gt;1. 리스트&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content02 content&quot;&gt;2. 튜플&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content03 content&quot;&gt;3. 딕셔너리&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content04 content&quot;&gt;4. 문자열 리스트로 변환 후 딕셔너리 변환&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Function&quot;&gt;Python 강좌(2) - 함수&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-INOutput&quot;&gt;Python 강좌(3) - 입출력&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Class&quot;&gt;Python 강좌(4) - 클래스&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Exception&quot;&gt;Python 강좌(5) - 예외처리&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;!--&lt;script&gt;--&gt;
&lt;!--    const content = document.querySelector('.content')--&gt;
&lt;!--    const lists01 = document.querySelector('.content01');--&gt;
&lt;!--    const lists02 = document.querySelector('.content02');--&gt;
&lt;!--    const lists03 = document.querySelector('.content03');--&gt;
&lt;!--    const lists04 = document.querySelector('.content04');--&gt;
&lt;!--    lists01.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,850);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists02.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,3500);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists03.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,4700);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists04.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,8300);--&gt;
&lt;!--    });--&gt;

&lt;!--&lt;/script&gt;--&gt;

&lt;h3 id=&quot;객체와-클래스&quot;&gt;객체와 클래스&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;클래스&lt;/strong&gt; : 객체를 만들어 내기 위한 설계도, 틀이라고 할 수 있다. 어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는 속성과 행위를 변수와 메서드로 정의한것이다&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;객체(인스턴스)&lt;/strong&gt; : 클래스에 선언된 모양 그대로 생성된 실체이다. 클래스에서 정의한 것을 토대로 실제 메모리상에 할당된 것으로 실제 프로그램에서 사용되는 데이터이다&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;추상화&lt;/strong&gt; : 공통의 속성이나 기능을 묶어 이름을 붙이는것이다&lt;/p&gt;
  &lt;hr /&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;인스턴스-변수&quot;&gt;인스턴스 변수&lt;/h3&gt;
&lt;p&gt;인스턴스 변수는 각각의 인스턴스마다 독립된 변수이다. 클래스는 여러 인스턴스를 생성하지만 각각의 인스턴스 변수는 
생성된 인스턴스마다 각각의 값을 보존하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;인스턴스-변수-선언과-접근-방법&quot;&gt;인스턴스 변수 선언과 접근 방법&lt;/h3&gt;
&lt;p&gt;인스턴스 변수 생성은 생성자 클래스 __ init() __ 내부에 작성되고 클래스 내부에서 ‘self.인스턴스 변수’로 접근할 수 있다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;인스턴스&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;인스턴스&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 선언&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;인스턴스&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 접근&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;self: 인스턴스 메서드는 첫번째의 매개변수로 self가 넘어오게 되어있다. self는 각 고유, 클래스를 기반으로 생성된 인스턴스가 자기 내부의 고유의 값을 저장하기 위한 어떤 예약된 지시어, 예약어이다&lt;/p&gt;

&lt;p&gt;인스턴스 변수와 클래스 변수는 동일한 변수 이름 생성이 가능하다. 실행이 되면 가장 먼저 인스턴스 네임스페이스에서 네임을 찾고 해당 네임이 없는 경우 상위(클래스 변수)에서 검색된다&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;클래스-변수&quot;&gt;클래스 변수&lt;/h3&gt;
&lt;p&gt;클래스 변수는 모든 인스턴스 사이에서 공유된 값을 가진 변수이다. 여러 인스턴스에서 클래스 변수를 호출해 변경하면 클래스 변수는 공유되기 때문에 값이 유연하기 바뀐다&lt;/p&gt;

&lt;h3 id=&quot;클래스-변수-선언과-접근-방법&quot;&gt;클래스 변수 선언과 접근 방법&lt;/h3&gt;
&lt;p&gt;클래스 변수 생성은 self를 붙이지 않고 클래스 내부 바로 아래에 보통 선언한다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThisClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;클래스&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;값&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 선언&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;클래스&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;클래스&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변수&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 접근&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;클래스 내부에 쓰인 클래스 변수와 인스턴스 변수를 코드로 살펴보자.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Car class
    Author: kim
    Date:2021.07.05
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 클래스 변수&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 즉, 클래스변수는 모든 인스턴스가 공유하고 있다&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;car_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 인스턴스 변수&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-에서-기본적으로-제공해주는-기능들이며-실제로-자주-쓰이는-메소드들이다&quot;&gt;python 에서 기본적으로 제공해주는 기능들이며 실제로 자주 쓰이는 메소드들이다.&lt;/h3&gt;

&lt;p&gt;__ str __ : 클래스 내부에다 상속받고 있는 &lt;strong&gt;str&lt;/strong&gt; 을 정의하면 클래스 인스턴스 내부의 속성 정보를 원하는대로 출력이 가능하다.&lt;/p&gt;

&lt;p&gt;__ repr __ : str과 같은 역할을 하지만 차이점이 존재한다. str은 비공식적인 사용자 입장에서 인스턴스 내부의 속성 정보를 보고 싶을때 출력한다. 즉 사용자 레벨에서 print문으로 정보를 확인할때 str을 사용하고 개발자 입장에서 객체의 엄격한 타입등을 인식할 수 있게 출력하려면 repr을 사용한다. 이때 기본값은 str이기 때문에 둘다 써져있을때는 str이 우선 출력된다.&lt;/p&gt;

&lt;p&gt;__ dict __ : 불필요한 정보를 제외하고 인스턴스 안의 네임스페이스만 보고싶을때 사용한다. 인스턴스 안에 있는 속성 정보 즉 애트리뷰트 값을 볼 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;car1.__dict__&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'_company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Ferrari'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'_details'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Silver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dir() : dir을 쓰게 되면 인스턴스가 가지고 있는 모든 속성 즉, 메타 정보를 볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__class__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__delattr__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__dict__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__dir__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__doc__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__eq__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__format__'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;__ doc __ : “&quot;”를 이용해 클래스에 대한 코멘트를 달았을 경우 doc를 통해 해당 클래스에 대한 코멘트를 볼 수 있다&lt;/p&gt;</content><author><name>jung</name></author><category term="python" /><summary type="html"></summary></entry><entry><title type="html">(Python) 객체지향과 절차지향의 정의와 특징/실습</title><link href="https://heejung-gjt.github.io/python" rel="alternate" type="text/html" title="(Python) 객체지향과 절차지향의 정의와 특징/실습" /><published>2021-07-06T15:00:00+09:00</published><updated>2021-07-06T15:00:00+09:00</updated><id>https://heejung-gjt.github.io/python</id><content type="html" xml:base="https://heejung-gjt.github.io/python">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 목록 순서 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./python-DataStructure&quot;&gt;Python 강좌(1) - 자료구조&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content01 content&quot;&gt;1. 리스트&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content02 content&quot;&gt;2. 튜플&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content03 content&quot;&gt;3. 딕셔너리&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content04 content&quot;&gt;4. 문자열 리스트로 변환 후 딕셔너리 변환&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Function&quot;&gt;Python 강좌(2) - 함수&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-INOutput&quot;&gt;Python 강좌(3) - 입출력&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Class&quot;&gt;Python 강좌(4) - 클래스&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Exception&quot;&gt;Python 강좌(5) - 예외처리&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;!--&lt;script&gt;--&gt;
&lt;!--    const content = document.querySelector('.content')--&gt;
&lt;!--    const lists01 = document.querySelector('.content01');--&gt;
&lt;!--    const lists02 = document.querySelector('.content02');--&gt;
&lt;!--    const lists03 = document.querySelector('.content03');--&gt;
&lt;!--    const lists04 = document.querySelector('.content04');--&gt;
&lt;!--    lists01.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,850);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists02.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,3500);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists03.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,4700);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists04.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,8300);--&gt;
&lt;!--    });--&gt;

&lt;!--&lt;/script&gt;--&gt;

&lt;h3 id=&quot;절차지향-언어&quot;&gt;절차지향 언어&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;절차지향은 프로그램 단위를 함수 단위로 작성하는 언어이다. 로직의 순서는 위에서 아래로 순차적으로 처리되는 특징을 가지고 있다.&lt;/code&gt; 
초반에 절차지향으로 코드를 짜기 전에는 코드가 길어지고 복잡해지는 단점이 존재하였다. 예를 들어 car의 종류와 디테일을 보여주는
로직이 있다고 해보자. car의 종류가 1~2개일때는 큰 문제가 없지만 실제로 car의 종류를 100개, 1000개를 작성하려면 듣기만 해도 굉장히
비효율적이라고 예상이 된다.  &lt;strong&gt;이때 절차지향으로 작성하게 되면 공통된 함수를 작성하면 되기 때문에 이전보다 훨씬 수월하게 관리할 수 있다&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 자동차의 정보를 출력해본다&lt;/span&gt;


&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
절차지향 미사용시,
코드의 중복이 많아지는 것을 느낄수 있다
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#차량 1번&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_company_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Ferrari'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_detail_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Silver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#차량 2번&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_company_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_detail_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#차량 3번&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_company_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Audi'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_detail_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'White'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{car_company_1}의 detail : {car_detail_1}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{car_company_2}의 detail : {car_detail_2}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{car_company_3}의 detail : {car_detail_3}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
절차지향 사용시, 
코드의 중복이 개선되는 것을 느낄 수 있다

하지만 여전히 데이터를 관리하기 편하지 않다
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;car_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'company'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increase_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ori_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ori_price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{car['company']}의 변동된 금액 {price}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;car_company_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Ferrai'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Silver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car_company_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;car_company_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Audi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'White'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;increase_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_company_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;increase_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_company_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;increase_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_company_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;객체지향-언어&quot;&gt;객체지향 언어&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;하지만 절차지향도 어느정도 한계가 있다. 데이터가 방대해지고 코드의 복잡도가 증가하면서 코드의 개선이 어려워졌고 코드의 실행
순서가 정해져 있으므로 코드의 순서가 바뀌면 동일한 결과를 보장하기 어려웠다.&lt;/strong&gt;   &lt;br /&gt;
아래의 코드를 보면 car의 가격을 증가시키는 함수가 작성될때 car의 price에 dict형태로 키로 접근해야 하기 때문에
 키가 없을 경우에 대한 예외처리도 필요하고 키의 중첩문제가 생길수도 있다. 데이터 중심으로 코드를 짜게 되면서 객체로써 관리가 되었다. 코드의 재사용과 중복방지, 유지보수가 쉬워졌다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
객체지향 사용시,
구조를 설계후 재사용성이 증가하고, 코드의 반복이 최소화되었다. car에 대한 기능을 쉽게 
구현할 수 있다. 
__str__과 __repr__은 다음 부분에서 설명할 예정이다.
기본적으로 클래스의 인스턴스로 정의된 값(car1,car2,car3)은 출력될때 object형식으로 출력이 되기 때문에 object
안에 있는 값들을 보고 싶을때 str이나 repr을 쓴다고 생각하면 된다. 
&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'str: {self._company} - {self._details}'&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'str: {self._company} - {self._details}'&lt;/span&gt;
    

&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Ferrari'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Silver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Audi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'White'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;q-절차지향에-대해-설명해라&quot;&gt;Q. 절차지향에 대해 설명해라&lt;/h4&gt;

&lt;p&gt;A. 절차지향언어는 프로그램 단위를 함수단위로 나누어 작성하는 언어이다. 로직의 실행이 위애서 아래로 순차적으로 처리되는 특징을 가지고 있다. 2).과거에는 코드를 짤때 코드가 길어지고 복잡해지는 단점이 존재했다. 절차지향으로 작성하게 되면 공통된 기능은 함수를 작성하면 되기 때문에 코드가 길어져도 이전보다 훨씬 수월하게 관리할 수 있었다.
시간이 지나면서 데이터가 방대해지고 코드의 복잡도가 증가하면서 코드의 개선이 어려워졌고 절차지향은 코드의 순서가 정해져 있으므로 코드의 순서가 바뀌면 동일한 결과를 보장하기 어려운 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-객체지향에-대해-설명해라&quot;&gt;Q. 객체지향에 대해 설명해라&lt;/h4&gt;

&lt;p&gt;A. 개발하려는 것을 기능별로 묶어 하나의 객체를 만들고 그 객체들간의 상호작용을 통해 로직을 구성하는 언어이다 고객-자판기를 예를 들어보면 고객이 할 수 있는 기능(돈은 넣고/ 받고/ 제품을 받음)과 데이터(돈, 제품)들을 하나로 묶어 고객이라는 객체를 만들고 자판기에서 할 수 있는 기능(돈 받고/ 검사하고/ 잔돈주고/ 제품준다)과 데이터(돈, 제품)묶어 자판기라는 하나의 객체로 묶어서 서로 상호작용을 통해 로직을 구성하는 방식이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-객체지향의-장단점을-설명해라&quot;&gt;Q. 객체지향의 장/단점을 설명해라&lt;/h4&gt;

&lt;p&gt;A.장점 &lt;br /&gt;
코드의 재사용이 용이하다 - 남이 만든 클래스를 가져와서 사용할 수 있고 상속을 통해 확장해 사용할 수 있다&lt;/p&gt;

&lt;p&gt;유지보수가 쉽다 - 절차지향 프로그래밍에서는 코드 수정시 일일이 찾아 수정해야하는 반면 객체 지향 프로그래 밍 에서는 수정해야 할 부분이 클래스 내부에 변수, 메서드로 있기 때문에 해당 부분만 수정하면 된다.&lt;/p&gt;

&lt;p&gt;대현 프로젝트에 적합하다 - 클래스단위로 모듈화시켜 개발할 수 있기 때문에 대형 프로젝트와 같이 여러명/회사에서 개발이 필요할 때 업무 분담이 쉽다&lt;/p&gt;

&lt;p&gt;A.단점  &lt;br /&gt;
처리속도가 상대적으로 느리고 객체가 많으면 용량이 커질 수 있다. 설게할때 많은 시간과 노력이 필요하다&lt;/p&gt;</content><author><name>jung</name></author><category term="python" /><summary type="html"></summary></entry><entry><title type="html">(Django) 프로젝트(3) - 2. 모델링하기</title><link href="https://heejung-gjt.github.io/pro2" rel="alternate" type="text/html" title="(Django) 프로젝트(3) - 2. 모델링하기" /><published>2021-07-06T10:05:00+09:00</published><updated>2021-07-06T10:05:00+09:00</updated><id>https://heejung-gjt.github.io/pro2</id><content type="html" xml:base="https://heejung-gjt.github.io/pro2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Django Project -3 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./pro1&quot;&gt;개발과정 기록&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./pro2&quot;&gt;모델링 - MySQL 연동&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h3 id=&quot;210705--210708예정-모델링-구현&quot;&gt;210705 ~ 210708(예정) 모델링 구현&lt;/h3&gt;

&lt;p&gt;기존에 항상 써왔던 장고에서 제공해주는 sqlite3 대신 mysql을 연동시킬 예정이다. mysql에 대한 지식이 부족해 
각자 따로 공부할 시간이 필요하다. 현재 mysql workbench로 ERD를 작성한 상황이다. 기본 지식을 공부한 후 장고와
mysql을 연동시킬 예정이다.&lt;/p&gt;

&lt;h4 id=&quot;진행할-사전-공부&quot;&gt;진행할 사전 공부&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;mysql 설계 및 구축&lt;/p&gt;

  &lt;p&gt;django와 연동시키는 방법&lt;/p&gt;

  &lt;p&gt;데이터 mysql table에 저장하기&lt;/p&gt;

  &lt;p&gt;mysql과 django의 관계&lt;/p&gt;

  &lt;p&gt;mysql과 aws의 관계&lt;/p&gt;

  &lt;p&gt;mysql의 기본적인 쿼리문&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현된-erd-모델링&quot;&gt;구현된 ERD 모델링&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124545239-a79aca00-de63-11eb-8443-42e183d8c16c.png&quot; alt=&quot;neonews_db&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;질문-사항&quot;&gt;질문 사항&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;기사 스크래핑 후 기사의 출처인 portal과 원본 언론사 press를 따로 table로 빼는것이 좋은가?&lt;/p&gt;

  &lt;p&gt;기사의 세부사항을 스크래핑할때 세부사항 페이지와 똑같은 태그 순서로 어떻게 커스터마이징해서 화면에 보여줄수 있을까 ?&lt;/p&gt;

  &lt;p&gt;user의 세부 추가 사항을 입력받을때 user의 관심 카테고리와 키워드 table을 따로 빼는가 좋은가?&lt;/p&gt;

  &lt;p&gt;user앱과 social앱, news앱중 category와 keyword table을 어디에 넣은게 적절할까?&lt;/p&gt;

  &lt;p&gt;user와 category,keyword가 n:n일때 article의 category와 keyword가 각각 category, keyword table과 1:n으로 엮인다. 이렇게 엮는 것이 적절한 행위일까?&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>jung</name></author><category term="django" /><summary type="html">Django Project -3 개발과정 기록 모델링 - MySQL 연동</summary></entry><entry><title type="html">(Django) 프로젝트(3) - 1. 개발과정 기록</title><link href="https://heejung-gjt.github.io/pro1" rel="alternate" type="text/html" title="(Django) 프로젝트(3) - 1. 개발과정 기록" /><published>2021-07-06T10:00:00+09:00</published><updated>2021-07-06T10:00:00+09:00</updated><id>https://heejung-gjt.github.io/pro1</id><content type="html" xml:base="https://heejung-gjt.github.io/pro1">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Django Project -3 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./pro1&quot;&gt;개발과정 기록&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./pro2&quot;&gt;모델링 - MySQL 연동&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h3 id=&quot;210627--프로젝트-시작&quot;&gt;210627 ~ 프로젝트 시작&lt;/h3&gt;
&lt;p&gt;나에게 있어 3번째 프로젝트이며 2번째 팀플이다. 프로젝트 진행에 맞춰 블로그에 업로드 할 예정이다. :-)&lt;/p&gt;

&lt;h4 id=&quot;github-link-httpsgithubcomneo-newsneo-news&quot;&gt;github link: &lt;a href=&quot;https://github.com/Neo-News/Neo-News&quot;&gt;https://github.com/Neo-News/Neo-News&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-진행-목표&quot;&gt;프로젝트 진행 목표&lt;/h3&gt;

&lt;h4 id=&quot;1차-목표--프론트--백엔드-구현-완성--0718-예정&quot;&gt;1차 목표 : 프론트 &amp;amp; 백엔드 구현 완성 (~ 07.18 예정)&lt;/h4&gt;
&lt;h4 id=&quot;2차-목표--aws-배포--0720-예정&quot;&gt;2차 목표 : AWS 배포 (~ 07.20 예정)&lt;/h4&gt;
&lt;h4 id=&quot;3차-목표--사용자-피드백-받은-후-유지보수-진행--0801-예정&quot;&gt;3차 목표 : 사용자 피드백 받은 후 유지보수 진행 (~ 08.01 예정)&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행-단계&quot;&gt;진행 단계&lt;/h3&gt;

&lt;h4 id=&quot;1-프로젝트-주제-정하기-0627---0701&quot;&gt;1. 프로젝트 주제 정하기 (06.27 - 07.01)&lt;/h4&gt;
&lt;h4 id=&quot;2-요구사항-명세-작성-구현할-기능-작성-프로토타입-작성-0701---0703&quot;&gt;2. 요구사항 명세 작성, 구현할 기능 작성, 프로토타입 작성 (07.01 - 07.03)&lt;/h4&gt;
&lt;h4 id=&quot;4-대략적인-모델-erd구현-앱-구조-작성-0702--&quot;&gt;4. 대략적인 모델, ERD구현, 앱 구조 작성 (07.02 ~ )&lt;/h4&gt;
&lt;h4 id=&quot;5-장고-프로젝트-개발환경-구축-0702&quot;&gt;5. 장고 프로젝트 개발환경 구축 (07.02)&lt;/h4&gt;
&lt;h4 id=&quot;6-프로젝트-front-구현-0702---0704&quot;&gt;6. 프로젝트 front 구현 (07.02 - 07.04)&lt;/h4&gt;
&lt;h4 id=&quot;7-모델작성---mysql연동-0705--진행중&quot;&gt;7. 모델작성 - MYSQL연동 (07.05 ~ 진행중….)&lt;/h4&gt;
&lt;hr /&gt;</content><author><name>jung</name></author><category term="django" /><summary type="html">Django Project -3 개발과정 기록 모델링 - MySQL 연동</summary></entry><entry><title type="html">0706 TIL</title><link href="https://heejung-gjt.github.io/til11" rel="alternate" type="text/html" title="0706 TIL" /><published>2021-07-05T20:00:00+09:00</published><updated>2021-07-05T20:00:00+09:00</updated><id>https://heejung-gjt.github.io/til11</id><content type="html" xml:base="https://heejung-gjt.github.io/til11">&lt;h2 id=&quot;210706-계획&quot;&gt;210706 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;pm-900-&quot;&gt;PM 9:00 ~&lt;/h4&gt;

&lt;p&gt;오전에 어제 공부했던 python 클래스 부분을 블로그에 정리할 예정이다. 이어서 매직 메서드 강의를 듣고 공부할 예정이며
파이썬의 기본 코딩 컨벤션에 관한 책을 읽을 예정이다. mysql 기본 쿼리에 대한 강의를 듣고 실제로 모델링 한 데이터베이스에 데이터를
넣는 실습을 해볼 예정이다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;#### python 클래스 부분 블로그에 정리하기&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;#### 매직 메서드 강의 듣고 정리하기&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;#### AWS EC2 서버에 MYSQL 구축해보기 + 블로그 정리하기&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;#### Django에 mysql 연동시킨후 데이터 넣어보는 실습하기&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;#### NN 프로젝트 모델링 취합하기&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;</content><author><name>jung</name></author><category term="til" /><summary type="html"></summary></entry><entry><title type="html">0705 TIL</title><link href="https://heejung-gjt.github.io/til10" rel="alternate" type="text/html" title="0705 TIL" /><published>2021-07-05T17:00:00+09:00</published><updated>2021-07-05T17:00:00+09:00</updated><id>https://heejung-gjt.github.io/til10</id><content type="html" xml:base="https://heejung-gjt.github.io/til10">&lt;h2 id=&quot;210705-계획&quot;&gt;210705 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;pm-900-&quot;&gt;PM 9:00 ~&lt;/h4&gt;

&lt;p&gt;오전에 파이썬 강의를 들으면서 pep8 컨벤션에 대해서 읽어볼 예정이다. 그 후 정리 못한 db나 네트워크를 공부한 후 블로그에 업로드 할 예정이다.
프로젝트에 대한 모델링을 끝내고 각자 백엔드의 역할을 분담한 후 오늘부터 본격적으로 백엔드 구현을 시작할 예정이다 !&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;python-강의-듣기---클래스-부분-정리하기instance-method-class-method-static-method&quot;&gt;&lt;del&gt;python 강의 듣기 - 클래스 부분 정리하기(instance method, class method, static method)&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;db기본-문법-or-network웹-동작-방식-공부후-블로그-업로드하기진행중&quot;&gt;db(기본 문법) or network(웹 동작 방식) 공부후 블로그 업로드하기(진행중..)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;프로젝트-모델링-구현-완성하기진행중&quot;&gt;프로젝트 모델링 구현 완성하기(진행중..)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;프로젝트-백엔드-역할-분담하기&quot;&gt;&lt;del&gt;프로젝트 백엔드 역할 분담하기&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;백엔드-구현하기구글시트-확인&quot;&gt;&lt;del&gt;백엔드 구현하기(구글시트 확인)&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;-am-1200&quot;&gt;~ AM 12:00&lt;/h4&gt;

&lt;p&gt;모델링 하는 방법이 쉽지 않다. 생각보다 고려해야 할 점이 많아서 동료와 꽤 오랜 시간 회의를 진행했다. 
둘 다 MYSQL 을 적용시켜 구현해보고 싶다는 의견이 맞아 각자 DB를 공부하는 시간을 가지기로 했다. 해보지 않았던 언어나
기능들을 적용시켜 보고 싶다. ❗&lt;/p&gt;</content><author><name>jung</name></author><category term="til" /><summary type="html"></summary></entry><entry><title type="html">0704 TIL</title><link href="https://heejung-gjt.github.io/til9" rel="alternate" type="text/html" title="0704 TIL" /><published>2021-07-04T13:00:00+09:00</published><updated>2021-07-04T13:00:00+09:00</updated><id>https://heejung-gjt.github.io/til9</id><content type="html" xml:base="https://heejung-gjt.github.io/til9">&lt;h2 id=&quot;210704-일-계획&quot;&gt;210704 (일) 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;pm-350-&quot;&gt;PM 3:50 ~&lt;/h4&gt;

&lt;p&gt;오늘이 프로젝트 프론트 마지막이다..! 오늘은 간단한 반응형 구현과  나머지 구현 못한 부분(마이페이지)을 구현하고 AJAX써야 하는 부분을
정리할 예정이다&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;nn프로젝트-반응형-구현하기&quot;&gt;&lt;del&gt;NN프로젝트 반응형 구현하기&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;마이페이지-프론트-구현하기&quot;&gt;&lt;del&gt;마이페이지 프론트 구현하기&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;ajax-사용할-부분-체크하기&quot;&gt;&lt;del&gt;ajax 사용할 부분 체크하기&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;0705---0711-부분-계획-세우기&quot;&gt;&lt;del&gt;0705 - 0711 부분 계획 세우기&lt;/del&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;pm--900&quot;&gt;PM ~ 9:00&lt;/h4&gt;

&lt;p&gt;주말이라 그런지 늘어진다.. 그래도 최소한의 할일을 끝내서 뿌듯하다..! 내일은 오전부터 달릴 예정이다. -! 
파이썬 공부를 본격적으로 다시 시작할 예정이다 😁&lt;/p&gt;</content><author><name>jung</name></author><category term="til" /><summary type="html"></summary></entry><entry><title type="html">reset을 이용한 git add, commit, push 되돌리기</title><link href="https://heejung-gjt.github.io/git" rel="alternate" type="text/html" title="reset을 이용한 git add, commit, push 되돌리기" /><published>2021-07-03T15:00:00+09:00</published><updated>2021-07-03T15:00:00+09:00</updated><id>https://heejung-gjt.github.io/git</id><content type="html" xml:base="https://heejung-gjt.github.io/git">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;git 강좌 순서 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./git-01&quot;&gt;git(1) - Git Tutorial&lt;/a&gt;&lt;/li&gt;--&gt;

&lt;!--&lt;/ul&gt;--&gt;

&lt;p&gt;git을 통해 프로젝트를 진행하다보면 보안문제로 인해 올리지 말아야 할 것을 실수로 올려 push까지 해버리는 경우가 있다. 
이럴때마다 일일이 구글링하면 해결하다보니 오랜 시간이 걸리는 것은 물론이고 진짜 돌이킬수 없는 강을 건너버리는 경우도 종종 있다.   &lt;br /&gt;
제대로 정리해서 깔끔하게 되돌리기를 성공해보자&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;git-add-commit-push-되돌리기&quot;&gt;git add, commit, push 되돌리기&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-git-add-되돌리기&quot;&gt;1. git add 되돌리기&lt;/h4&gt;

&lt;p&gt;add하기 전으로 돌아가고 싶다면 reset명령어를 쓰면 된다&lt;/p&gt;

&lt;p&gt;아래의 이미지처럼 unstaged가 파일은 변경되었지만 아무런 명령을 받지 않은 상태이다.
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124350699-23610080-dc31-11eb-99a3-2d9ba8ed53bc.PNG&quot; alt=&quot;git add 하기전&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;git add를 입력하면 아래의 이미지처럼 파일이 staged가 되는 것을 볼 수 있다.
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124350700-23f99700-dc31-11eb-9ff7-e09eae20deab.PNG&quot; alt=&quot;git 한 후&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이때 해결방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt;명령어이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특정-파일의-add-되돌리는-명령어&quot;&gt;특정 파일의 add 되돌리는 명령어&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt; git reset HEAD ex1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add된-파일-모두-되돌리는-명령어&quot;&gt;add된 파일 모두 되돌리는 명령어&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;2-git-commit-되돌리기&quot;&gt;2. git commit 되돌리기&lt;/h4&gt;

&lt;p&gt;commit을 취소하기 위해서는 git log를 통해서 취소할 commit을 정확히 확인해준다&lt;/p&gt;

&lt;p&gt;저장할 파일을 3, 4 ,5 로 commit 메세지를 작성할 예정이였으나 5가아닌 3으로 커밋이 저장되어 아래의 이미지처럼 저장이 된 상태이다.
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124351249-404b0300-dc34-11eb-858e-67bf39fcc755.PNG&quot; alt=&quot;commit 되돌리기 전&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이때 커밋 메세지만 변경할 예정이기 때문에 reset의 &lt;code class=&quot;highlighter-rouge&quot;&gt;--soft&lt;/code&gt;명령어를 사용하여 add만 한 상태로 되돌린다.
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124351247-3fb26c80-dc34-11eb-85cf-e21c6468eaa9.PNG&quot; alt=&quot;reset&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit된-파일을-add된-상태로-되돌리는-명령어&quot;&gt;commit된 파일을 add된 상태로 되돌리는 명령어&lt;/h3&gt;
&lt;p&gt;한단계만 되돌리면 되기때문에 HEAD뒤에 ^을 붙여준다. 이때 왜그런지는 모르겠으나 More?이라는 질문이 뜨는데 이때 그냥 바로 전 단계라는 의미로
^을 입력해주면 된다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git reset --soft HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit된-파일을-unstaged된-상태로-되돌리는-명렁어&quot;&gt;commit된 파일을 unstaged된 상태로 되돌리는 명렁어&lt;/h3&gt;
&lt;p&gt;그러니까 commit된 파일을 add도 되지 않은 맨 처음 상태로 되돌리는 명령어이다. 그리고 해당명령어는 디폴트 명령어이기 때무에
&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset HEAD^&lt;/code&gt;명령어와 똑같다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git reset --mixed HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit-된-파일을-n-단계로-되돌리고-싶을때-사용하는-명령어&quot;&gt;commit 된 파일을 n 단계로 되돌리고 싶을때 사용하는 명령어&lt;/h3&gt;
&lt;p&gt;만약 2단계전으로 돌리고 싶다면 HEAD뒤에 ~2를 붙여주면 된다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git reset HEAD~2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit된-파일을-아예-unstaged-상태로-디렉터리에서-삭제할때-사용하는-명령어&quot;&gt;commit된 파일을 아예 unstaged 상태로 디렉터리에서 삭제할때 사용하는 명령어&lt;/h3&gt;
&lt;p&gt;만약 git에서 main 브랜치로 이동하고 싶은데 unstaged에 변경된 파일이 있으면 브랜치로 이동할 수 없다. 이럴땐 stash 명령어 아니면
아래의 명령어를 써주자&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;push된-파일-되돌리기&quot;&gt;push된 파일 되돌리기&lt;/h3&gt;
&lt;p&gt;가장 고생했던 부분이다. 실제로 장고 시크릿키가 올라가서 되돌리기를 쓰다가 명령어 하나의 잘못으로 레포를 다시 판 기억이 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이 명령어는 내 local에 있는 파일의 내용들을 remote에 강제로 덮어쓰기 하는 명령어이기 때문에 주의해서 remote가 덮어쓰기 되어져도
괜찮은지 생각해보고 써주자&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;나는 commit id를 쓰는것을 선호한다. git log나 나의 리모트에 있는 commit id를 가져와서 입력하면 해당 commit이 된 시점으로 되돌아간다.
그렇기 때문에 이후에 commit된 내용들은 remote와 local 두군데에서 전부 사라지게 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git reset [commit id]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후 되돌려지기 되었다면 remote에서 commit의 기록을 지우기 위해 commit을 다시 해준 후 git push origin &lt;branch name=&quot;&quot;&gt; -f로 강제 덮어쓰기 해준다&lt;/branch&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;git push origin &amp;lt;branch name&amp;gt; -f 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이때 진짜 주의해야 할 것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;명령어이다. 이 명령어는 강제로 실행해주기 때문에 이후에는 돌이킬수 없다. 차라리 안전하게 코드를 백업시키고 써주자&lt;/p&gt;</content><author><name>jung</name></author><category term="git" /><summary type="html"></summary></entry></feed>