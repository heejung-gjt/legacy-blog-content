<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://heejung-gjt.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" /><updated>2022-01-08T20:06:05+09:00</updated><id>https://heejung-gjt.github.io/</id><title type="html">studying developer</title><subtitle>개발 공부하는 블로그</subtitle><entry><title type="html">나의 마지막 면접 후기</title><link href="https://heejung-gjt.github.io/interview2" rel="alternate" type="text/html" title="나의 마지막 면접 후기" /><published>2022-01-07T11:00:00+09:00</published><updated>2022-01-07T11:00:00+09:00</updated><id>https://heejung-gjt.github.io/interview2</id><content type="html" xml:base="https://heejung-gjt.github.io/interview2">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;벌써 입사한지 3주째가 되는 날이다. (이글이 나의 마지막 면접후기라니.. 믿기지 않는다..)&lt;/p&gt;

&lt;p&gt;약 삼주전에 많은 일이 있었다. &lt;strong&gt;6개&lt;/strong&gt; 의 서류를 넣었고 &lt;strong&gt;2개의 서류 탈락&lt;/strong&gt; 과 &lt;strong&gt;4개의 서류 통과&lt;/strong&gt; 라는 결과를 얻었으며 이 중 &lt;strong&gt;2군데에서의 최종합격&lt;/strong&gt; 이라는 결과를 얻었다.
최종합격을 받고나서는 우선 서류합격된 기업들에 불참이라는 의사를 메일을 통해 보냈다.(사실 이 당시에는 더이상 면접을 보면서 가슴을 졸이기 싫었다..😂😂)&lt;/p&gt;

&lt;p&gt;1-2일동안 굉장히 행복한 일이 몰아 들어왔다.😊 우선 내가 두번째로 면접을 보게된 기업은 블록체인 관련 기업이였다. 
각 코인의 공시정보를 제공하는 서비스를 하고 있는 기업으로 처음엔 인턴으로 지원하였다.&lt;/p&gt;

&lt;p&gt;면접 당시 면접관은 세분이 들어오셨다. 자기소개를 시작으로 어떤 프로젝트를 진행했는지, 
git관련 협업 경험 등등 생각보다 크게 어렵지 않은 질문들이 들어왔다(물론 실제로 경험을 했다면 어렵지 않았을 만한 질문들이였다 :)) 
아마 인턴으로 지원했기에 세세한 기술적인 질문은 크게 들어오지 않은것 같았다.&lt;/p&gt;

&lt;p&gt;무난하게 잘 얘기하고 있던 도중 파이썬에 대한 기본적인 질문이 들어왔다. 
정말로 기본적인 질문이였는데 제대로 대답을 하지 못했다.. ^^ 그래도 기억을 더듬어 아는선까지는 최선을 다해 대답했다. 
이때 면접관님의 듣는 모습이 인상적이였다. 굉장히 쉬운 질문이라 어버버거리고 있는 나를 보면서 어쩌면 엥? 과 같은 얼굴표정을 지어도 할 말이 없었을테지만 정말 너무 인자한 웃음을 지으시면서 내 대답 하나하나에 반응을 해주셨다..&lt;/p&gt;

&lt;p&gt;이후 사소한 질문을 몇가지 받고 나의 2번째 면접이 마무리 되었다. 
파이썬 질문도 완벽하게 대답해내지 못했고 결정적으로 그날 연락을 준다고 했지만 연락이 없었다..😂😂 &lt;br /&gt;
그렇게 내 2번째 면접이 경험으로나마 남겠구나라고 생각하며 당장 내일 있을 면접을 준비했다.&lt;/p&gt;

&lt;p&gt;이때 다음날 면접을 보게 될 기업에서 연락이 왔다. 바로 간단한 코딩테스트가 있을거라는 연락이였다.. 
사실 코딩테스트는 제대로 준비되어 있지도 않았고 이미 첫번째 면접에서 좋지 못한 결과를 얻었기에 자신이 없었다.. ㅠㅠ&lt;/p&gt;

&lt;p&gt;그래도 남은시간동안 최대한 코테를 대비하기 위해 기본적인 알고리즘 유형을 공부했다. 
다음날이 되었고 나의 세번째, 마지막 면접 시간이 되었다. 
이 기업은 빅데이터를 기반으로 sns마케팅을 하고있는 기업이였다. 
면접시간이 되기 전까지 회사 소개서를 주셔서 소개서를 읽었다..ㅎㅎ&lt;/p&gt;

&lt;p&gt;이곳은 무려 네분의 면접관이 들어오셨고 면접을 보면서 항상 들어왔던 첫 질문인 자기소개를 시키지 않으셨다..ㅋㅋ (자기소개를 진짜 달달 외웠었던 1인이다…ㅎㅎ) 
이곳은 프로젝트에 대한 질문도 다양하게 들어왔지만 무엇보다 나라는 사람에 대해 알고 싶어하는 느낌이 강했다.&lt;/p&gt;

&lt;p&gt;인성적인 부분을 알 수 있을만한 질문들이 꽤 들어왔었고 협업에 대한 질문도 많이 들어왔다. 
이때 질문에 바로 답을 할 수 있었던 이유는 내가 진짜 협업을 하면서 느낀 것들이였기 때문이다. 
30-35분? 정도의 질문이 오간 후 10분 동안 코딩테스트를 본다고 이야기를 하셨고 총 3문제를 풀어야 했다. (문제는 딱 봤을때는 굉장히 쉬워보였다…. ^^)&lt;/p&gt;

&lt;p&gt;10분동안 면접관분들이 나가 계셨고 나 홀로 회의실 같은 공간에서 노트북으로 문제를 풀게 되었다.
역시나 구글링 없이 문제를 푸는 것은 쉽지 않았고 도중에 문제가 막히니 그때부터는 머리가 하얗게 되버렸다..😅(이때부터는 시간만 쳐다본 것 같다 ㅋㅋㅋ) 
1분같은 10분이 지나고 거의 모든 문제를 풀지 못한채로(제대로 푼 문제가 없었다) 면접관분들이 들어오셨다. 
뭔가 다 못풀었다고 말하기 굉장히 죄송스러웠다…. ^^ 
그래도 내가 왜 그렇게 풀었는지에 대한 이유와 왜 못 풀었는지에 대한 이유는 제대로 이야기를 하고 싶어서 최대한 자세히 말씀드릴려고 노력했다.&lt;/p&gt;

&lt;p&gt;당연히 떨어질 줄 알았다.. :) 근데 정말 감사하게도 그 자리에서 입사 제안을 주셨다. 
나의 가능성에 대해 좋게 평가를 하신 것 같았다. 우선 이당시 굉장히 자존감이 낮아져 있었던 나로써는 눈물이 나왔다.. ㅋㅋㅋ 
입사제안이라니… 너무 좋았지만 한가지 마음에 걸리는것은 코딩 테스트 결과였다. 떨어져도 할 말 없는 곳에서 입사제안이라니.. 
우선은 불편한 마음은 뒤로 감추고 입사제안이라는 기쁨을 만끽하기로 했다..&lt;/p&gt;

&lt;p&gt;그리고 몇 시간 뒤에 인턴으로 지원했던 곳에서 연락이 왔다.
정직원으로 입사 제안을 하겠다는 연락이였다. (이게 무슨일 ?) 
진짜 그날밤은 너무 행복하게 잠이 들었다.&lt;/p&gt;

&lt;p&gt;다음날에 구글미트로 해당 기업의 대표님과 미팅을 하게 되었다. 
기업에 대한 설명과 어떤 기술을 쓰고 있는지 앞으로는 어떤것을 확장해 서비스 해나갈것인지에 대한 설명을 들은 후 질문시간을 가졌다. 
이렇게 약 30분정도의 미팅이 끝나게 되었다. 
결정을 해야했다..(감히 내가 선택을 해서 간다는 생각은 못했다)
두곳 전부 스타트업이었고 2-3년 정도 된 신생 스타트업이였다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;두번째 기업&lt;/strong&gt; 은 현재 국내에서 공시정보를 제공해주는 대표적인 플랫폼을 서비스를 하고 있다는 메리트가 있어보였다. 
내가 해야 할 업무는 빅데이터 관련 정보를 관리하면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;fast api&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;mongodb&lt;/code&gt; 를 새롭게 써 볼 수 있는 기회가 있었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;세번째 기업&lt;/strong&gt; 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;django&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt; 을 쓰는 기업이였고 해당 기업 플랫폼의 API를 구현하는 업무였다. 
내가 써왔던 프레임워크를 쓰게 되니 훨씬 더 적응하기 좋을 것 같았다. 
무엇보다 복지가 굉장히 잘 되어 있었고 협업을 중요시 하는 기업이였다.&lt;/p&gt;

&lt;p&gt;고민이 되었지만 이미 내 마음은 한쪽으로 쏠려 있었고 빠르게 업무에 투입되어 실무를 경험해보고 싶은 목마름이 있었다.&lt;/p&gt;

&lt;p&gt;그래서 고민 끝에 이미 마음 한켠에 두고 있었던 세번째 기업을 선택하게 되었다. 
사실 두 기업 다 성장하고 있는 기업이였기 때문에 어디를 들어가던 성장할 수 있을거라는 믿음이 있었다.&lt;/p&gt;

&lt;p&gt;이제 내가 빠르게 적응해서 성장하는 일만 남은 것 같다. 벌써 출근한지 3주라는 시간이 흘렀다.&lt;/p&gt;

&lt;p&gt;현재 나는 &lt;strong&gt;회사 플랫폼에 필요한 API를 구현&lt;/strong&gt; 중에 있다. 
무언가 역할을 맡아 일을 하고 있는 나를 보면서 너무 신기하고 긴장된다. 
실수하지 않고 싶지만 앞으로 많은 실수들이 있을것이고 그럴때마다 잘 극복해나가고 싶다.&lt;/p&gt;

&lt;p&gt;이렇게 나의 취준은 끝이 났다. 물론 앞으로 어떤 일이 나를 기다리고 있을지는 모르겠지만 현재 나의 상황에서 최선을 다하고 싶다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;안녕 취준 생활아!&lt;/strong&gt; 😎 ㅎㅎ (정말 안녕이기를,,,!!!!)&lt;/p&gt;</content><author><name>jung</name></author><category term="interview" /><summary type="html"></summary></entry><entry><title type="html">Django에 PostgreSQL 연동하기</title><link href="https://heejung-gjt.github.io/db8" rel="alternate" type="text/html" title="Django에 PostgreSQL 연동하기" /><published>2022-01-02T18:00:00+09:00</published><updated>2022-01-02T18:00:00+09:00</updated><id>https://heejung-gjt.github.io/db8</id><content type="html" xml:base="https://heejung-gjt.github.io/db8">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;windows-환경에서-설치&quot;&gt;(windows 환경에서 설치)&lt;/h5&gt;

&lt;p&gt;장고에서 postgresql을 연동시키기 위해서는 가장먼저 postgreSQL을 설치한다 &lt;br /&gt;
&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;공식사이트 👉 https://www.postgresql.org/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download 클릭 후 설치한다&lt;/li&gt;
  &lt;li&gt;pwd를 입력한다 (나중에 써야하기 때문에 기억해야 한다)&lt;/li&gt;
  &lt;li&gt;주로 5432의 포트번호를 사용하니 포트를 5432로 설정한다&lt;/li&gt;
  &lt;li&gt;stack bulider 설치여부는 체크를 해제한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;설치가 끝나면 설치된 경로(C:\ProgramData\Microsoft\Windows\Start Menu\Programs\PostgreSQL 14)에 &lt;code class=&quot;highlighter-rouge&quot;&gt;pgAdmin4&lt;/code&gt; 와
&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL Shell&lt;/code&gt;로 데이터베이스를 create할 수 있다&lt;/p&gt;

&lt;p&gt;shell로 db를 생성해보면,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;shell로 접속한다 &lt;br /&gt;
pwd를 제외하고 enter를 친다(default값으로 설정)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;erver &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;localhost]:
Database &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;postgres]:
Port &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;5432]:
Username &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;postgres]:
postgres 사용자의 암호: 암호입력
psql &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;14.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;db를 생성한다  &lt;br /&gt;
\l로 생성한 db를 확인한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# CREATE DATABASE database_name;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# \l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user와 pwd를 지정하고 권한을 부여한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; CREATE USER user_id WITH PASSWORD &lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ALTER ROLE user_id SET client_encoding TO &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ALTER ROLE user_id SET default_transaction_isolation TO &lt;span class=&quot;s1&quot;&gt;'read committed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ALTER ROLE user_id SET timezone TO &lt;span class=&quot;s1&quot;&gt;'UTC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 권한주기&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; GRANT ALL PRIVILEGES ON DATABASE database_name TO user_id&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; alter user scott with superuser&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; alter user scott with createdb&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; alter user scott with createrole&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; alter user scott with replication&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; alter user scott with bypassrls&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 부여된 권한 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후 장고에 DB에 생성한 database를 연동시킨다 &lt;br /&gt;
이때 연동시키기 위해서는 psycopg2 패키지를 설치해야 한다. 이때 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install psycopg2&lt;/code&gt;는 windows에서는 error가 발생한다 &lt;br /&gt;
이를 해결하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libpq-dev python-dev&lt;/code&gt; 를 먼저 설치한 후 설치하면 된다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;ENGINE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;django.db.backends.postgresql&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;partner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PASSWORD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5432&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후에도 계속 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.db.utils.OperationalError&lt;/code&gt; 에러가 발생했다. 근데 이문제는 NAME과 USER를 env로 값을 받아오지 않고 값을 그대로 써주면
해결되었다. 왜 그런지는 아직 잘모르겠다 😂&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;reference&quot;&gt;reference&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://doorbw.tistory.com/179?category=711158&quot;&gt;https://doorbw.tistory.com/179?category=711158&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://doorbw.tistory.com/183&quot;&gt;https://doorbw.tistory.com/183&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://initstory.tistory.com/19&quot;&gt;postgre GUI로 설정 -https://initstory.tistory.com/19&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://seulcode.tistory.com/111&quot;&gt;https://seulcode.tistory.com/111&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://web.archive.org/web/20140615091953/http://goshawknest.wordpress.com/2011/02/16/how-to-install-psycopg2-under-virtualenv/&quot;&gt;http://web.archive.org/web/20140615091953/http://goshawknest.wordpress.com/2011/02/16/how-to-install-psycopg2-under-virtualenv/&lt;/a&gt;&lt;/p&gt;</content><author><name>jung</name></author><category term="database" /><summary type="html"></summary></entry><entry><title type="html">2022년 목표 기록</title><link href="https://heejung-gjt.github.io/til69" rel="alternate" type="text/html" title="2022년 목표 기록" /><published>2022-01-01T13:00:00+09:00</published><updated>2022-01-01T13:00:00+09:00</updated><id>https://heejung-gjt.github.io/til69</id><content type="html" xml:base="https://heejung-gjt.github.io/til69">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;우선 가장 큰 목표였던 취업에 성공했다. 문제(?)는 앞으로다 🙄 공부할게 정말 많을 예정이다. 스스로 찾아서 해야 하는게 많고 스스로 이해해야 하는 것도 많다. 물론 어느정도의 도움을 받을 수 있지만 내 이해가 바탕이 되어야 된다는 생각을 했다.&lt;/p&gt;

&lt;p&gt;취업을 하고도 구글에 “주니어 백엔드 개발자 공부방법“이라는 글을 치고 있을지는 몰랐다 😅 ㅋㅋㅋ
2022년의 목표를 생각해보았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회사 업무에 적응하기 (코드구현 외에 다른 부수적인 것들, 협업, 지라 등등)&lt;/li&gt;
  &lt;li&gt;인프런 python 중급 과정 완강 + 클린코드 책&lt;/li&gt;
  &lt;li&gt;TDD 공부하기&lt;/li&gt;
  &lt;li&gt;데이터베이스 (인덱스란, 인덱스 활용 등등) 공부하기&lt;/li&gt;
  &lt;li&gt;비즈니스 로직 이해하기 + 아키텍처 이해하기&lt;/li&gt;
  &lt;li&gt;CI/CD 공부하기(이해 &amp;amp; 실습)&lt;/li&gt;
  &lt;li&gt;리눅스 환경 설정 등 익숙해지기(리눅스 공부)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…. &lt;br /&gt;
…  &lt;br /&gt;
😂&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;너무 많다 :) 현실적으로 정리해보자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2022년-목표&quot;&gt;2022년 목표&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;회사 업무에 적응하기&lt;/li&gt;
  &lt;li&gt;배운 내용은 글로 정리하기&lt;/li&gt;
  &lt;li&gt;인프런 python 중급 과정 공부하기 + oop에 대한 이해&lt;/li&gt;
  &lt;li&gt;클린코드 책 읽기&lt;/li&gt;
  &lt;li&gt;비즈니스 로직 이해하기(+공부)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>jung</name></author><category term="til" /><summary type="html"></summary></entry><entry><title type="html">백엔드 프리온보딩 4주차 첫번째 프로젝트 회고</title><link href="https://heejung-gjt.github.io/project6" rel="alternate" type="text/html" title="백엔드 프리온보딩 4주차 첫번째 프로젝트 회고" /><published>2021-11-27T15:00:00+09:00</published><updated>2021-11-27T15:00:00+09:00</updated><id>https://heejung-gjt.github.io/project6</id><content type="html" xml:base="https://heejung-gjt.github.io/project6">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-4주차-카닥-기업과제&quot;&gt;원티드 4주차 카닥 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.23 ~ 21.11.26&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 생성 API(회원가입/로그인)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 소유한 타이어 정보를 저장하는 API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 소유한 타이어 정보 조회 API&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 생성 API(회원가입/로그인)&lt;/li&gt;
  &lt;li&gt;사용자가 소유한 타이어 정보를 저장하는 API&lt;/li&gt;
  &lt;li&gt;사용자가 소유한 타이어 정보 조회 API&lt;/li&gt;
  &lt;li&gt;Unit Test 코드 작성&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;EC2 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;프리온보딩의 마지막 프로젝트였다. 벌써 시간이 이렇게 지났다니.. 😥 이번 프로젝트는 카닥이라는 기업의 과제였다. 개인 과제로 프로젝트를 마무리 하게 되었다  &lt;br /&gt;
카닥에서는 타이어 정보 API를 제공해주었고 이 API에서 제공해주는 데이터를 가지고 타이어의 정보를 데이터베이스에 저장해야 하는 과제였다. 이 부분만 제외하면 지금까지 해왔던 과제들과 
크게 다르지 않을 것 같았다.&lt;/p&gt;

&lt;p&gt;역시나 시작은 모델링 설계,, 항상 팀원들과 함께 진행하다 혼자 하려니 허전했다.. ㅎㅎㅎ 주어진 타이어 정보 API에는 자동차에 대한
정보들이 굉장히 세세하게 나와있었다. 어디까지 저장하라는 조건이 없었기에 스스로 생각해서 데이터 정보를 어디까지 저장할지 결정해야 했다.&lt;/p&gt;

&lt;p&gt;나는 해당과제는 유저가 소유한 자동차의 타이어 정보를 저장하고 조회하는 과제인만큼 타이어 정보에 초점을 맞추기로 했다.&lt;/p&gt;

&lt;h3 id=&quot;requests의-사용&quot;&gt;requests의 사용&lt;/h3&gt;

&lt;p&gt;타이어 정보를 저장하는 body request는 아래와 같이 최대 5명의 유저들의 정보에 대한 요청을 할 수 있다. trimId가 https://dev.mycar.cardoc.co.kr/v1/trim/{id} 의 url에 파라미터로 담겨
 해당되는 자동차의 정보가 출력된다. 이때 필요한 데이터를 가져오기 위해서 requests를 사용했다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;과제 조건에 써져있는 것처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;spec → driving → frontTire/rearTire -&amp;gt; 타이어 정보&lt;/code&gt; frontTire와 rearTire의 값인 value를 
{폭}/{편평비}R{18}의 포맷에 맞게 각각 나누어 폭, 편평비, 휠사이즈로 각각 데이터베이스에 저장해주어야 했다&lt;/p&gt;

&lt;p&gt;즉 자동차마다 각각의 자동차 스팩을 가지고 있었고 스팩 중 하나가 자동차 타이어에 대한 정보였다. 그래서 나는 자동차의 기본정보를 가지고 있는 테이블과 자동차의 스펙을 스펙 테이블로 나누어 1:1로 연결해주었다.
그리고 스펙 테이블에서는 타이어의 스펙이 같은 자동차가 존재할거라고 생각했기 때문에 타이어 테이블과 스펙 테이블을 1:n으로 연결시켜주었다.&lt;/p&gt;

&lt;p&gt;설계 과정에서 가장 고민이였던게 바로 타이어가 앞/뒤 타이어로 정보가 나뉘는데 각각의 테이블로 나누어 저장할지 하나의 타이어 테이블을 만들어 저장할지 고민이였다. 
고민 끝에 해당 과제는 타이어의 정보가 중요했기에 앞 타이어와 뒤 타이어에 대한 테이블을 나누어 설계하기로 결정했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;requests이용한 타이어 정보 가져오기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://dev.mycar.cardoc.co.kr/v1/trim/{trim_id}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;front_tire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[P/R]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driving&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frontTire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rear_tire&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[P/R]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driving&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rearTire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;info_dic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;trim_id&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;car_brand&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;brandName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;year_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yearType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;car_name&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submodelGroupName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;front_tire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front_tire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;rear_tire&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rear_tire&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;타이어 정보를 가져올때 과제에 정해진 타이어 정보 포맷이 있었다. 포맷이 지켜지지 않으면 데이터베이스에 저장할 수 없었다. 그래서 
정규표현식을 이용해 정해진 포맷이 아닐 경우 빈 리스트를 가져오게 구현했다. 그리고 빈 리스트일 경우 except문으로 빠져나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsaved_tire_list.append(data[&quot;id&quot;])&lt;/code&gt; 의 로직으로 인해
저장되지 않은 리스트에 해당 유저가 담긴다&lt;/p&gt;

&lt;p&gt;view에서 for문을 돌면서 중간에 에러가 나도 그 다음부터는 정상적으로 저장되게 구현하고 싶었기 때문에 에러가 난 유저의 자동차 정보부터 스펙 정보 ~ 타이어 정보까지 전부 저장되지 않게 구현했다 (여기서 원자성을 고려했다 !)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;벌써 마지막 프로젝트라니 .. 할 때는 너무 힘들었는데 마지막이라고 하니까 뭔가 아쉽다.. 처음 만난 팀원들과 첫 날부터 쉬지 않고 지금까지 함께 달려왔고 완주했다는 것에 만족스럽다. 다들 열심히 하는 모습에 자극도 많이 받고 배운점도 너무 많은 것 같다.. :-) 무엇보다 함께하니 절대 못할 것 같은 것도 해내게 되는 과정이 나름 짜릿하다.. 물론 초반에는 밤도 밥 먹듯이 새고.. (진짜 아예 새버렸다.. 저녁 8시에 시작했는데 다음날 7시 넘어서 끝났다.. 😂😂😂)&lt;/p&gt;

&lt;p&gt;그럼에도 누구하나 포기하지 않고 탓하지 않고 열심히 하려는 팀원들에게 고마웠다. 물론 어려웠던 상황도 꽤 있었지만 우리만의 나름의 소통(?)을 통해서 자기자신을 다시 바라보고 고치려고 하는 모습과 배려하려는 모습이 보였기 때문에 
웃으며 이겨낼 수 있었다. ^^&lt;/p&gt;

&lt;p&gt;왜 협업이 중요한지에 대해 말하는건 입이 아플 정도다. 혼자서 잘한다고 절대 멋진 결과물을 만들어 낼 수 없다.. 적극적인 커뮤니케이션이 우리 팀이 처음부터 끝까지 포기하지 않고 다함께 프로젝트를 마무리 할 수 있었던 이유였던 것 같다&lt;/p&gt;

&lt;p&gt;난 덕분에 git rebase와 squash에 익숙해질 수 있었다.. :-) 그리고 적극적인 코드리뷰 덕분에 코드를 바라보는 시각을 넓힐 수 있었다.. (코드리뷰 시간만큼은 마치 사수와 함께하는 기분이 들었다..^-^)&lt;/p&gt;

&lt;p&gt;열심히 해준 팀원들도 고마웠고 나 자신 또한 자랑스러웠다 후후&lt;/p&gt;</content><author><name>jung</name></author><category term="project" /><category term="Cardoc" /><category term="wecode" /><category term="wanted" /><summary type="html"></summary></entry><entry><title type="html">일기장 프로젝트 회고 및 리팩토링 후기</title><link href="https://heejung-gjt.github.io/django-project3" rel="alternate" type="text/html" title="일기장 프로젝트 회고 및 리팩토링 후기" /><published>2021-11-27T11:40:00+09:00</published><updated>2021-11-27T11:40:00+09:00</updated><id>https://heejung-gjt.github.io/django-project3</id><content type="html" xml:base="https://heejung-gjt.github.io/django-project3">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 프로젝트는 4월에 바닐라 자바스크립트로 만들어진 프로젝트였다.(&lt;a href=&quot;https://github.com/heejung-gjt/Toy-Project&quot;&gt;초반 프로젝트 Repo&lt;/a&gt;) 기존에 배웠던 자바스크립트 내용을 응용해서 유저가 업로드 할 수 있는 이미지와 
글을 올리고 수정, 삭제 할 수 있는 프로젝트를 개발하는 것이 목표였다. 동료 한 명과 함께 약 2주간 프로젝트를 진행했으며 구현된 기능은 아래와 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;👉 사진 업로드(미리보기, 재업로드 가능)&lt;/p&gt;

  &lt;p&gt;👉 search기능(등록한 날짜나 키워드-제목 기준으로 필터가능)&lt;/p&gt;

  &lt;p&gt;👉 했던 일 제목과 내용 작성, 수정&lt;/p&gt;

  &lt;p&gt;👉 등록한 내용 미리보기(업로드한 이미지와 제목 표시, 삭제가능)&lt;/p&gt;

  &lt;p&gt;👉 세부 내용 보기(내용 수정 가능)&lt;/p&gt;

  &lt;p&gt;👉 등록 날짜 기록,수정 시 수정 날짜 기록&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다른 프레임워크 없이 순수하게 자바스크립트로만 구현하려니 쉽지 않았다. 프로젝트를 끝낸 후 아쉬웠던 점은
 업로드 된 이미지와 글이 데이터베이스에 저장되는게 아닌 localstorage에 저장되었던 점, 로그인/회원가입 기능이 없는 점이 아쉬웠다.&lt;/p&gt;

&lt;p&gt;이후 장고라는 프레임워크를 공부하게 되었고 꽤 다양한 토이 프로젝트를 진행했었다. 그러면서 자연스럽게 API 설계에 대한 관심이 커졌다. 사실 진행해왔던 프로젝트들이 
모두 장고 풀스택으로 구현된 프로젝트였기 때문에 API서버 구현을 직접 해보고 싶었다.&lt;/p&gt;

&lt;p&gt;그 과정에서 과거에 진행했던 이 프로젝트가 눈에 띄었다. Html, css, js로 만들어진 프로젝트였기 때문에 프론트엔드 단으로 쓰기에 적절해보였다.(또 다시 프론트를 만들 시간이 없었다.. 근데 프론트가 있기를 바랬다..^^) 
사실 꼭 프론트가 있어야 API서버를 구축할 수 있는건 아니였지만 최대한 프론트와 어떤식으로 연결되고 데이터를 주고받는지 가깝게 경험해보고 싶었다. 그래서 해당 프로젝트를 develop하기로 결정했다&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프론트엔드와-백엔드의-분리&quot;&gt;프론트엔드와 백엔드의 분리&lt;/h3&gt;
&lt;p&gt;나는 프론트와 백엔드가 완벽하게 분리되길 바랬다. 그래서 가장 먼저 했던 일은 프론트와 백엔드를 각각의 프로젝트로 분리시켰다.&lt;br /&gt;
완벽한 분리가 되기 위해서는 django에서 url과 view를 알맞게 세팅해주어야 한다. C.R.U.D에 대한 view를 각각 만들어주었다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleCreateView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'delete/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleDeleteView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'delete'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'detail/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleDetailView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'update/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleUpdateView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'detail'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;👉 &lt;a href=&quot;https://github.com/heejung-gjt/diary-frontend&quot;&gt;프론트엔드 Repo&lt;/a&gt;  &lt;br /&gt;
👉 &lt;a href=&quot;https://github.com/heejung-gjt/diary-backend&quot;&gt;백엔드 Repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 과정에서 코드가 완전히 분리될때 어떻게 통신하는지 알 수 없었다. 그래서 구글링을 통해 프론트와 백엔드가 통신하는 방법에 대해 찾아보았다. 보통 서버는 클라이언트에서 요청이 들어오면
가장 먼저 URLconf로 들어가 요청된 url이 존재하는지를 확인한 후 url에 맞는 view에 데이터를 요청한다. 즉 프론트에서 먼저 서버의 url에 대한 요청이 있어야 했다. 요청할 수 있는 방법은 2가지 정도 존재했다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;postman : GUI를 통해 데이터 요청 보낼 수 있음&lt;/li&gt;
  &lt;li&gt;httpie  : CLI를 통해 데이터 요청 보낼 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 2가지를 이용할 수 있었다. 우선 나는 데이터가 요청되는지에 대한 확인이 빠르게 필요했기 때문에 httpie를 이용했다. 프론트엔드 프로젝트의 cli에서 (꼭 프론트엔드 터미널 일 필요는 없다)
요청을 보내보았다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; GET 127.0.0.1:8000/article
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 메소드와 url을 올바르게 입력하면 잘 보내지는게 확인된다&lt;/p&gt;

&lt;p&gt;이런식으로 프론트에서 서버 url을 호출해야 하는데 나는 프론트엔드 프레임워크를 잘 모르는 관계로 Ajax를 이용해 백엔드 서버와 통신하기로 결정했다 &lt;br /&gt;
아래의 코드와 같이 데이터 요청이 필요할 경우 ajax로 통신했다. fetch()로 호출할 서버의 url을 입력했고 이때 필요한 데이터는 param이라는 변수에 json 타입으로 
담아서 body에 넣어 함께 보내주었다.&lt;/p&gt;

&lt;p&gt;이후 반환된 값은 then(function (data) 에서 data에 담겨져서 반환되기 때문에 해당 data에서 적절히 데이터를 꺼내 로직을 구현했다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1:8000/user/login/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'access_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1:8000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이때 postman이나 httpie에서는 발생하지 않는 문제점이 발생하는데 바로 &lt;a href=&quot;https://heejung-gjt.github.io/cors1&quot;&gt;cors&lt;/a&gt; 문제였다 😂 
다행히 장고에서는 cors-headers라는 패키지를 install하면 간단히 해결 할 수 있는 문제였다&lt;/p&gt;

&lt;p&gt;이렇게해서 프론트와 백엔드가 완벽하게 분리 될 수 있었고 프론트와 백엔드 작업을 독립적으로 진행 할 수 있게 되었다 :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rest-api-설계&quot;&gt;REST API 설계&lt;/h3&gt;
&lt;p&gt;위의 URL 코드를 봐서 알겠지만 초반에 나는 C.R.U.D에 대한 view를 각각 만들어주었다.&lt;/p&gt;

&lt;p&gt;아래와 같이 말이다. 이럴 경우 코드의 낭비가 심해질 수 있다. 한개의 API가 프론트엔드에서 딱 하나의 페이지에서 이용되기 때문에 코드가 많아질수록
POST와 GET 메소드만의 사용은 매우 비효율적이다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleCreateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_build_article_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleDetailView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;REST API 설계로 수정을 하는게 훨씬 효율적이라고 판단했다. 수정은 PUT메소드로 삭제는 DELETE메소드로 수정 할 목표로 리팩토링을 진행했다. 일단 결과는
DELETE메소드는 정상적으로 삭제가 되지만 PUT메소드에 문제가 있었다.&lt;/p&gt;

&lt;p&gt;PUT메소드로 수정하니 유저의 데이터가 담긴 form data를 view에서 인식하지 못했다.. 우선 장고는 put,delete 요청을 아래와 같이 처리하지 못한다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PUT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;someparam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;찾아보니 주로 매개변수를 가져오기 위해서는 QueryDict를 사용하여 문제를 해결한다고 한다. 하지만 단점도 여럿 존재해 보였다. (dict안에 있는 값을 가져오는데 꽤 까다롭다고 한다) 나는 delete의 경우 id는 쿼리 스트링으로 가져오기 때문에 다른 매개변수가 
필요없었다. 그래서 put만 post 메소드를 사용해 수정하기로 결정했다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryDict&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueryDict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;수정 후 url의 모습이다. 수정 전과 비교했을때 view의 재활용도가 훨씬 높아진 것을 볼 수 있다. :-)&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleDetailView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;detail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&amp;lt;id&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleDetailView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;update&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/delete/&amp;lt;id&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArticleDetailView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;unit-test-코드-작성&quot;&gt;Unit Test 코드 작성&lt;/h3&gt;

&lt;p&gt;사실 unit test의 중요성, 필요성에 대해서 제대로 생각해보지 않았었다. 백엔드 프리온보딩 프로그램에 참여하게 되면서 unit test의 중요성과 필요성에 대해서 명확히 느끼게 되었고 
실제로 작성하는게 그리 어렵지 않았다. 시간이 조금 걸릴뿐 .. ^^&lt;/p&gt;

&lt;p&gt;unit test를 초반에 작성하고 나면 좋은점은 로직을 수정한 후 테스트를 돌릴때 불필요한 더미 데이터가 데이터베이스에 저장되지 않는게 좋았다. 또
수정된 로직에 문제가 있으면 unit test에서 한번에 잡아주기 때문에 내가 일일히 서버 url에 요청을 보낼 필요가 없어진다. 그만큼 시간을 굉장히 단축시켜준다&lt;/p&gt;

&lt;p&gt;하지만 unit test의 작성이 잘못되면,,  큰 낭패다,, 실제로 유닛테스트에서 성공해서 서버에 배포했던 프로젝트에서 404에러가 떴던 경험이 있다. 그만큼 꼼꼼하게 실패케이스를 
작성해야 한다 !&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;project-introduction&quot;&gt;Project Introduction&lt;/h3&gt;

&lt;p&gt;이 프로젝트는 유저가 자신의 사진과 글을 올려 기록 할 수 있게 한 프로젝트로 바닐라 자바스크립트로 개발된 프로젝트를 프론트와 백엔드로 분리해 REST API 설계로 리팩토링 한 프로젝트입니다. 
유저의 로그인/회원가입 API, 글과 이미지 C.R.U.D를 구현했습니다.&lt;/p&gt;

&lt;h4 id=&quot;초기-프로젝트-진행-인원-수--2명&quot;&gt;초기 프로젝트 진행 인원 수 : 2명&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발 기간 : v1.0 2021.04.05 ~ 2021.04.16&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;후기-리팩토링-프로젝트-진행--개인&quot;&gt;후기 리팩토링 프로젝트 진행 : 개인&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발 기간 : v2.0 2021.10.19 - 2021.11.01    &lt;br /&gt;
추가된 기능 : 회원가입/로그인 API, Unit Test 구현&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발 기간 : v2.0 2021.11.27 ~ 2021.12.07   &lt;br /&gt;
추가된 기능 : REST API서버 구현&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;GitHub Respository  &lt;br /&gt;
   Github BackEnd Repo. &lt;a href=&quot;https://github.com/heejung-gjt/diary-backend&quot;&gt;refactoring repo&lt;/a&gt;  &lt;br /&gt;
   Github frontEnd Repo. &lt;a href=&quot;https://github.com/heejung-gjt/diary-frontend&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>jung</name></author><category term="project" /><category term="refactoring" /><summary type="html"></summary></entry><entry><title type="html">백엔드 프리온보딩 3주차 두번째 프로젝트 회고</title><link href="https://heejung-gjt.github.io/project5" rel="alternate" type="text/html" title="백엔드 프리온보딩 3주차 두번째 프로젝트 회고" /><published>2021-11-22T15:00:00+09:00</published><updated>2021-11-22T15:00:00+09:00</updated><id>https://heejung-gjt.github.io/project5</id><content type="html" xml:base="https://heejung-gjt.github.io/project5">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-3주차-디어코퍼레이션-기업과제&quot;&gt;원티드 3주차 디어코퍼레이션 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.18 ~ 21.11.21&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;유저 Auth&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;회원가입 API&lt;/li&gt;
      &lt;li&gt;로그인 API&lt;/li&gt;
      &lt;li&gt;할인 / 벌금 CRUD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;할인 조건 추가 API&lt;/li&gt;
  &lt;li&gt;벌금 조건 추가 API&lt;/li&gt;
  &lt;li&gt;할인 조건 변경 API&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;벌금 조건 변경 API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;킥보드 대여 및 반납
    &lt;ul&gt;
      &lt;li&gt;킥보드 대여 API&lt;/li&gt;
      &lt;li&gt;킥보드 반납 요금 정책에 따른 요금 계산 API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;위치 정보 CRUD
    &lt;ul&gt;
      &lt;li&gt;서비스 지역 생성 API&lt;/li&gt;
      &lt;li&gt;지역에 추가되는 할인 / 벌금 추가 API&lt;/li&gt;
      &lt;li&gt;지역에 추가되는 할인 / 벌금 삭제 API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;할인/벌금 추가 API&lt;/li&gt;
  &lt;li&gt;지역에 추가되는 할인/벌금 추가 API&lt;/li&gt;
  &lt;li&gt;Unit Test 코드 작성&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;EC2 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;개인적으로 지금까지 진행했던 프로젝트 중에 가장 쉽지 않은 과제였던 것 같다. 서비스 지역마다 할인/벌금/주차구역 등 적용해야 하는 
조건이 달랐기 때문에 어떻게 이 조건들을 지역에 맞게 적용시켜야 하는지 처음에는 감도 잘 오지 않았다. 과제가 주어지고 이후 팀원들과 가장 오랜시간동안 
회의를 진행했었다.&lt;/p&gt;

&lt;p&gt;다행히 과제 기한이 다른 과제보다는 길었기 때문에 시간적 압박은 덜했다. :-)
첫번째 회의에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;지역의 위도와 경도는 어떻게 얻을것인가&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;모델링 설계는 어떻게 진행해야 하는가&lt;/code&gt; 이 2가지를 중심으로 
진행했다. 다행히 모델링 설계는 과제 조건에 기본적으로 나와 있어서 이를 토대로 설계를 진행했다.&lt;/p&gt;

&lt;p&gt;사용자가 이용하는 킥보드 모델, 킥보드 모델, 서비스 지역 모델, 피킹존 모델, 반납금지 구역 모델이 기본적으로 나와있었기 때문에 아래를 토대로 
모델링 설계를 진행했다.&lt;/p&gt;

&lt;h4 id=&quot;모델링-설계&quot;&gt;[모델링 설계]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;킥보드가 사용 될 때마다 usages 즉 킥보드 사용 내역에 정보가 저장된다 (1:N 관계)&lt;/li&gt;
  &lt;li&gt;킥보드는 여러 서비스 지역에서 사용된다 (1:N관계)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; vehicle 모델 (사용자가 이용하는 킥보드 모델)

deer_name (킥보드의 이름으로 고유한 값)
deer_area_id (킥보드가 현재 위치한 지역의 아이디)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;한명의 유저는 여러 킥보드 사용내역을 가질 수 있다(1:N관계)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; usages 모델 (사용자 킥보드 사용 내역 모델)   

use_deer_name (사용자가 이용한 킥보드의 이름)
use_end_lat, use_end_lng (사용자가 이용을 종료할 때 위도 경도)
use_start_at, use_end_at (사용자가 이용을 시작하고 종료한 시간)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 지역마다 여러 할인/벌금 조건이 추가/수정된다 (1:N관계)&lt;/li&gt;
  &lt;li&gt;서비스 지역마다 여러 주차지역/반남금지 구역이 존재한다 (1:N관계)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; service_area모델(서비스 지역 모델)   

area_id (지역 아이디로 고유한 값)
area_bounday (지역을 표시하는 MySQL spatial data로 POLYGON)
area_center (지역의 중심점)
area_coords (지역의 경계를 표시하는 위도, 경도로 이루어진 점의 리스트)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; parking_areas(주차 지역 모델)

parkingzone_id (파킹존 아이디로 고유한 값)
parkingzone_center_lat, parkingzone_center_lng (파킹존 중심 위도, 경도)
parkingzone_radius (파킹존의 반지름)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; forbidden_areas(반납 금지 구역 모델)

forbidden_area_id (반납금지구역 아이디로 고유한 값)
forbidden_area_boundary (반납금지구역을 표시하는 MySQL spatial data로 POLYGON)
forbidden_area_coords (반납금지구역의 경계를 표시하는 위도, 경도로 이루어진 점의 리스트)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;팀원들과 회의를 하며 추가한 모델은 아래와 같았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;user 모델&lt;/strong&gt;       &lt;br /&gt;
유저의 정보가 저장되어야 해당 유저에게 벌금/할인을 부과하고 해당 킥보드를 어떤 유저가 사용하고 있는지에 대한 정보가 필요했기 때문에 유저 모델을 추가했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;roles 모델&lt;/strong&gt;     &lt;br /&gt;
확장성을 고려해 role이라는 모델을 생성했다. 후에 유저를 나이대별로 나누어 사용 금액을 따로 부과할 수 도 있기 때문에 유저에 role을 부과하기 위해 모델을 추가했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;types 모델&lt;/strong&gt;      &lt;br /&gt;
할인과 벌금에 대한 조건을 추가하는 모델을 discount_or_penalties라는 모델 하나로 진행하기 위해 할인/벌금에 대한 타입을 부과했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;unit 모델&lt;/strong&gt;     &lt;br /&gt;
할인과 벌금이 원이라는 금액으로 추가될 수 있지만 거리에 비례하여 %로 추가할 수 있기 때문에 이를 고려해 unit이라는 모델을 추가했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;service_area_discount_or_penalties 모델&lt;/strong&gt; &lt;br /&gt;
네이밍 짓는게 너무 힘들었다. 최대한 어떤 역할을 하는 모델인지를 추측할 수 있게 길더라도 풀어서 쓰자는 결론이 나왔고 위와 같은 네임이 나오게 되었다. &lt;br /&gt;
여러 서비스 지역마다 여러 할인/벌금 조건이 추가되고 삭제될 수 있기 때문에 M:M의 관계로 구축하게 되었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144787091-df3d2686-14c8-45c2-9674-b15d64687111.PNG&quot; alt=&quot;디어erd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;모델링-설계-중-생겼던-문제해결&quot;&gt;[모델링 설계 중 생겼던 문제해결]&lt;/h4&gt;
&lt;p&gt;모델링 설계가 끝난 뒤 프로젝트의 모델링 초기 세팅을 위해서 작성하는 도중에 PolygonField와 같이 geo 관련 필드에서 에러가 발생했다. 
찾아본 결과 geo 관련 (폴리곤, 포인트 등) 필드 사용할 때 django.contrib.gis.db에서 models 임포트하여 사용해야 했다(기존 방식대로 models.Model 임포트하여 사용하면 안된다)&lt;/p&gt;

&lt;p&gt;팀원들의 os환경이 우분투와 맥으로 나뉘었었고 우분투 기준으로 아래와 같이 해결했었다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우분투 기준 sudo apt-get install gdal-bin, sudo apt-get install libgdal-dev 명령어 사용&lt;a href=&quot;https://gis.stackexchange.com/questions/370736/installing-gdal-on-ubuntu-20-04-unmet-dependencies&quot;&gt;install 관련 블로그 참고&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;INSTALLED_APP에 “django.contrib.gis” 추가 후 데이터베이스 ENGINE을 django.contrib.gis.db.backends.mysql로 변경&lt;a href=&quot;https://stackoverflow.com/questions/12538510/getting-databaseoperations-object-has-no-attribute-geo-db-type-error-when-do&quot;&gt;stackoverflow 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이후 gdal 문제는 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install gdal&lt;/code&gt; 설치로 해결할 수 있다는 것을 알게되었다 :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;gdal-사용&quot;&gt;[GDAL 사용]&lt;/h4&gt;
&lt;p&gt;이 프로젝트에서 가장 큰 관건은 바로 “지역의 위도와 경도는 어떻게 얻을것인가” 였다. 이 부분은 각자 충분히 찾아보고 
회의를 진행하기로 하여서 1-2시간의 시간을 가지고 다시 만나 회의를 진행했다. 팀원 중 한명이 지역의 커서를 찍으면 찍은 
지역의 필요한 데이터인 POLYGON 정보를 받을 수 있게되었다 !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;geojson을 이용하여 GEOSGeometry 객체 저장하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;geojson.io 에서 원하는 지역에 도형(polygon) 및 점(point)을 생성하여 geojson 형식의 파일을 생성하고 unit test에서 geojson 파일을 읽어서 각 feature를 생성하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144789568-d34f85ce-412c-4a67-bf71-6476bbe086a3.PNG&quot; alt=&quot;gdal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;두 feature 사이의 거리 계산&lt;/strong&gt;  &lt;br /&gt;
haversine 라이브러리를 이용하여 WGS84 좌표계 시스템으로 되어있는 두 좌표간 거리를 계산해 주었고, 지역을 벗어난 킥보드가 해당 지역으로부터 얼마나 떨어져 있는지 계산하기 위해 epsg 5174 좌표로 변환한뒤 킥보드 반납 지점(Point)과 지역(Polygon)의 거리를 계산해 주었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;생각해야 할 게 많은 프로젝트였다.. ^^ 기능 구현하는 시간보다 오히려 초반에 더 많이 헤매고 찾아봤던 기억이 난다. polygon이 무슨 역할을 하는지
장고에서 제공되는지도 잘 몰랐기에 polygon을 이해하는데 오랜 시간이 걸렸다. 사실 아직도 조금 헷갈리는 개념이긴 한 것 같다. 다행히 팀원 한분이 커서를 찍으면 이에 맞는 위도, 경도등을 
자동으로 계산해서 출력해주는 사이트를 찾게 되어서 다행이 데이터를 세팅 할 수 있었다.&lt;/p&gt;

&lt;p&gt;이번 프로젝트는 migrations 파일을 관리하는 팀원을 한명 두어 최대한 마이그레이트 하는 과정에서 문제가 생기지 않게 했다. 화면공유를 통해 다같이 데이터를 세팅하는 과정에 참여했다. 기능구현도 물론 쉽지 않았지만 
이번 과제는 초기 모델링 설계 ~ 초기세팅부터 기능 구현후의 데이터 세팅이 더 어려웠던 것 같다. 모델링 설계에 많은 시간을 들여 모든 팀원이 완벽히 이해한 후 진행한게 기능 구현에 가장 큰 도움이 되었다.
진짜 모델링 너무 중요한 것 같다..!&lt;/p&gt;

&lt;p&gt;이번 프로젝트는 PR을 적극적으로 활용했던 것 같다 :-) 팀원의 리뷰를 통해 코드가 더욱 나아질 수 있고 다른 방향으로도 생각을 할 수 있게 해주는 시간이였던 것 같아 
개인적으로 좋았다(다한증이 생긴건 비밀이다.. ^^)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144790671-c335cb2a-494b-4e6f-b430-e6d03acefb14.PNG&quot; alt=&quot;PR2&quot; /&gt; &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144790674-5cd55a1e-37fb-4f17-807d-702fe9152303.PNG&quot; alt=&quot;PR1&quot; /&gt;&lt;/p&gt;</content><author><name>jung</name></author><category term="project" /><category term="디어코퍼레이션" /><category term="wecode" /><category term="wanted" /><summary type="html"></summary></entry><entry><title type="html">Ubuntu 20.04 clean, files, blocks 문제 해결하기 (grud 검은화면)</title><link href="https://heejung-gjt.github.io/linux2" rel="alternate" type="text/html" title="Ubuntu 20.04 clean, files, blocks 문제 해결하기 (grud 검은화면)" /><published>2021-11-20T14:59:00+09:00</published><updated>2021-11-20T14:59:00+09:00</updated><id>https://heejung-gjt.github.io/linux2</id><content type="html" xml:base="https://heejung-gjt.github.io/linux2">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;내 노트북은 우분투 os를 멀티부팅으로 설치하여 windows와 함께 쓰고 있었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;우분투 20.04&lt;/code&gt; 버전으로 설치되어 있으며
Rufus를 사용해 Ubuntu 설치용 USB 메모리를 만들어 설치했었다.&lt;/p&gt;

&lt;p&gt;굉장히 고생을 했었던 기억이 있다.. ^^ 근데 이번에 갑자기 우분투에 알 수 없는(?) 에러가 발생했다. 아래와 같이
화면이 뜨더니 익숙한 보라색 화면으로 넘어가지 않았다.. 황당한건 불과 1시간전까지만 해도 잘 쓰고 있었는데 이런 에러가 떴다는 거다.. (나한테 왜이랭…)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144413586-2090d4d5-3649-4dd7-a303-a55767e753ca.PNG&quot; alt=&quot;검은화면&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 아주 최악의 상황만 아니면 된다..! (지우고 다시 깔아야 하는 끔찍한 상황,, 😂) 내가 할 수 있는건 구글링이였고 참 여러번의 삽집을 하였다.  ^^ 
뭐 그 과정에서 우분투 파티션 즉 용량을 늘릴수 있는 방법을 알게되서 나름 소득 있는 시간이였다… :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-우분투-부팅-usb로-할당되어-있는-파티션-확인하기&quot;&gt;1. 우분투 부팅 USB로 할당되어 있는 파티션 확인하기&lt;/h3&gt;
&lt;p&gt;일단 나는 과거에 윈도우를 업데이트 시키다 grud를 날린적이 있기 때문에 grud를 복구하기 위한 부팅 usb를 만들어 놓았던 적이 있다. 진짜
이게 아아주 큰 도움이 되었다. (근본적인 해결이 되지는 않았다 ㅎㅎ)&lt;/p&gt;

&lt;p&gt;구글링 하는 과정에서 한 유튜버가 해결방법으로 부팅 USB로 들어가서 해결하는 방법을 보았다.&lt;br /&gt;
일단 내가 알아야 하는것은 &lt;code class=&quot;highlighter-rouge&quot;&gt;LG그램의 바이오스 진입&lt;/code&gt; 은 어떻게 하는가였다. 전원을 켤때 F2를 연속으로 쳐주면 바이오스에 진입할 수 있다.&lt;/p&gt;

&lt;p&gt;그럼 아래와 같은 화면이 나오는데 여기서 boot 카테고리를 선택하면 된다. 이곳에서 내가 넣은 USB를 맨 상단으로 올려서 &lt;strong&gt;(Shift 와 +/-로 조작)&lt;/strong&gt; 저장하면 된다. (나 같은 경우엔 USB SandDisk ~~ 로 되어 있었다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144415703-e0a7fe47-ece8-4c39-8095-932815fc1b6a.PNG&quot; alt=&quot;MAIN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후에 좀 기다리면 첫번째 ubuntu를 선택해서 들어가면 된다. 그럼 아래와 같은 화면이 나오게 되고 여기서 Try Ubuntu를 눌러주면 된다. try ubuntu는 설치없이 맛보기(?) 할 수 있는? 그런 역할인 듯 하다. 우분투가 이미 
설치되어 있기 때문에 이곳에서 기존에 설치된 우분투의 파티션 크기를 조정할 수 있었다.  &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144416453-1cbc65f9-ff93-49d0-9817-62f7273bcfe3.PNG&quot; alt=&quot;우분투&quot; /&gt;&lt;/p&gt;

&lt;p&gt;메뉴에 들어가서 &lt;strong&gt;GParted&lt;/strong&gt; 를 누른다. 이곳에서 우분투의 용량을 변경할 수 있다. (항상 우분투 용량 부족에 시달렸던 나로써는 좋은 기회였다 ^^) &lt;br /&gt;
아래의 블로그를 보면서 디스크 공간을 추가해주었다. 용량 부족일수도 있겠다는 생각을 했기에 용량을 5기가 정도 늘려주었다. (실제로 확인해보니 우분투에 남은 용량이 2%였다)    &lt;br /&gt;
&lt;a href=&quot;https://velog.io/@tkdfo93/ubuntu-20.04-issues-%EB%A9%80%ED%8B%B0%EB%B6%80%ED%8C%85-%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90-%EB%94%94%EC%8A%A4%ED%81%AC-%EA%B3%B5%EA%B0%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0&quot;&gt;우분투에 디스크 공간 추가하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;시간은 한 10분 내외로 걸린듯 했다. 제발 해결이 되었기를 기도하며 다시 우분투로 접속해보았다. 그리고 결과는.. 변함없었다… :(&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2-msr의-문제-&quot;&gt;2. MSR의 문제 ..?&lt;/h3&gt;

&lt;p&gt;용량의 문제가 아니였다.. 이때 내 눈에 보인건 GParted라는 곳에서 파티션에 할당되어 있는 것 중 Microsoft reserved partition에 빨간색 !가 떠있는 부분이였다.
관련 에러부분을 구글링 해보니 &lt;a href=&quot;https://askubuntu.com/questions/1304630/how-do-a-resolve-the-error-where-microsoft-reserved-partition-isnt-detected&quot;&gt;비슷한 에러 관련 질문&lt;/a&gt;을 한 글이 있었고 이때부터 MSR에 꽂혀서 
이부분을 찾아보기 시작했다.&lt;/p&gt;

&lt;p&gt;몇시간 구글링 끝에 나온 결론은 &lt;code class=&quot;highlighter-rouge&quot;&gt;1. MSR은 우분투와 전혀 상관이 없다.&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;2. MSR은 윈도우가 설치될 때 만들어지는 예약된 파티션으로 사용자 데이터를 저장할 수 없다.&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;3. 우분투에서 해당 파티션을 지우면 윈도우에 접속할 수 없다.&lt;/code&gt; 즉 이부분에 빨간색 !가 뜨는건 그냥 무시하면 되는 듯 했다..&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-boot-repair&quot;&gt;3. boot-repair&lt;/h3&gt;
&lt;p&gt;이 명령어는 리눅스의 부트로더인 grud가 날라갔을때 (윈도우 업데이트시 내가 겪은 상황이다) USB로 부팅 후 이곳 터미널에서 
해당 명령어를 입력해 grud를 복구하는 방법이다. 일단 이것도 시도해볼 가치는 있다고 생각했다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:yannubuntu/boot-repair

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install boot-repair

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;boot-repair
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이후 추천 복구 방식(Recommended Repair)을 선택해서 grud를 복구시켜준다. 이 과정에서 우분투에 저장용량이 부족할때 잘못하면 또다른 문제를 발생시킬 수 있다.
이점을 주의해야 했다.. 다행히 복구는 성공적으로 시켜졌고 다시 우분투를 실행 시켜보았다. (이때부터 두손으로 기도를 드린것 같다..)  &lt;br /&gt;
하지만 결과는 실패였다… 아놔…&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;4-recovery-mode-접속하기&quot;&gt;4. Recovery Mode 접속하기&lt;/h3&gt;

&lt;p&gt;이제 방법은 정말 삭제후 재설치 방법 밖에 없는 것인가… 반나절을 찾다가 검은 화면에 뜬 내용을 중심으로 구글링 해보기로 했다. 
그 결과 &lt;a href=&quot;https://yskim0.github.io/troubleshooting/2021/01/26/Ubuntu-clean-files-blocks-trouble/&quot;&gt;Ubuntu 18.04 clean, &lt;strong&gt;&lt;em&gt;/&lt;/em&gt;&lt;/strong&gt; files, &lt;strong&gt;&lt;em&gt;/&lt;/em&gt;&lt;/strong&gt; blocks 문제해결&lt;/a&gt; 이 블로그를
찾게 되었고 해결할 수 있게 되었다… 😂😂😂&lt;/p&gt;

&lt;p&gt;진짜 너무너무 고마운 분이였다.. grud에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Advanced options for Ubuntu&lt;/code&gt;로 들어가 두번째 recovery mode를 눌러주었다. 그리고 그 뒤부터는 똑같이 root를 선택해 아래의
명령어를 입력했다&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get purge nvidia&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이때 블로그분과 같은 에러는 뜨지 않았지만 autoremove를 입력하라는 문구가 나왔다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 꽤 많은 패키지가 삭제가 되었다(한 60개정도..?) 그리고 나서 다시 맨 위의 명령어를 입력했다.&lt;br /&gt;
이후 &lt;strong&gt;reboot&lt;/strong&gt; 로 재부팅 해주었고 그 결과 !! 너무나도 보고싶었던 보라색 화면이 뜨게 되었다.. 진짜 
기뻐서 손을 번쩍 들어올렸다 ㅋㅋㅋㅋ (카페였다.. ^^)&lt;/p&gt;

&lt;p&gt;나에게는 너무나도 힘든 순간이였고 또 같은 에러가 발생했을때를 대비해서 빠르게 블로그를 찾게되었다..ㅋㅋㅋㅋ &lt;br /&gt;
일단 저 글을 써준 블로거님에게 너무너무 감사했다.. 하트라도 누르고 싶었지만 누르는 곳이 없었다.. :)&lt;/p&gt;

&lt;p&gt;과거에 부팅 USB를 만들어놓고 잘 보관해놓은 내자신도 칭찬해주고 싶다 ^^  다른 누군가에게도 도움이 되길 바라며…&lt;/p&gt;</content><author><name>jung</name></author><category term="linux" /><summary type="html"></summary></entry><entry><title type="html">나의 첫번째 면접 후기</title><link href="https://heejung-gjt.github.io/interview1" rel="alternate" type="text/html" title="나의 첫번째 면접 후기" /><published>2021-11-17T11:00:00+09:00</published><updated>2021-11-17T11:00:00+09:00</updated><id>https://heejung-gjt.github.io/interview1</id><content type="html" xml:base="https://heejung-gjt.github.io/interview1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;10개의 서류 중 감사하게도 1개의 서류에 붙게 되었고 목요일에 첫 면접을 보았다. 처음엔 자격요건이 맞아서 지원을 했지만 그 기업의 블로그를
 보게 되면서 생각이 달라졌다. 개발자가 팀으로써 어떤 방향으로 나아가고 있는지 어떠한 생각과 가치관을 지니고 있는지 목표와 계획을 가지고 있는 기업인것 같았다.
  그래서인지 욕심이 났고 그곳에서 성장하고 싶다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;우선 해당 기업의 채용 프로세스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;서류전형&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;1차 직무 인터뷰 및 라이브 코딩 테스트&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;2차 컬쳐핏 인터뷰&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;합격&lt;/code&gt; &lt;br /&gt;
이렇게 총 2번의 면접으로 이루어져 있다. 라이브 코딩이 굉장히 부담스러웠지만 간단한 알고리즘 테스트라는 말을 듣고 자신감을 가지고 도전을 해보기로 했다.(그래도 나름 꾸준히 알고리즘 공부를 해왔다고 생각한 나였다 😅)&lt;/p&gt;

&lt;p&gt;오후 4시에 내 생애 첫 면접을 보게 되었다. 1분 자기소개를 굉장히 열심히 썼고 열심히 외웠다고 생각했다.. 그리고 생각보다 긴장이 많이 되지 않았다고 생각했다.. 전부 나의 생각이였을 뿐이다
“준비하신 자기소개 있으면 해주세요” CTO님의 말을 듣고 자기소개를 시작했고 당연하게도 머릿속에 아무런 생각이 나지 않았다.. ^^ &lt;br /&gt;
준비한 말을 모두 하지 못하고 급하게 마무리를 지었다. 두분의 면접관님이 너무 긴장한 것 같다며 편하게 얘기해달라고 얘기해주셨지만 이미 나는 자기소개를 
망하게 되버렸다..&lt;/p&gt;

&lt;p&gt;이후에는 내가 진행한 프로젝트에 대해 물어보았고 내 대답을 바탕으로 기본적인 CS지식이라던지 기술적인 질문을 하셨다. 굉장히 기본적인 질문들이였고 열심히 공부했던 
내용들이였다. 근데 대부분을 제대로 답하지 못하였다. 긴장을 해서라기 보다는 까먹은 느낌이 컸다.&lt;/p&gt;

&lt;p&gt;다시 한번 보고 면접에 임했어야 했는데.. 그러지 못했다. 30분 정도 질문이 오갔고 
이후 라이브 코딩을 보게 되었다. 문제는 쉬웠다. 보고 바로 풀 수 있을 정도였다. 문제는 그 문제의 시간복잡도를 줄여야 된다는것. 
이분탐색을 적용시키면 되는 문제였지만 그렇게 접근하지 못했다…(할 수 있었는데.. 아니다 그정도 시간을 줬는데 못하면 못한거다.. :-))&lt;/p&gt;

&lt;p&gt;CTO님이 시간을 더 줘도 풀 수 없다고 판단했는지 면접을 마무리 했다. 하하.. 그래도 열심히 내 이야기를 경청해줬다는거에 굉장히 감사했다&lt;/p&gt;

&lt;p&gt;면접이 끝난후 돌아오는 길에 알고리즘 문제가 계속 머릿속을 맴돌았다.. 그 문제만 풀었어도 붙었을것 같은데.. 라는 살짝 양심이 조금 없는 생각을 했다 ㅎㅎ&lt;/p&gt;

&lt;p&gt;결과는 7일이내에 나온다고 했지만 이틀뒤인 오늘 결과가 나오게 되었고 예상은 했지만 &lt;strong&gt;탈락&lt;/strong&gt; 이였다. 어느 정도 예상은 하고 있어서 타격감은 생각보다 없었다. (근 이틀동안
아무것도 하지 못할 정도로 계속해서 면접을 되풀이 하면서 어느정도 단련이 되었나보다..^^)&lt;/p&gt;

&lt;p&gt;근데 아주 감사하게도 백엔드 팀에서 피드백을 남겨주셨다.&lt;/p&gt;

&lt;p&gt;남겨준 피드백은 아래와 같았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부 코스 수강, 나만의 사이드 프로젝트를 진행하는 점에서 크게 성장할 개발자 분이 될 것 같다&lt;/li&gt;
  &lt;li&gt;커뮤니케이션을 신경 쓰는 모습이 같이 일하는 동료들에게 즐거움을 주실 분이 될 것 같다&lt;/li&gt;
  &lt;li&gt;리팩토링, 테스트 코드 작성을 고려하는 모습이 코드 퀄리티를 높이기 위해 끊임없이 코드를 개선하는 분인 것 같다&lt;/li&gt;
  &lt;li&gt;좀 더 스스로 긴장을 완화할 수 있는 방법을 찾았으면 한다&lt;/li&gt;
  &lt;li&gt;코딩 테스트에 대한 연습이 필요해 보인다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;물론 부족한 점은 더 많다고 생각한다. 하지만 나의 첫면접에서 이렇게 소중한 피드백을 남겨주니 굉장히 감사했고 더 열심히 준비해야 겠다는 생각이 들었다.
탈락했고 결국 해당 기업은 가지 못했지만 정말 소중한 경험이 된 것 같다&lt;/p&gt;</content><author><name>jung</name></author><category term="interview" /><summary type="html"></summary></entry><entry><title type="html">백엔드 프리온보딩 2주차 두번째 프로젝트 회고</title><link href="https://heejung-gjt.github.io/project4" rel="alternate" type="text/html" title="백엔드 프리온보딩 2주차 두번째 프로젝트 회고" /><published>2021-11-14T15:00:00+09:00</published><updated>2021-11-14T15:00:00+09:00</updated><id>https://heejung-gjt.github.io/project4</id><content type="html" xml:base="https://heejung-gjt.github.io/project4">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-2주차-8퍼센트-기업과제&quot;&gt;원티드 2주차 8퍼센트 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.10 ~ 21.11.12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;거래내역 조회 API&lt;/li&gt;
  &lt;li&gt;입금 API&lt;/li&gt;
  &lt;li&gt;출금 API&lt;/li&gt;
  &lt;li&gt;계좌의 잔액을 별도로 관리해야 하며, 계좌의 잔액과 거래내역의 잔액의 무결성이 보장&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;입금 API 구현&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;EC2 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;gunicorn을 이용한 서버 배포&lt;/li&gt;
  &lt;li&gt;트랜잭션 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;8퍼센트가 p2p서비스를 제공하는 금융기업이라 그런지 돈에 관련된 API를 구현해야 했다. 여기서 내가 맡은 기능은 입금 API였다. 지금까지 했던 API에 비해서는 나한테 좀 새로웠다. 그러면서 트랜잭션 기능을 새롭게 알게 되었다.&lt;/p&gt;

&lt;p&gt;모델링 설계시 우리 팀은 user의 테이블과 각 user의 deposit정보를 가지고 있는 테이블을 1:1로 묶어서 user가 소유한 금액, 은행, 계좌번호등을 넣어주었다. 
이후 유저가 입출금을 할 시에 transactions라는 테이블이 새롭게 create되면서 유저가 입/출금한 시간, 금액, 거래 후 잔액등이 새롭게 갱신될 수 있게 처리했다.&lt;/p&gt;

&lt;p&gt;이번에는 로직을 작성전에 필수적으로 필요한 에러처리와 조건처리에 대해 먼저 생각해보았다. 입금 기능을 구현하기 위해서는 아래의 확인이 필수로 필요했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;계좌의 소유주만 요청 가능해야 한다&lt;/li&gt;
  &lt;li&gt;잔액의 무결성이 보장되어야 한다&lt;/li&gt;
  &lt;li&gt;잔액의 타입이 integer외의 것일 경우 에러를 반환한다&lt;/li&gt;
  &lt;li&gt;입금하려는 금액이 0보다 작으면 에러를 반환한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 중에서 가장 중요한것은 잔액의 무결성인 듯 했다. 찾아보니 장고에서 제공해주는 트랜잭션 기능이 있었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;@transaction.atomic&lt;/code&gt; 이라는 데코레이터를 
붙여 아주 간단하게 무결성에 대한 보장을 처리해줄 수 있었다. 이중에서 나는 입금 전체의 메소드가 아닌 일부분만 트랜잭션으로 묶어주기 위해
with명령어를 이용해서 트랜잭션을 사용했다&lt;/p&gt;

&lt;p&gt;당연히 잔액의 변경과 새로운 거래 테이블이 생성될 때 중간에 다른 예외가 발생해서 에러가 나면 변경이나 create가
되면 안되는 상황이다. 그렇기 때문에 transaction.atomic()을 붙여 무결성을 보장시켜주었다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;type_id&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEPOSIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;information&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amounts&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 팀원들과의 회의에서 integer타입이 아닌 경우 에러를 반환해주는 방향이 좀 더 자연스러울 것 같다는 의견이 있었다. 
소수점으로 금액을 보내는 경우가 흔하지 않다고 판단했고 정수 타입일 경우만 입/출금이 될 수 있게 코드를 추가해주었다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INVALID_INPUT_FORMAT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;gunicorn을-이용한-ec2-서버-배포&quot;&gt;gunicorn을 이용한 EC2 서버 배포&lt;/h4&gt;
&lt;p&gt;장고로 풀스택 프로젝트를 진행했을 당시 uwsgi를 사용했었다. 또한 css등 정적인 파일도 배포하기 위해 nginx도 설치해 사용했다.
이번에 배포를 진행하면서 신기했던건 단순히 서버 배포를 하는 것은 굉장히 간단하다는 것이였다. 감사하게도 gunicorn으로 ec2배포하는 글을 포스팅한 팀원이 있었다. 
해당 팀원의 글을 보며 배포를 진행했고 서버 배포가 생각보다 간단해서 즐거웠다 ^^&lt;/p&gt;

&lt;p&gt;굳이 서비스 등록을 하지 않아도 nohup이라는 명령어로 서버를 실행 시킬 수 있었다.
아래 명령어 한줄이면 서버가 자동으로 실행된다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup gunicorn &lt;span class=&quot;nt&quot;&gt;--bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0:8000 app_name.wsgi &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;시간이 좀 더 날때 gunicorn에 대해 더 자세하게 알아보고 싶다. 서비스 등록을 한 것과 무슨 차이가 있는 걸까 단순히 서비스 등록을 하면
서버를 실행시키는 명령어가 짧아지는게 좋은걸까 ? 이부분은 더 알아봐야 할 것 같다. (그래도 단순하게 서버를 실행시킬수 있는 방법을 알려준 팀원에게 너무 감사했다 ㅠㅠ)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/142335744-7dcf629a-1a28-40e9-8eb8-d9d74fffd631.jpg&quot; width=&quot;550&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 시작한지 2주차.. ! 4번째 과제에 드디어 !! 밤 12시를 넘기지 않고 정확히 11시58분에 프로젝트를 완성했다.. 😂 진짜 짜릿해.. 최고야…  한동안 밤을 새다가 금요일에 밤에 이렇게 완벽하게 마무리되다니.. 이래서 사람들 개발하나..? 크크크&lt;/p&gt;

&lt;p&gt;확실히 이번 프로젝트를 하면서 rebase사용에도 익숙해지고 컨벤션 따르는 것도 익숙해졌다. 무엇보다 내 스스로 rebase를 사용해 로직을 수정할 수 있다는 것 !
rebase 도중에 충돌을 해결 할 수 있다는 것 ! 하하하&lt;/p&gt;

&lt;p&gt;무엇보다 모든 팀원이 열심히 하는 모습을 보면서 동시에 시너지를 얻게 되었다. 특히 새벽에 몇몇의 팀원들과 줌을 통해 이해가 가지 않았던 모델링 설계에 대해서
 함께 의논했던 시간이 기억난다. 모른체로 그냥 넘어가는게 아니라 이해하기 위해서 함께 노력하는 모습이 아름다웠달까.. ㅎㅎ 그 새벽에 열정적으로 토론에 임하는 팀원들의 모습에서 배울점이 참 많았다.&lt;/p&gt;

&lt;p&gt;아침형 인간으로써 새벽에 거의 깨어있지 못했던 나로써는 프로젝트를 시작하게 되면서 새벽은 물론 밤을 꼴딱 새는 내 자신의 한계와 부딪히는 경험도 하게 되었다. 함께 했을때 한계를 뛰어넘는 내 자신을 보며 신기했다. 
놀때도 밤을 못새는 나였는데.. 아주 칭찬한다 내자신아&lt;/p&gt;

&lt;p&gt;12시를 넘기지 않았다는 이 쾌감은 잊혀지지가 않는다.. 끝난뒤에 먹는 치맥이라.. 알 사람은 알거다 🥴&lt;/p&gt;</content><author><name>jung</name></author><category term="project" /><category term="8퍼센트" /><category term="wecode" /><category term="wanted" /><summary type="html"></summary></entry><entry><title type="html">(git) rebase와 squash(작성중)</title><link href="https://heejung-gjt.github.io/git3" rel="alternate" type="text/html" title="(git) rebase와 squash(작성중)" /><published>2021-11-13T14:00:00+09:00</published><updated>2021-11-13T14:00:00+09:00</updated><id>https://heejung-gjt.github.io/git3</id><content type="html" xml:base="https://heejung-gjt.github.io/git3">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;git 강좌 순서 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./git-01&quot;&gt;git(1) - Git Tutorial&lt;/a&gt;&lt;/li&gt;--&gt;

&lt;!--&lt;/ul&gt;--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rebase란&quot;&gt;rebase란&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;squash란&quot;&gt;squash란&lt;/h2&gt;</content><author><name>jung</name></author><category term="git" /><summary type="html"></summary></entry></feed>