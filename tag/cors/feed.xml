<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/tag/cors/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2021-12-08T18:06:32+09:00</updated>
  <id>https://heejung-gjt.github.io/tag/cors/feed.xml</id>

  
  
  

  
    <title type="html">studying developer | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">SOP와 CORS란</title>
      <link href="https://heejung-gjt.github.io/cors1" rel="alternate" type="text/html" title="SOP와 CORS란" />
      <published>2021-10-27T14:30:00+09:00</published>
      <updated>2021-10-27T14:30:00+09:00</updated>
      <id>https://heejung-gjt.github.io/cors1</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/cors1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sopsame-origin-policy-동일-출처-정책란&quot;&gt;SOP(Same Origin Policy, 동일 출처 정책)란&lt;/h2&gt;
&lt;p&gt;다른 출처의 리소스를 사용하는 것을 제한하는 보안 방식이다. 다시말해 출처가 동일해야 리소스에 대한 상호작용이 가능하다   &lt;br /&gt;
예를 들어보자. https://example1.com에서 https://example2.com에게 필요한 리소스를 요청할때 example2에서 요청을 한 곳의 출처를 확인한다. 
SOP에 위반하기 때문에 요청을 반환한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;출처란 &lt;br /&gt;
출처는 URL의 Protocol, Host, Port를 통해 같은 출처인지 다른 출처인지 판단한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;url-구조&quot;&gt;url 구조&lt;/h3&gt;
&lt;p&gt;출처를 판단하기 위해서는 url를 살펴봐야 한다. 3가지를 보고 출처를 판단하게 되는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;1. protocol&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2. host(도메인)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;3. port(생략가능)&lt;/code&gt; 이렇게 3가지를 보고 판단한다.&lt;/p&gt;

&lt;p&gt;3개중에 하나라도 다르다면 SOP에 위반하여 요청이 반환된다. 그렇다면 위에서는 host 즉 도메인이 달라 다른 출처로 판단이 내려져 요청이 반환된 것을 알것이다. &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/139057285-5a348d9d-8b68-4f54-80c3-19dec0a5dfcb.PNG&quot; width=&quot;500&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(IE는 SOP에 포트를 포함하지 않기 때문에 포트가 달라도 같은 출처로 인식될 수 있다)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;corscross-origin-resource-sharing-교차-출처-리소스-공유란&quot;&gt;CORS(Cross Origin Resource Sharing, 교차 출처 리소스 공유)란&lt;/h2&gt;
&lt;p&gt;그렇다면 다른 출처의 리소스가 필요하다면 어떻게 해야할까 ? 교차 출처의 접근을 허용하는 CORS를 사용해야 한다. CORS는
어떤 출처의 리소스에 다른 출처가 접근할 수 있도록 한다.  즉 https://example1.com에서 https://example2.com에게 필요한 리소스를 요청하여 요청을 받을 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cors-동작-원리&quot;&gt;CORS 동작 원리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;브라우저가 리소스를 서버에 요청할때 요청 헤더에 정보(자신의 출처, 요청할 메소드)를 담아 전송한다.&lt;/li&gt;
  &lt;li&gt;서버에서는 응답 헤더에 &lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt; 이라는 값을 담아서 응답한다.&lt;/li&gt;
  &lt;li&gt;브라우저에서는 서버가 보낸 헤더를 보고 자신이 보낸 요청의 출처와 서버가 보낸 응답의 &lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt; 을 비교한 후 요청이 가능하면 리소스 전송을 허용하고 아니라면 에러를 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cors의 동작 방식은 단순요청 방식과 예비요청 방식 2가지가 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;simple request (단순 요청)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;단순 요청은 서버에 API를 요청하고 서버는 Access-Control-Allow-Origin을 헤더에 포함하여 응답한다. 브라우저는 Access-Control-Allow-Origin 헤더를 확인해서 CORS 동작을 수행할지 판단한다&lt;/p&gt;

  &lt;p&gt;서버에게 바로 요청을 보내는 방법으로 &lt;strong&gt;3가지의 조건이 모두 만족되는 경우&lt;/strong&gt; 사전 요청없이 요청을 보낼 수 있다&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;GET/HEAD/POST 중 한가지 메소드를 사용해야 한다&lt;/li&gt;
    &lt;li&gt;Accept, Accept-Language, Content-Language, Content-Type, DPR, Downlink, Save-Data, Viewport-Width, Width를 제외한 헤더를 사용하면 안된다&lt;/li&gt;
    &lt;li&gt;application/x-www-form-urlencoded, multipart/form-data, text/plain 중에서만 Content type을 지정해야 한다&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;(대부분 3가지를 전부 지킬 수 없다. API로 데이터를 전송시 주로 application/json을 사용한다)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/139077082-a12f09c9-3bff-433b-9add-7d01ef0c0d8d.PNG&quot; alt=&quot;SIMPLE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;preflight request(예비 요청)&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;예비요청은 서버에 예비요청을 보내서 안전한지 판단 한 후 요청을 보낸다. 실제 리소스를 요청하기 전에 &lt;strong&gt;OPTIONS&lt;/strong&gt; 라는 메소드를 통해 실제 요청을 전송할지를 판단한다&lt;/p&gt;

  &lt;p&gt;서버에서는 이 요청에 대한 응답으로 &lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt; 헤더를 포함한 응답을 브라우저에 보낸다.&lt;/p&gt;

  &lt;p&gt;브라우저에서는 &lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt; 헤더를 확인하여 CORS 동작을 수행할지를 판단한다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/139076856-d824c1ad-7801-4739-8a78-3765a4377e5e.PNG&quot; alt=&quot;PREFLIGHT&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이때 서버등의 헤더에 리소스에 대한 접근을 허락하는 내용이 없으면 cors 문제가 발생한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;django에서-cors-해결&quot;&gt;django에서 cors 해결&lt;/h2&gt;

&lt;p&gt;장고에서는 관련 패키지를 설치해 보다 쉽게 cors를 설정할 수 있다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;우선 패키지를 설치한다&lt;/strong&gt;    &lt;br /&gt;
cors에 필요한 서버의 헤더를 조작하기 위한 패키지이다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'corsheaders'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;settings에서 cors관련 설정을 추가한다&lt;/strong&gt;    &lt;br /&gt;
서버의 응답에 cors 헤더를 추가하기 위해서 corsheaders를 installed apps목록에 추가한다. &lt;br /&gt;
middlewqre class도 추가한다. 이때 가장 높게 위치시켜야 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'corsheaders'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MIDDLEWARE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'corsheaders.middleware.CorsMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;settings에서 CORS_ORIGIN_WHITELIST는 cross site요청을 허용하는 호스트들을 직접 추가할 수 있다&lt;/strong&gt;  &lt;br /&gt;
모든 호스트를 허용하고 싶다면 CORS_ORIGIN_ALLOW_ALL을 True로 설정하면 된다. 이렇게 된다면 모든 출처에서의 요청이 허용된다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CORS_ORIGIN_ALLOW_ALL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CORS_ORIGIN_WHITELIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;허용하려는&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOST&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Access to fetch at 'http://127.0.0.1:8000/' from origin 'http://127.0.0.1:5501' has been blocked by CORS policy: Request header field authorization is not allowed by Access-Control-Allow-Headers in preflight response.&lt;/code&gt; 에러가 발생하는 이유는 ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A.&lt;/strong&gt; 장고에 세팅즈 CORS_ALLOW_HEADERS에 request header에 담긴 데이터의 값을 똑같이 넣어주어야 한다. 나는 이거때문에 하루를 까먹었다….
에러 메시지를 읽어보면 충분히 예측할 수 있는 문제였는데… 영어 공부 해야겠다 진짜…&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Q.&lt;/strong&gt; ajax로 쿼리스트링으로 데이터를 담아 get요청을 보낼때 위의 방식대로 설정을 했지만 cors관련 에러가 발생했었다. 아래 2개의 url 차이가 뭐길래 cors에러가 나는걸까..&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:8000/post?id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;c&quot;&gt;# cors 관련 에러 발생&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://127.0.0.1:8000/post?id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3&amp;amp; &lt;span class=&quot;c&quot;&gt;# 정상 작동&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="cors" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
