<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/tag/wecode/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2022-01-08T20:06:05+09:00</updated>
  <id>https://heejung-gjt.github.io/tag/wecode/feed.xml</id>

  
  
  

  
    <title type="html">studying developer | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">백엔드 프리온보딩 4주차 첫번째 프로젝트 회고</title>
      <link href="https://heejung-gjt.github.io/project6" rel="alternate" type="text/html" title="백엔드 프리온보딩 4주차 첫번째 프로젝트 회고" />
      <published>2021-11-27T15:00:00+09:00</published>
      <updated>2021-11-27T15:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project6</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project6">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-4주차-카닥-기업과제&quot;&gt;원티드 4주차 카닥 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.23 ~ 21.11.26&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;사용자 생성 API(회원가입/로그인)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 소유한 타이어 정보를 저장하는 API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 소유한 타이어 정보 조회 API&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사용자 생성 API(회원가입/로그인)&lt;/li&gt;
  &lt;li&gt;사용자가 소유한 타이어 정보를 저장하는 API&lt;/li&gt;
  &lt;li&gt;사용자가 소유한 타이어 정보 조회 API&lt;/li&gt;
  &lt;li&gt;Unit Test 코드 작성&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;EC2 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;프리온보딩의 마지막 프로젝트였다. 벌써 시간이 이렇게 지났다니.. 😥 이번 프로젝트는 카닥이라는 기업의 과제였다. 개인 과제로 프로젝트를 마무리 하게 되었다  &lt;br /&gt;
카닥에서는 타이어 정보 API를 제공해주었고 이 API에서 제공해주는 데이터를 가지고 타이어의 정보를 데이터베이스에 저장해야 하는 과제였다. 이 부분만 제외하면 지금까지 해왔던 과제들과 
크게 다르지 않을 것 같았다.&lt;/p&gt;

&lt;p&gt;역시나 시작은 모델링 설계,, 항상 팀원들과 함께 진행하다 혼자 하려니 허전했다.. ㅎㅎㅎ 주어진 타이어 정보 API에는 자동차에 대한
정보들이 굉장히 세세하게 나와있었다. 어디까지 저장하라는 조건이 없었기에 스스로 생각해서 데이터 정보를 어디까지 저장할지 결정해야 했다.&lt;/p&gt;

&lt;p&gt;나는 해당과제는 유저가 소유한 자동차의 타이어 정보를 저장하고 조회하는 과제인만큼 타이어 정보에 초점을 맞추기로 했다.&lt;/p&gt;

&lt;h3 id=&quot;requests의-사용&quot;&gt;requests의 사용&lt;/h3&gt;

&lt;p&gt;타이어 정보를 저장하는 body request는 아래와 같이 최대 5명의 유저들의 정보에 대한 요청을 할 수 있다. trimId가 https://dev.mycar.cardoc.co.kr/v1/trim/{id} 의 url에 파라미터로 담겨
 해당되는 자동차의 정보가 출력된다. 이때 필요한 데이터를 가져오기 위해서 requests를 사용했다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;trimId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12000&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;과제 조건에 써져있는 것처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;spec → driving → frontTire/rearTire -&amp;gt; 타이어 정보&lt;/code&gt; frontTire와 rearTire의 값인 value를 
{폭}/{편평비}R{18}의 포맷에 맞게 각각 나누어 폭, 편평비, 휠사이즈로 각각 데이터베이스에 저장해주어야 했다&lt;/p&gt;

&lt;p&gt;즉 자동차마다 각각의 자동차 스팩을 가지고 있었고 스팩 중 하나가 자동차 타이어에 대한 정보였다. 그래서 나는 자동차의 기본정보를 가지고 있는 테이블과 자동차의 스펙을 스펙 테이블로 나누어 1:1로 연결해주었다.
그리고 스펙 테이블에서는 타이어의 스펙이 같은 자동차가 존재할거라고 생각했기 때문에 타이어 테이블과 스펙 테이블을 1:n으로 연결시켜주었다.&lt;/p&gt;

&lt;p&gt;설계 과정에서 가장 고민이였던게 바로 타이어가 앞/뒤 타이어로 정보가 나뉘는데 각각의 테이블로 나누어 저장할지 하나의 타이어 테이블을 만들어 저장할지 고민이였다. 
고민 끝에 해당 과제는 타이어의 정보가 중요했기에 앞 타이어와 뒤 타이어에 대한 테이블을 나누어 설계하기로 결정했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;requests이용한 타이어 정보 가져오기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://dev.mycar.cardoc.co.kr/v1/trim/{trim_id}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;front_tire&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[P/R]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driving&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;frontTire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rear_tire&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[P/R]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;driving&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rearTire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;info_dic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;trim_id&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trim_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;car_brand&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;brandName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;year_type&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yearType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;car_name&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submodelGroupName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;front_tire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front_tire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;rear_tire&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rear_tire&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;타이어 정보를 가져올때 과제에 정해진 타이어 정보 포맷이 있었다. 포맷이 지켜지지 않으면 데이터베이스에 저장할 수 없었다. 그래서 
정규표현식을 이용해 정해진 포맷이 아닐 경우 빈 리스트를 가져오게 구현했다. 그리고 빈 리스트일 경우 except문으로 빠져나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsaved_tire_list.append(data[&quot;id&quot;])&lt;/code&gt; 의 로직으로 인해
저장되지 않은 리스트에 해당 유저가 담긴다&lt;/p&gt;

&lt;p&gt;view에서 for문을 돌면서 중간에 에러가 나도 그 다음부터는 정상적으로 저장되게 구현하고 싶었기 때문에 에러가 난 유저의 자동차 정보부터 스펙 정보 ~ 타이어 정보까지 전부 저장되지 않게 구현했다 (여기서 원자성을 고려했다 !)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;벌써 마지막 프로젝트라니 .. 할 때는 너무 힘들었는데 마지막이라고 하니까 뭔가 아쉽다.. 처음 만난 팀원들과 첫 날부터 쉬지 않고 지금까지 함께 달려왔고 완주했다는 것에 만족스럽다. 다들 열심히 하는 모습에 자극도 많이 받고 배운점도 너무 많은 것 같다.. :-) 무엇보다 함께하니 절대 못할 것 같은 것도 해내게 되는 과정이 나름 짜릿하다.. 물론 초반에는 밤도 밥 먹듯이 새고.. (진짜 아예 새버렸다.. 저녁 8시에 시작했는데 다음날 7시 넘어서 끝났다.. 😂😂😂)&lt;/p&gt;

&lt;p&gt;그럼에도 누구하나 포기하지 않고 탓하지 않고 열심히 하려는 팀원들에게 고마웠다. 물론 어려웠던 상황도 꽤 있었지만 우리만의 나름의 소통(?)을 통해서 자기자신을 다시 바라보고 고치려고 하는 모습과 배려하려는 모습이 보였기 때문에 
웃으며 이겨낼 수 있었다. ^^&lt;/p&gt;

&lt;p&gt;왜 협업이 중요한지에 대해 말하는건 입이 아플 정도다. 혼자서 잘한다고 절대 멋진 결과물을 만들어 낼 수 없다.. 적극적인 커뮤니케이션이 우리 팀이 처음부터 끝까지 포기하지 않고 다함께 프로젝트를 마무리 할 수 있었던 이유였던 것 같다&lt;/p&gt;

&lt;p&gt;난 덕분에 git rebase와 squash에 익숙해질 수 있었다.. :-) 그리고 적극적인 코드리뷰 덕분에 코드를 바라보는 시각을 넓힐 수 있었다.. (코드리뷰 시간만큼은 마치 사수와 함께하는 기분이 들었다..^-^)&lt;/p&gt;

&lt;p&gt;열심히 해준 팀원들도 고마웠고 나 자신 또한 자랑스러웠다 후후&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="Cardoc" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 3주차 두번째 프로젝트 회고</title>
      <link href="https://heejung-gjt.github.io/project5" rel="alternate" type="text/html" title="백엔드 프리온보딩 3주차 두번째 프로젝트 회고" />
      <published>2021-11-22T15:00:00+09:00</published>
      <updated>2021-11-22T15:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project5</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project5">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-3주차-디어코퍼레이션-기업과제&quot;&gt;원티드 3주차 디어코퍼레이션 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.18 ~ 21.11.21&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;유저 Auth&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;회원가입 API&lt;/li&gt;
      &lt;li&gt;로그인 API&lt;/li&gt;
      &lt;li&gt;할인 / 벌금 CRUD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;할인 조건 추가 API&lt;/li&gt;
  &lt;li&gt;벌금 조건 추가 API&lt;/li&gt;
  &lt;li&gt;할인 조건 변경 API&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;벌금 조건 변경 API&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;킥보드 대여 및 반납
    &lt;ul&gt;
      &lt;li&gt;킥보드 대여 API&lt;/li&gt;
      &lt;li&gt;킥보드 반납 요금 정책에 따른 요금 계산 API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;위치 정보 CRUD
    &lt;ul&gt;
      &lt;li&gt;서비스 지역 생성 API&lt;/li&gt;
      &lt;li&gt;지역에 추가되는 할인 / 벌금 추가 API&lt;/li&gt;
      &lt;li&gt;지역에 추가되는 할인 / 벌금 삭제 API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;할인/벌금 추가 API&lt;/li&gt;
  &lt;li&gt;지역에 추가되는 할인/벌금 추가 API&lt;/li&gt;
  &lt;li&gt;Unit Test 코드 작성&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;EC2 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;개인적으로 지금까지 진행했던 프로젝트 중에 가장 쉽지 않은 과제였던 것 같다. 서비스 지역마다 할인/벌금/주차구역 등 적용해야 하는 
조건이 달랐기 때문에 어떻게 이 조건들을 지역에 맞게 적용시켜야 하는지 처음에는 감도 잘 오지 않았다. 과제가 주어지고 이후 팀원들과 가장 오랜시간동안 
회의를 진행했었다.&lt;/p&gt;

&lt;p&gt;다행히 과제 기한이 다른 과제보다는 길었기 때문에 시간적 압박은 덜했다. :-)
첫번째 회의에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;지역의 위도와 경도는 어떻게 얻을것인가&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;모델링 설계는 어떻게 진행해야 하는가&lt;/code&gt; 이 2가지를 중심으로 
진행했다. 다행히 모델링 설계는 과제 조건에 기본적으로 나와 있어서 이를 토대로 설계를 진행했다.&lt;/p&gt;

&lt;p&gt;사용자가 이용하는 킥보드 모델, 킥보드 모델, 서비스 지역 모델, 피킹존 모델, 반납금지 구역 모델이 기본적으로 나와있었기 때문에 아래를 토대로 
모델링 설계를 진행했다.&lt;/p&gt;

&lt;h4 id=&quot;모델링-설계&quot;&gt;[모델링 설계]&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;킥보드가 사용 될 때마다 usages 즉 킥보드 사용 내역에 정보가 저장된다 (1:N 관계)&lt;/li&gt;
  &lt;li&gt;킥보드는 여러 서비스 지역에서 사용된다 (1:N관계)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; vehicle 모델 (사용자가 이용하는 킥보드 모델)

deer_name (킥보드의 이름으로 고유한 값)
deer_area_id (킥보드가 현재 위치한 지역의 아이디)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;한명의 유저는 여러 킥보드 사용내역을 가질 수 있다(1:N관계)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; usages 모델 (사용자 킥보드 사용 내역 모델)   

use_deer_name (사용자가 이용한 킥보드의 이름)
use_end_lat, use_end_lng (사용자가 이용을 종료할 때 위도 경도)
use_start_at, use_end_at (사용자가 이용을 시작하고 종료한 시간)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 지역마다 여러 할인/벌금 조건이 추가/수정된다 (1:N관계)&lt;/li&gt;
  &lt;li&gt;서비스 지역마다 여러 주차지역/반남금지 구역이 존재한다 (1:N관계)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; service_area모델(서비스 지역 모델)   

area_id (지역 아이디로 고유한 값)
area_bounday (지역을 표시하는 MySQL spatial data로 POLYGON)
area_center (지역의 중심점)
area_coords (지역의 경계를 표시하는 위도, 경도로 이루어진 점의 리스트)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; parking_areas(주차 지역 모델)

parkingzone_id (파킹존 아이디로 고유한 값)
parkingzone_center_lat, parkingzone_center_lng (파킹존 중심 위도, 경도)
parkingzone_radius (파킹존의 반지름)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-textmate&quot;&gt;&amp;gt; forbidden_areas(반납 금지 구역 모델)

forbidden_area_id (반납금지구역 아이디로 고유한 값)
forbidden_area_boundary (반납금지구역을 표시하는 MySQL spatial data로 POLYGON)
forbidden_area_coords (반납금지구역의 경계를 표시하는 위도, 경도로 이루어진 점의 리스트)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;팀원들과 회의를 하며 추가한 모델은 아래와 같았다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;user 모델&lt;/strong&gt;       &lt;br /&gt;
유저의 정보가 저장되어야 해당 유저에게 벌금/할인을 부과하고 해당 킥보드를 어떤 유저가 사용하고 있는지에 대한 정보가 필요했기 때문에 유저 모델을 추가했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;roles 모델&lt;/strong&gt;     &lt;br /&gt;
확장성을 고려해 role이라는 모델을 생성했다. 후에 유저를 나이대별로 나누어 사용 금액을 따로 부과할 수 도 있기 때문에 유저에 role을 부과하기 위해 모델을 추가했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;types 모델&lt;/strong&gt;      &lt;br /&gt;
할인과 벌금에 대한 조건을 추가하는 모델을 discount_or_penalties라는 모델 하나로 진행하기 위해 할인/벌금에 대한 타입을 부과했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;unit 모델&lt;/strong&gt;     &lt;br /&gt;
할인과 벌금이 원이라는 금액으로 추가될 수 있지만 거리에 비례하여 %로 추가할 수 있기 때문에 이를 고려해 unit이라는 모델을 추가했다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;service_area_discount_or_penalties 모델&lt;/strong&gt; &lt;br /&gt;
네이밍 짓는게 너무 힘들었다. 최대한 어떤 역할을 하는 모델인지를 추측할 수 있게 길더라도 풀어서 쓰자는 결론이 나왔고 위와 같은 네임이 나오게 되었다. &lt;br /&gt;
여러 서비스 지역마다 여러 할인/벌금 조건이 추가되고 삭제될 수 있기 때문에 M:M의 관계로 구축하게 되었다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144787091-df3d2686-14c8-45c2-9674-b15d64687111.PNG&quot; alt=&quot;디어erd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;모델링-설계-중-생겼던-문제해결&quot;&gt;[모델링 설계 중 생겼던 문제해결]&lt;/h4&gt;
&lt;p&gt;모델링 설계가 끝난 뒤 프로젝트의 모델링 초기 세팅을 위해서 작성하는 도중에 PolygonField와 같이 geo 관련 필드에서 에러가 발생했다. 
찾아본 결과 geo 관련 (폴리곤, 포인트 등) 필드 사용할 때 django.contrib.gis.db에서 models 임포트하여 사용해야 했다(기존 방식대로 models.Model 임포트하여 사용하면 안된다)&lt;/p&gt;

&lt;p&gt;팀원들의 os환경이 우분투와 맥으로 나뉘었었고 우분투 기준으로 아래와 같이 해결했었다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우분투 기준 sudo apt-get install gdal-bin, sudo apt-get install libgdal-dev 명령어 사용&lt;a href=&quot;https://gis.stackexchange.com/questions/370736/installing-gdal-on-ubuntu-20-04-unmet-dependencies&quot;&gt;install 관련 블로그 참고&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;INSTALLED_APP에 “django.contrib.gis” 추가 후 데이터베이스 ENGINE을 django.contrib.gis.db.backends.mysql로 변경&lt;a href=&quot;https://stackoverflow.com/questions/12538510/getting-databaseoperations-object-has-no-attribute-geo-db-type-error-when-do&quot;&gt;stackoverflow 참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이후 gdal 문제는 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;conda install gdal&lt;/code&gt; 설치로 해결할 수 있다는 것을 알게되었다 :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;gdal-사용&quot;&gt;[GDAL 사용]&lt;/h4&gt;
&lt;p&gt;이 프로젝트에서 가장 큰 관건은 바로 “지역의 위도와 경도는 어떻게 얻을것인가” 였다. 이 부분은 각자 충분히 찾아보고 
회의를 진행하기로 하여서 1-2시간의 시간을 가지고 다시 만나 회의를 진행했다. 팀원 중 한명이 지역의 커서를 찍으면 찍은 
지역의 필요한 데이터인 POLYGON 정보를 받을 수 있게되었다 !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;geojson을 이용하여 GEOSGeometry 객체 저장하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;geojson.io 에서 원하는 지역에 도형(polygon) 및 점(point)을 생성하여 geojson 형식의 파일을 생성하고 unit test에서 geojson 파일을 읽어서 각 feature를 생성하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144789568-d34f85ce-412c-4a67-bf71-6476bbe086a3.PNG&quot; alt=&quot;gdal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;두 feature 사이의 거리 계산&lt;/strong&gt;  &lt;br /&gt;
haversine 라이브러리를 이용하여 WGS84 좌표계 시스템으로 되어있는 두 좌표간 거리를 계산해 주었고, 지역을 벗어난 킥보드가 해당 지역으로부터 얼마나 떨어져 있는지 계산하기 위해 epsg 5174 좌표로 변환한뒤 킥보드 반납 지점(Point)과 지역(Polygon)의 거리를 계산해 주었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;생각해야 할 게 많은 프로젝트였다.. ^^ 기능 구현하는 시간보다 오히려 초반에 더 많이 헤매고 찾아봤던 기억이 난다. polygon이 무슨 역할을 하는지
장고에서 제공되는지도 잘 몰랐기에 polygon을 이해하는데 오랜 시간이 걸렸다. 사실 아직도 조금 헷갈리는 개념이긴 한 것 같다. 다행히 팀원 한분이 커서를 찍으면 이에 맞는 위도, 경도등을 
자동으로 계산해서 출력해주는 사이트를 찾게 되어서 다행이 데이터를 세팅 할 수 있었다.&lt;/p&gt;

&lt;p&gt;이번 프로젝트는 migrations 파일을 관리하는 팀원을 한명 두어 최대한 마이그레이트 하는 과정에서 문제가 생기지 않게 했다. 화면공유를 통해 다같이 데이터를 세팅하는 과정에 참여했다. 기능구현도 물론 쉽지 않았지만 
이번 과제는 초기 모델링 설계 ~ 초기세팅부터 기능 구현후의 데이터 세팅이 더 어려웠던 것 같다. 모델링 설계에 많은 시간을 들여 모든 팀원이 완벽히 이해한 후 진행한게 기능 구현에 가장 큰 도움이 되었다.
진짜 모델링 너무 중요한 것 같다..!&lt;/p&gt;

&lt;p&gt;이번 프로젝트는 PR을 적극적으로 활용했던 것 같다 :-) 팀원의 리뷰를 통해 코드가 더욱 나아질 수 있고 다른 방향으로도 생각을 할 수 있게 해주는 시간이였던 것 같아 
개인적으로 좋았다(다한증이 생긴건 비밀이다.. ^^)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144790671-c335cb2a-494b-4e6f-b430-e6d03acefb14.PNG&quot; alt=&quot;PR2&quot; /&gt; &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/144790674-5cd55a1e-37fb-4f17-807d-702fe9152303.PNG&quot; alt=&quot;PR1&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="디어코퍼레이션" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 2주차 두번째 프로젝트 회고</title>
      <link href="https://heejung-gjt.github.io/project4" rel="alternate" type="text/html" title="백엔드 프리온보딩 2주차 두번째 프로젝트 회고" />
      <published>2021-11-14T15:00:00+09:00</published>
      <updated>2021-11-14T15:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project4</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project4">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-2주차-8퍼센트-기업과제&quot;&gt;원티드 2주차 8퍼센트 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.10 ~ 21.11.12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;거래내역 조회 API&lt;/li&gt;
  &lt;li&gt;입금 API&lt;/li&gt;
  &lt;li&gt;출금 API&lt;/li&gt;
  &lt;li&gt;계좌의 잔액을 별도로 관리해야 하며, 계좌의 잔액과 거래내역의 잔액의 무결성이 보장&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;입금 API 구현&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;EC2 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;gunicorn을 이용한 서버 배포&lt;/li&gt;
  &lt;li&gt;트랜잭션 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;8퍼센트가 p2p서비스를 제공하는 금융기업이라 그런지 돈에 관련된 API를 구현해야 했다. 여기서 내가 맡은 기능은 입금 API였다. 지금까지 했던 API에 비해서는 나한테 좀 새로웠다. 그러면서 트랜잭션 기능을 새롭게 알게 되었다.&lt;/p&gt;

&lt;p&gt;모델링 설계시 우리 팀은 user의 테이블과 각 user의 deposit정보를 가지고 있는 테이블을 1:1로 묶어서 user가 소유한 금액, 은행, 계좌번호등을 넣어주었다. 
이후 유저가 입출금을 할 시에 transactions라는 테이블이 새롭게 create되면서 유저가 입/출금한 시간, 금액, 거래 후 잔액등이 새롭게 갱신될 수 있게 처리했다.&lt;/p&gt;

&lt;p&gt;이번에는 로직을 작성전에 필수적으로 필요한 에러처리와 조건처리에 대해 먼저 생각해보았다. 입금 기능을 구현하기 위해서는 아래의 확인이 필수로 필요했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;계좌의 소유주만 요청 가능해야 한다&lt;/li&gt;
  &lt;li&gt;잔액의 무결성이 보장되어야 한다&lt;/li&gt;
  &lt;li&gt;잔액의 타입이 integer외의 것일 경우 에러를 반환한다&lt;/li&gt;
  &lt;li&gt;입금하려는 금액이 0보다 작으면 에러를 반환한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 중에서 가장 중요한것은 잔액의 무결성인 듯 했다. 찾아보니 장고에서 제공해주는 트랜잭션 기능이 있었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;@transaction.atomic&lt;/code&gt; 이라는 데코레이터를 
붙여 아주 간단하게 무결성에 대한 보장을 처리해줄 수 있었다. 이중에서 나는 입금 전체의 메소드가 아닌 일부분만 트랜잭션으로 묶어주기 위해
with명령어를 이용해서 트랜잭션을 사용했다&lt;/p&gt;

&lt;p&gt;당연히 잔액의 변경과 새로운 거래 테이블이 생성될 때 중간에 다른 예외가 발생해서 에러가 나면 변경이나 create가
되면 안되는 상황이다. 그렇기 때문에 transaction.atomic()을 붙여 무결성을 보장시켜주었다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;type_id&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEPOSIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;information&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amounts&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 팀원들과의 회의에서 integer타입이 아닌 경우 에러를 반환해주는 방향이 좀 더 자연스러울 것 같다는 의견이 있었다. 
소수점으로 금액을 보내는 경우가 흔하지 않다고 판단했고 정수 타입일 경우만 입/출금이 될 수 있게 코드를 추가해주었다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amounts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;INVALID_INPUT_FORMAT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;gunicorn을-이용한-ec2-서버-배포&quot;&gt;gunicorn을 이용한 EC2 서버 배포&lt;/h4&gt;
&lt;p&gt;장고로 풀스택 프로젝트를 진행했을 당시 uwsgi를 사용했었다. 또한 css등 정적인 파일도 배포하기 위해 nginx도 설치해 사용했다.
이번에 배포를 진행하면서 신기했던건 단순히 서버 배포를 하는 것은 굉장히 간단하다는 것이였다. 감사하게도 gunicorn으로 ec2배포하는 글을 포스팅한 팀원이 있었다. 
해당 팀원의 글을 보며 배포를 진행했고 서버 배포가 생각보다 간단해서 즐거웠다 ^^&lt;/p&gt;

&lt;p&gt;굳이 서비스 등록을 하지 않아도 nohup이라는 명령어로 서버를 실행 시킬 수 있었다.
아래 명령어 한줄이면 서버가 자동으로 실행된다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup gunicorn &lt;span class=&quot;nt&quot;&gt;--bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0:8000 app_name.wsgi &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;시간이 좀 더 날때 gunicorn에 대해 더 자세하게 알아보고 싶다. 서비스 등록을 한 것과 무슨 차이가 있는 걸까 단순히 서비스 등록을 하면
서버를 실행시키는 명령어가 짧아지는게 좋은걸까 ? 이부분은 더 알아봐야 할 것 같다. (그래도 단순하게 서버를 실행시킬수 있는 방법을 알려준 팀원에게 너무 감사했다 ㅠㅠ)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/142335744-7dcf629a-1a28-40e9-8eb8-d9d74fffd631.jpg&quot; width=&quot;550&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트를 시작한지 2주차.. ! 4번째 과제에 드디어 !! 밤 12시를 넘기지 않고 정확히 11시58분에 프로젝트를 완성했다.. 😂 진짜 짜릿해.. 최고야…  한동안 밤을 새다가 금요일에 밤에 이렇게 완벽하게 마무리되다니.. 이래서 사람들 개발하나..? 크크크&lt;/p&gt;

&lt;p&gt;확실히 이번 프로젝트를 하면서 rebase사용에도 익숙해지고 컨벤션 따르는 것도 익숙해졌다. 무엇보다 내 스스로 rebase를 사용해 로직을 수정할 수 있다는 것 !
rebase 도중에 충돌을 해결 할 수 있다는 것 ! 하하하&lt;/p&gt;

&lt;p&gt;무엇보다 모든 팀원이 열심히 하는 모습을 보면서 동시에 시너지를 얻게 되었다. 특히 새벽에 몇몇의 팀원들과 줌을 통해 이해가 가지 않았던 모델링 설계에 대해서
 함께 의논했던 시간이 기억난다. 모른체로 그냥 넘어가는게 아니라 이해하기 위해서 함께 노력하는 모습이 아름다웠달까.. ㅎㅎ 그 새벽에 열정적으로 토론에 임하는 팀원들의 모습에서 배울점이 참 많았다.&lt;/p&gt;

&lt;p&gt;아침형 인간으로써 새벽에 거의 깨어있지 못했던 나로써는 프로젝트를 시작하게 되면서 새벽은 물론 밤을 꼴딱 새는 내 자신의 한계와 부딪히는 경험도 하게 되었다. 함께 했을때 한계를 뛰어넘는 내 자신을 보며 신기했다. 
놀때도 밤을 못새는 나였는데.. 아주 칭찬한다 내자신아&lt;/p&gt;

&lt;p&gt;12시를 넘기지 않았다는 이 쾌감은 잊혀지지가 않는다.. 끝난뒤에 먹는 치맥이라.. 알 사람은 알거다 🥴&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="8퍼센트" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 2주차 첫번째 프로젝트 회고</title>
      <link href="https://heejung-gjt.github.io/project3" rel="alternate" type="text/html" title="백엔드 프리온보딩 2주차 첫번째 프로젝트 회고" />
      <published>2021-11-10T14:00:00+09:00</published>
      <updated>2021-11-10T14:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project3</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project3">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-2주차-원티드-기업과제&quot;&gt;원티드 2주차 원티드 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.08 ~ 21.11.10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;회사명 자동 완성
    &lt;ul&gt;
      &lt;li&gt;회사명의 일부만 들어가도 검색이 되어야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회사 이름으로 회사 검색&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 회사 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;회사 추가 기능
    &lt;ul&gt;
      &lt;li&gt;언어별로 추가되는 회사, 태그 추가하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unit test 구현&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;flask&lt;/li&gt;
  &lt;li&gt;다대다 참조시 중계 테이블 생성&lt;/li&gt;
  &lt;li&gt;리펙토링의 중요성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;이번 원티드의 기업과제에서 내가 개발해야 하는 기능은 추가되는 회사를 언어별로 따로 추가해주어야 하고 각 언어별 회사의 태그를 추가해주는 기능이였다.&lt;/p&gt;

&lt;p&gt;이번과제 역시 모델링 설계가 중요했지만 유독 더 중요했던 과제였다. 회사는 동일한데 각 회사가 가지고 있는 언어별로 기업을 추가해주어야 했고 태그 또한 각 언어별로 
태그가 추가되어야 했다. 더군다나 flask를 사용하기로 했기 때문에 모델링이 더욱 중요해질 수 밖에 없었다. 회의만 2시간 넘게 진행한 것 같다.&lt;/p&gt;

&lt;p&gt;여기서 팀원들의 의견이 갈렸었다. company라는 테이블에 모든 데이터를 넣어야 하는가 테이블을 나누어야 하는가로 의견이 갈렸다. 하지만 하나의 테이블로 만들때 생기는 문제점이 여러개 있을 수 있었고
 이를 고려하여 최대한 테이블을 나누어 설계하는 쪽을 택했다.&lt;/p&gt;

&lt;p&gt;아래의 이미지와 같이 모델링 설계를 진행했으며 다대다로 엮인 중계 테이블을 만들기로 하였다.  &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/140931939-781a552f-46ed-46be-a239-85751fd329f1.png&quot; alt=&quot;wanted_erd&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회사를 대표하는 companies라는 테이블과  각 company에 해당하는 언어를 다대다로 참조한 중계테이블인 company_contries 테이블을 생성&lt;/li&gt;
  &lt;li&gt;tag와 여러 언어의 tag를 가지고 있는 tag_contries라는 중계 테이블 생성&lt;/li&gt;
  &lt;li&gt;company와 company가 가지고 있는 tag를 다대다로 참조한 중계 테이블인 company_tags를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후 회사를 추가할때 회사가 존재하지 않으면 먼저 회사를 추가해주었다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;company_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 추가하는 회사가 가지고 있어야 하는 언어가 country테이블에 존재하지 않으면 테이블에 추가해주었다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translated_company&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 company와 country의 중계 테이블에 각 언어에 대한 회사를 생성해주었다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;com_country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company_countries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;translated_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translated_company&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;태그 기능 또한 위의 로직과 같이 진행했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;flask의-사용&quot;&gt;flask의 사용&lt;/h4&gt;
&lt;p&gt;원티드 기업에서 권장하는 프레임워크가 flask였고 flask의 경험이 대부분 없었지만 이번 프로젝트에는 flask를 사용해보기로 했다. 
생각보다 장고와 다른점이 꽤 있었다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;장고처럼 필요한 파일(models.py, urls.py…)을 자동으로 생성해주지 않는다&lt;/li&gt;
  &lt;li&gt;모델 설계시 문법이 꽤 다르다&lt;/li&gt;
  &lt;li&gt;ORM문법 또한 장고와 다른 부분이 있다&lt;/li&gt;
  &lt;li&gt;url 파일이 따로 없어 view에서 url을 작성한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;flask의 restful을 사용해서 기능 개발을 하기로 결정했고 필요한 파일들은 직접 만들기로 했다. 이때 MVC의 패턴에 따라 controller라는 폴더를 생성해 이곳에서 view를 작성했다.&lt;/p&gt;

&lt;p&gt;모델링 설계할땐 모든 팀원이 진짜 머리를 맞대고 함께 방법을 찾아냈다. 같이 하면서 정말 좋았던 점은 혼자서는 이렇게 짧은 시간안에 못했을 것을 
짧은 시간안에 구현해낼 수 있다는 것이다.&lt;/p&gt;

&lt;p&gt;데이터베이스에 대한 접근은 SQLAlchemy를 사용해 ORM으로 사용했다. (짧은 시간안에 DB를 다루기 위해서는 ORM이 진짜 좋은 것 같다..^^)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;리펙토링-후-코드&quot;&gt;리펙토링 후 코드&lt;/h3&gt;

&lt;p&gt;이후 팀원의 피드백을 받아 코드를 전체적으로 &lt;strong&gt;리펙토링&lt;/strong&gt; 하는 시간을 가졌다. 함께해서 좋은 점은 내 코드에 대한 피드백을 주고 받을 수 있다는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;코드의 가독성에 더 많은 신경을 쓰게 된다&lt;/li&gt;
  &lt;li&gt;코드를 왜 그렇게 짰는지에 대한 이유를 생각하게 된다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;더 개선된 로직을 짤 수 있게 된다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;회사정보를 가져올때 인덱스를 이용해야 하기 때문에 0,1로 나타내기 보다는 상수로 정해서 어떤 종류의 인덱스로 가져오는지 알 수 있게 설정한다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FIRST_INPUT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;VALUE_IDX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;company_infos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;company_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIRST_INPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE_IDX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Company Already Exist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회사가 테이블에 존재하지 않으면 새롭게 테이블에 추가해준다. 이때 filter_by와 first로 company가 있는지 없는지 확인하는
로직이 좀 더 가독성 면에서 좋다. 태그 기능도 마찬가지로 first를 사용하는게 동일한 효과를 가져올 것 같다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIRST_INPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE_IDX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIRST_INPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE_IDX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;아쉬웠던-점&quot;&gt;아쉬웠던 점&lt;/h3&gt;
&lt;p&gt;태그기능을 구현하는데 있어 충분한 커뮤니케이션이 되지 않아 서로 이해했던 방향이 달랐다. &lt;br /&gt;
나는 회사를 추가할때 추가되는 태그가 무조건 새로운 태그네임이라고 판단하고 태그를 테이블에 언어별로 create해주는 로직으로 작성했다. 
이후 서로의 코드를 함께 보는 시간에 한 팀원이 태그 테이블에 추가시키려는 태그가 있을 수 도 있는거 아니냐는 이야기를 했다. 태그가 존재하면 새로운 태그는 추가시키지 않는 방향이 
태그의 역할과 더 어울릴 것 같다는 의견을 내주었다.&lt;/p&gt;

&lt;p&gt;시간이 없어 태그가 새롭게 추가되는 방향으로 로직구현을 마무리 지었다. 의견을 듣고 다시 생각해보니 태그의 역할을 생각해보면
새로운 태그가 추가될 수도 있지만 아닐수도 있다는 생각을 가지게 되었다. 이부분을 사전에 팀원들과 함께 회의를 통해 제대로 정했어야 했지만 그 부분이 부족했다.&lt;/p&gt;

&lt;p&gt;내가 생각한 방향이 다른 사람과 같지 않을수도 있다는 것을 다시 한번 깨닫게 되었고 다음부턴 이런 부분까지 함께 회의를 통해 맞추는 자세가 필요할 것 같다&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/142316753-b0ddaba7-c6db-4a14-850d-58c50fd5a55a.jpg&quot; width=&quot;550&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번에도 연속으로 밤을 새게 되었다. 긍정적으로 생각한다면 저번 과제에 걸린 시간보다 약 2시간 일찍 마쳤다는점, 그리고 
저번 과제 때보다는 서로 기분을 이해하려고 애쓴게 보였다는 점이다. 협업 경험이 많지 않은 사람들끼리 만나 서로 다른 코딩 스타일이나 컨벤션을 맞추기 위해 코드를 몇번이나 재확인하고
 git의 충돌로 이를 해결하고 잘 안되는 부분 같이 고민하고..&lt;/p&gt;

&lt;p&gt;확실히 저번보다는 나아졌지만 아직 미숙한 부분들이 있기에 이를 맞춰가는 과정이라고 생각한다. 무엇보다 &lt;strong&gt;협업&lt;/strong&gt; 을 하기 위해서는 전달력이 좋아야 할 것 같다는 생각이 들었다. 
그러기 위해서는 내 의견을 팀원들이 한번에 이해할 수 있게 말하는 연습도 필요했다. 그래야 기능을 개발할때 혼란이 생기지 않는다. (위에 아쉬운 점이 앞으로 없기 위해서는 더욱 중요하다 ㅠㅠ)&lt;/p&gt;

&lt;p&gt;다음번에는 밤 새지 않고 끝내는 것을 목표를 해야겠다 !&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="wanted" />
      
        <category term="wecode" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 1주차 두번째 프로젝트 회고</title>
      <link href="https://heejung-gjt.github.io/project2" rel="alternate" type="text/html" title="백엔드 프리온보딩 1주차 두번째 프로젝트 회고" />
      <published>2021-11-07T12:00:00+09:00</published>
      <updated>2021-11-07T12:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project2</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project2">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-1주차-프레시코드-기업과제&quot;&gt;원티드 1주차 프레시코드 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.04 ~ 21.11.06&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;로그인 기능
    &lt;ul&gt;
      &lt;li&gt;사용자 인증을 통해 상품 관리를 할 수 있어야 한다&lt;/li&gt;
      &lt;li&gt;JWT 인증 방식을 이용한다&lt;/li&gt;
      &lt;li&gt;상품 추가/수정/삭제는 admin권한을 가지 사용자만 이용할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;상품 관리 기능
    &lt;ul&gt;
      &lt;li&gt;상품 조회는 하나 또는 전체 목록을 조회할 수 있으며 전체 목록은 페이징 기능이 있다&lt;/li&gt;
      &lt;li&gt;한 페이지당 아이템 수는 5개이다&lt;/li&gt;
      &lt;li&gt;사용자는 상품 조회만 가능하다&lt;/li&gt;
      &lt;li&gt;관리자는 상품 추가/수정/삭제를 할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;상품 관리 기능(상품 목록 조회, 상품 페이징 처리, 메뉴 수정, 메뉴 태그 수정)&lt;/li&gt;
  &lt;li&gt;모델링 설계(공통)&lt;/li&gt;
  &lt;li&gt;PostMan API 명세 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;unit test 코드 구현&lt;/li&gt;
  &lt;li&gt;기본 환경 세팅에 있어 팀원 컨벤션 맞추기&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;과제가 주어지면 팀원들과 가장 먼저 진행하는 것은 과제 기능에 대한 모델링이다. 모델링 설계가 제대로 진행되어야 
기능 개발 할때 어려움이 덜 할 것이라는 것을 모두들 알고 있었다. 프레시코드의 API과제에서는 유저가 관리자와 사용자로 나뉘어져 있어야 했다.
관리자만이 상품 C, U, D가 가능했고 사용자는 상품 조회만이 가능했다.&lt;/p&gt;

&lt;p&gt;모델링 설계를 진행할때 고려했던 점은 서비스가 확장되는 것을 고려하여 테이블을 생성했다. Badge, Size, Tag의 테이블을 따로 두었고 Item, Menu 테이블에서 FK로 참조하는 방식으로 모델을 설계했다.&lt;/p&gt;

&lt;p&gt;이 과정에서 &lt;strong&gt;모델 정규화&lt;/strong&gt;  라는 단어를 쓰게 되었는데 모델링을 설계하며 데이터의 중복을 방지하고 이후 c,r,u,d를 구현하는 과정에서 문제 없이 진행할 수 있게 스키마를 설계하는 방식이 바로 모델 정규화라는 것을 이번에 제대로 이해하게 되었다.&lt;/p&gt;

&lt;p&gt;이 과제에서 나는 상품 관리 기능 중 상품 조회와 상품 수정 부분을 구현하게 되었다. 이 과정에서 조금 고민이 되었던 부분이 존재했다. 메뉴를 수정하는 것과 메뉴가 가지고 있는 태그부분을 수정하는 것을 어떻게 진행해야 하는지 고민이 되었다.
처음에 하나의 view에서 메뉴와 메뉴의 태그를 모두 수정하는 로직을 작성하였다. 이후 코드를 보게 되니 if~else 파티였다. ^^ 코드 가독성면에서 좋지 않은것 같았고 그래서 다른 팀원의 의견을 묻게 되었다.&lt;/p&gt;

&lt;p&gt;그리고 들었던 피드백은 굳이 메뉴 수정과 메뉴에 해당되는 태그를 같은 view에서 진행할 필요가 있냐는 것였다. 나는 당연히 메뉴를 수정하는 로직이니 같은 view에다 넣은게 당연하다고 생각했다. 그런데 팀원의 의견을 들어보니 
메뉴 수정하는 view와 메뉴의 태그를 수정하는 view가 나뉘는 것이 가독성 면에서도 훨씬 나아질 것 이라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;피드백을 들은 후 MenuDetailView class에서 제품의 name과 description을 수정하는 로직을 구현하였고 MenuItemsView라는 새로운 class를 만들어 이곳에서 메뉴에 해당하는 item들의 정보를 업데이트 하는 
로직을 구현하였다.&lt;/p&gt;

&lt;p&gt;메뉴가 존재하는지 안하는지 조건을 걸기 위해 first라는 쿼리문을 사용하였지만 exists라는 더 명확한 쿼리문이 존재하였고 다른 팀원이 이를 
언급해주었다. 어떻게 보면 굉장히 사소해 보이지만 이런 부분을 피드백 해주는 덕분에 코드의 가독성과 효율적인 로직에 대한 생각을 많이 하게 되는 것 같았다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# if not Menu.objects.filter(id=data[&quot;menu_id&quot;]).first():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MENU_NOT_FOUND&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;listview-기능-구현&quot;&gt;ListView 기능 구현&lt;/h4&gt;

&lt;p&gt;그 다음으로 적절한 조건처리가 되지 않아 배포후에 발생하는 에러가 ListView에서 나왔다.. 밤을 새고 있었기에 팀원들에게 굉장히 미안했다..&lt;br /&gt;
아래 로직에서 badge 부분의 적절한 조건 처리를 해주지 않아 실제 badge에 들어가는 데이터가 없으면 에러가 발생했다. 
badge는 해당 제품이 신상품인지 best 상품인지 이런 데이터가 들어가야 하는 부분이다. 실제로 아무런 데이터가 들어가지 않을 수 있으니
그 부분을 처리해주어야 한다. 하지만 나는 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;product.badge.name&lt;/code&gt; 으로 name을 가져오게만 처리하여 데이터가 들어가지 않았을때를
 생각해주지 않았다. 이 덕분에 30-40분이라는 시간이 더 걸린듯 했다..&lt;/p&gt;

&lt;p&gt;적절한 조건 처리와 에러처리에 굉장히 신경써야 겠다는 생각을 이날 새벽에 다짐하고 또 다짐했던 것 같다. 휴&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;menus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;category&quot;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;isSold&quot;&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;badge&quot;&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;memuID&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;isSold&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;tags&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;menuID&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;unit-test&quot;&gt;unit test&lt;/h4&gt;

&lt;p&gt;그 다음으로 고민이였던 부분은 unit test였다. 사실 unit test작성에 미숙하였기에 정해놓았던 시간안에 unit test를 전부
작성하지 못했다. (이것도 새벽에 일어난 일이라 나 대신 unit test를 도와 작성해주신 팀원에게 감사하다..) unit test에 대한
 로직 작성을 제대로 이해하지 못하고 view에서 해주는 일까지 unit test에 작성하게 되면서 더 꼬여버렸다. test를 위해서 필요한 테이블은 모두 create해주어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필요한 테이블은 create한다. 이때 id는 직접 지정해주어야 한다&lt;/li&gt;
  &lt;li&gt;생성한 테이블은 test이후에 모두 삭제되어야 한다. 이때 참조되어 있는 순으로 먼저 삭제해주어야 에러가 나지 않는다&lt;/li&gt;
  &lt;li&gt;성공 케이스의 경우 성공할 수 밖에 없는 데이터를 넣어서 요청만 하면 된다. 나머지는 view의 로직들이 해결해 줄 것이다&lt;/li&gt;
  &lt;li&gt;실패 케이스의 경우 view에서 작성한 에러의 경우를 생각해서 이에 맞게 실패하는 케이스를 만들어주면 된다. 마찬가지로 view에서 상황에 맞게
 실패 메시지와 status를 반환해 줄 것이기 때문에 이에 맞는 메시지와 status만 잘 작성해주면 된다.&lt;/li&gt;
  &lt;li&gt;FK등으로 참조하고 있는 곳에 객체를 넣을때는 그냥 간단하게 &lt;strong&gt;menu_id = 1&lt;/strong&gt; 이런식으로 넣어주자. 굳이 &lt;strong&gt;menu = menu.objects.get(id=1)&lt;/strong&gt; 
이런식으로 넣어줄 필요가 없다 !&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;리펙토링-후-코드&quot;&gt;리펙토링 후 코드&lt;/h3&gt;

&lt;p&gt;코드 리뷰 후 &lt;strong&gt;리펙토링&lt;/strong&gt; 하는 시간을 가졌다&lt;/p&gt;

&lt;p&gt;제품을 수정하는 과정에서 아래와 같이 각 제품이 가지고 있는 여러 아이템이 존재하고 있었다&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;menus: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      id: 245,
      category: &lt;span class=&quot;s2&quot;&gt;&quot;SALAD&quot;&lt;/span&gt;,
      name: &lt;span class=&quot;s2&quot;&gt;&quot;깔라마리 달래 샐러드&quot;&lt;/span&gt;,
      description: &lt;span class=&quot;s2&quot;&gt;&quot;해산물 샐러드&quot;&lt;/span&gt;,
      isSold: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
      badge: &lt;span class=&quot;s2&quot;&gt;&quot;NEW&quot;&lt;/span&gt;,
          items: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              id: 1,
              menuId: 245,
              name: &lt;span class=&quot;s2&quot;&gt;&quot;미디움&quot;&lt;/span&gt;,
              size: &lt;span class=&quot;s2&quot;&gt;&quot;M&quot;&lt;/span&gt;,
              price: 8000,
              isSold: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              id: 2,
              menuId: 245,
              name: &lt;span class=&quot;s2&quot;&gt;&quot;라지&quot;&lt;/span&gt;,
              size: &lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;,
              price: 10000,
              isSold: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
          &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;초반에는 MenuDetailView라는 class에서 put메소드에서 menu의 데이터와 items를 한번에 수정하는 로직을 작성했다&lt;/li&gt;
  &lt;li&gt;기능구현이 끝난 후 코드를 바라보니 하나의 view에 너무 많은 if-else문이 사용되고 있었고 menu와 item에 대한 view를 따로 구현을 하는게 가독성면과 효율성면에서 더 좋을 것 같다는 생각이 들었고 팀원들과 상의 후 로직을 수정했다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 메뉴 수정 view&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MenuDetailView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@authorizer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADMIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UNAUTHORIZED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POSTING_{menu_id}_NOT_FOUND&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;menu desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KEY_ERROR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 아이템 수정 view&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MenuItemsView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@authorizer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ADMIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UNAUTHORIZED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NO_INPUT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item price&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KEY_ERROR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VALUE_ERROR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ITEMS_NOT_FOUND&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SIZE_NOT_FOUND&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로직을 중간에 수정하려고 하다보니 생각보다 많은 시간이 걸렸지만 코드의 효율성면을 따졌을땐 코드 수정은 잘 한 선택같았다 ! ㅎㅎㅎ 물론 시간이 배로 걸렸지만 내 의견을 존중해주고 더 나은 쪽을 흔쾌히 선택해주었던 팀원들에게 고마웠다 ! 
코드를 수정하며 들었던 생각은 코드를 짤때는 잘 모른다는 것이다. 다 짜고 난 뒤에야 고쳐야 할 부분들, 비효율적인 코드 로직들이 보인다&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;익숙치 않은 unit test작성, 아직 미숙한 팀원끼리의 커뮤니케이션으로 또다시 밤을 새게 되었다. 아주 꼴딱 새버렸다.. 모든 팀원들이
 지친게 눈에 보였고 어떻게든 프로젝트가 마무리 되었지만 누구 하나 웃을수 없는 상황이 되었다. 아무리 서로 배려한다고 해도
  밤을 새운건 모든 사람들에게 굉장한 체력소모가 되버렸다. 무사히 프로젝트는 제출되었지만 이날 제대로 잠을 잘 수가 없었다. unit test를 제대로 작성하지 못한 것과 ListView의 조건 처리를 제대로 하지 못한
  부분이 마음에 걸렸다.&lt;/p&gt;

&lt;p&gt;unit test는 이후에 완벽하게 숙지하고 이해해서 다음 프로젝트는 똑같은 일로 문제가 발생하지 않게 신경써야겠다. 
조건 처리 부분에 대해서는 나의 부주의였던 것 같다. 나는 완벽히 구현되었다고 생각했지만 그렇지 못했다. 앞으로는 조건처리, 에러처리에 대해
 처음부터 생각하고 로직을 작성해야 겠다는 생각을 하게 된 것 같다.&lt;/p&gt;

&lt;p&gt;혼자 프로젝트를 진행하는것과 다른점은 내가 하는 작은 실수가 큰 실수가 된다는것이다.&lt;/p&gt;

&lt;p&gt;다음 프로젝트부터는 이런 부분을 신경쓰고 진행 할 것이다. 똑같은 실수를 하지 않기 위해서 ! &lt;br /&gt;
처음의 실수는 누구나 할 수 있다고 생각한다. 하지만 똑같은 실수를 되풀이 한다는 것은 있어서는 안된다 !!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="프레시코드" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 1주차 첫번째 프로젝트 회고</title>
      <link href="https://heejung-gjt.github.io/project1" rel="alternate" type="text/html" title="백엔드 프리온보딩 1주차 첫번째 프로젝트 회고" />
      <published>2021-11-03T12:00:00+09:00</published>
      <updated>2021-11-03T12:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project1</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-1주차-aimmo-기업과제&quot;&gt;원티드 1주차 Aimmo 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.01 ~ 21.11.03&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;게시글 카테고리&lt;/li&gt;
  &lt;li&gt;댓글/대댓글&lt;/li&gt;
  &lt;li&gt;게시글 조회수 중복 방지&lt;/li&gt;
  &lt;li&gt;AWS 배포&lt;/li&gt;
  &lt;li&gt;postman / swagger를 사용한 API 명세&lt;/li&gt;
  &lt;li&gt;몽고DB 연동하기&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;몽고 DB란&lt;/li&gt;
  &lt;li&gt;REST API란&lt;/li&gt;
  &lt;li&gt;git rebase와 squash&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;게시글 조회수 기능 구현&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;헤로쿠 배포하기(실패)&lt;/li&gt;
  &lt;li&gt;의견 제시하기(네비게이터)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;기존에 선발과제였던 게시판 CRUD API에서 업그레이드 된 API를 구현해내야 하는 문제였다. 나에게 주어진 시간은 3일이였다. 몽고DB를 처음 사용해 본 나로써는 굉장히 두려웠다. 막막했지만 몽고DB를 써본 팀원이 있었다. 덕분에 몽고DB 연동은 생각보다 쉽게 해결했다. 
과제에서는 API 테스트를 Swagger나 Postman로 하기를 요구했다. PostMan은 써보았지만 Swagger는 처음 들었다. Swagger를 써본 팀원이 존재했기에 그분의 설명을 들으며 
Swagger를 적용시켰다.&lt;/p&gt;

&lt;p&gt;API를 최근에 접해본 나로써는 REST API를 Django에서 DRF없이 구현할 수 있다는 것을 처음 알았다. 장고 공부를 시작한지 꽤 되었지만 정작 백엔드가 필요로 하는 기능들은 제대로 
공부하지 않았던것을 깨달았다.&lt;/p&gt;

&lt;p&gt;팀원들과 함께 프로젝트를 진행하며 깨달은 것 &lt;code class=&quot;highlighter-rouge&quot;&gt;협업&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;커뮤니케이션&lt;/code&gt; 항상 글로만 보고 들었던 백엔드 개발자가 가져야 할 중요한 능력,, 팀프로젝트 한지 이틀만에 몸으로 깨달아버렸다. 
일단 용어를 알아야 의사소통이 된다는것.. 혼자 공부하는 시간이 많았던 나로써는 머리에 있는 내용을 개발자스럽게 꺼내기란 너무너무 힘들었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/140023944-ed781e8e-ceda-43d8-a705-00bbd87a1212.jpg&quot; alt=&quot;우울2&quot; /&gt;
진짜 이틀만에 2키로가 빠졌다.. 멋지게 과제를 해내고 싶었지만 그러지 못한 것. 피곤함이 의욕을 이긴것. 객관적으로 내 실력을 바라보니 우물안 개구리였다는 생각.
꼼꼼하지 못한 성격이 너무나 큰 단점으로 돌아온 것. 진짜 첫번째 과제를 하면서 나 자신을 계속해서 자책했던 것 같다. 나만 이렇게 어려운가 ? 나만 이렇게 못하나 ? 이 생각을
혼자서 계속 되뇌었던 것 같다. 그러다 원티드 멘토 예리님의 15분 강의를 들었다. 원래 이런 강의를 들으며 위로 받는 편이 아닌데 뭔가 위로가 되었다.  그리고 생각을 조금 바꿔보기로 결심했다. 
꼼꼼해지려고 노력하기. 말할때 2번은 아니 3번은 더 생각하고 찾아보고 말하기.&lt;/p&gt;

&lt;p&gt;무엇보다 협업이 왜 중요한지 진짜 너무 잘 알아가고 있는중이다. 부디 빨리 내가 적응 할 수 있기를 바란다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="에이모" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">원티드 프리온보딩 시작</title>
      <link href="https://heejung-gjt.github.io/wanted1" rel="alternate" type="text/html" title="원티드 프리온보딩 시작" />
      <published>2021-11-02T17:00:00+09:00</published>
      <updated>2021-11-02T17:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/wanted1</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/wanted1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발자가-되기로-결심한-계기와-과정&quot;&gt;개발자가 되기로 결심한 계기와 과정&lt;/h3&gt;
&lt;p&gt;처음으로 앱 개발로 대학교에서 상을 받은 기억이 난다. 이게 계기가 되었다. 내가 열심히 만든 앱을 누군가 보고 사용한다는 
그 기분이 좋았다. 그렇게 개발자의 길을 걷고 싶었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;내가-위코드-x-원티드-프리온보딩에-참여하게-된-동기이유&quot;&gt;내가 위코드 x 원티드 프리온보딩에 참여하게 된 동기/이유&lt;/h3&gt;
&lt;p&gt;가장 큰 이유는 협업이였다. 항상 다른사람과 함께 개발을 해보고 싶은 욕구가 컸다. 짧은 시간동안 여러개의 기업과제를 해결해야 한다는
프로그램이 마음에 들었다. 또 다른 이유로는 실제 기업에서 어떤 과제를 내며 어떤걸 중요하게 생각하는지 미리 겪어볼 수 있는 기회여서 참여하게 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나는-앞으로-어떤-개발자가-되고-싶은가&quot;&gt;나는 앞으로 어떤 개발자가 되고 싶은가&lt;/h3&gt;
&lt;p&gt;1주차 첫번째 과제를 하면서 평소 나의 단점이 그대로 드러났다. 내가 직접 느끼게 되니 굉장히 스트레스였다. 
개발자라는 직업은 자신이 왜 그렇게 짰는지 왜 이렇게 짜야하는지 자신의 의견을 명확하게 말 할 수 있어야 하고 함께 하는 사람에게
 신뢰를 주어야 한다. 그리고 책임을 져야한다. 나는 신뢰할 수 있는 개발자, 내가 짠 코드를 설명할 수 있는 개발자가 되고 싶다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
