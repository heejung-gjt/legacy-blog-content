<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/tag/network/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2021-12-06T14:14:33+09:00</updated>
  <id>https://heejung-gjt.github.io/tag/network/feed.xml</id>

  
  
  

  
    <title type="html">studying developer | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Socket이란, WebSocket이란</title>
      <link href="https://heejung-gjt.github.io/socket" rel="alternate" type="text/html" title="Socket이란, WebSocket이란" />
      <published>2021-09-14T17:32:00+09:00</published>
      <updated>2021-09-14T17:32:00+09:00</updated>
      <id>https://heejung-gjt.github.io/socket</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/socket">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Network 정리 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./structure&quot;&gt;스택과 큐의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./heap&quot;&gt;힙의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;소켓&quot;&gt;소켓&lt;/h2&gt;
&lt;p&gt;소켓이란 프로그램이 네트워크 상에서 데이터를 송신과 수신을 하기위한 연결부이다. 일반적으로 tcp/ip프로토콜을 사용하거나 웹 소켓을 이용한다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프로토콜&lt;/strong&gt;        &lt;br /&gt;
어떤 시스템이 다른 시스템과 통신을 원활하게 수용하도록 해주는 통신 규약이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;소켓-통신의-흐름&quot;&gt;소켓 통신의 흐름&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/133592555-52a41f5c-9e58-43a3-9b2c-92ffa326852c.png&quot; alt=&quot;쏘켓&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소켓의 흐름은 서버소켓과 클라이언트소켓으로 이야기 할 수 있다&lt;/p&gt;

&lt;h4 id=&quot;클라이언트&quot;&gt;클라이언트&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;socket()함수로 소켓을 연다&lt;/li&gt;
  &lt;li&gt;connect() 함수를 이용해 통신 할 서버의 ip, port번호에 통신을 시도한다&lt;/li&gt;
  &lt;li&gt;통신을 시도 할때 서버가 accept()함수를 사용해 클라이언트의 socket descriptor를 반환한다&lt;/li&gt;
  &lt;li&gt;클라이언트와 서버가 서로 read(), writer()를 하며 통신한다(반복)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;서버&quot;&gt;서버&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;socket()함수를 이용하여 소켓을 생성한다&lt;/li&gt;
  &lt;li&gt;bind()함수로 ip와 port번호를 설정한다&lt;/li&gt;
  &lt;li&gt;listen()함수로 클라이언트의 접근 요청에 수신 대기열을 만들어서 몇 개의 클라이언트를 대기 시킬지를 결정한다&lt;/li&gt;
  &lt;li&gt;accept()함수를 사용하여 클라이언트와의 연결을 기다린다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;소켓통신은 http통신과는 다르게 서로 연결을 유지하는 양방향 통신이다. 서버와 클라이언트가 실시간으로 데이터를 주고받는 상황이 필요한 경우에 주로 사용된다&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;웹-소켓&quot;&gt;웹 소켓&lt;/h2&gt;
&lt;p&gt;웹소켓은 서버와 클라이언트간의 socket connection을 유지해 언제든 양방향 통신이나 데이터 전송이 가능하게 하는 기술이다  &lt;br /&gt;
즉 http통신의 한계(단방향, 재접속)를 보완하는 기술이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;웹-소켓-이전-비슷한-기술&quot;&gt;웹 소켓 이전 비슷한 기술&lt;/h3&gt;

&lt;h3 id=&quot;polling&quot;&gt;Polling&lt;/h3&gt;
&lt;p&gt;서버로 일정 주기마다 요청을 송신한다 &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/133594391-1c7fc979-b632-4a51-90a9-0a3abae7f1ef.png&quot; alt=&quot;polliing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;real time통신에서는 언제 통신이 발생할지는 예측이 불가능하다. 그렇기에 불필요한 request와 connection이 발생한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;real time = 실시간&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;long-polling&quot;&gt;Long Polling&lt;/h3&gt;
&lt;p&gt;서버에 요청을 보내고 이벤트가 발생하여 응답을 받을 때까지 연결을 종료하지 않는다. 응답을 받으면 연결을 끊고 다시 재요청을 한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/133594388-498189c6-6de4-482a-99b9-6db4eb994474.png&quot; alt=&quot;longpolling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;많은 양의 메시지가 전송 될 경우 polling과 똑같다&lt;/p&gt;

&lt;h3 id=&quot;streaming&quot;&gt;Streaming&lt;/h3&gt;
&lt;p&gt;서버에 요청을 보내고 연결을 유지하며 데어터를 수신한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/133594384-d2b2bf4b-981c-451d-b125-d83ec768a919.png&quot; alt=&quot;스트리밍&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클라이언트에서 서버로의 데이터 송신이 어렵다&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉 위의 방법들은 모두 HTTP를 통해 통신하기 때문에 request, response 둘 다 header가 불필요하게 크다&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;웹-소켓의-핸드-쉐이크&quot;&gt;웹 소켓의 핸드 쉐이크&lt;/h3&gt;

&lt;p&gt;웹 소켓도 tcp의 핸드 쉐이크처럼 연결을 하는 과정이 존재한다. 이때 웹 소켓의 핸드 쉐이킹은 http(80)나 https(443)의 프로토콜을 통해서 이루어진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/133595432-4a2d221b-8264-4741-945a-bc4056f4dfc3.png&quot; alt=&quot;웹소켓&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트에서 아래와 같은 표준적인 http 요청 header를 보낸다 (이때 http버전은 반드시 1.1 이상이여야하며 get방식이여야 한다 )&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;GET /chat HTTP/1.1  &lt;br /&gt;
Host: example.com:8000 # 웹 소켓의 서버 구조 &lt;br /&gt;
Upgrade: websocket # 현재 클라이언트. 서버 전송 프로토콜 연결에서 다른 프로토콜로 업그레이드/변경하기 위한 규칙 &lt;br /&gt;
Connection: Upgrade # upgrade헤더가 명시되어 있는 경우 송신자는 반드시 connection헤더 필드도 함께 전송해야 한다 &lt;br /&gt;
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== # 양쪽 통신자의 신원을 확인하는 키라고 생각하면 된다  &lt;br /&gt;
Sec-WebSocket-Version: 13&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;서버가 클라이언트에게 웹소켓 프로토콜로 업그레드 하는 것을 승인하면 아래의 헤더를 전송한다&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;101 Switching Protocols &lt;br /&gt;
Upgrade: websocket  &lt;br /&gt;
Connection: Upgrade   &lt;br /&gt;
Sec-WebSocket-Accept: hsBlbuDTkk24srzEOTBUlZAlC2g=&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;핸드 쉐이킹이 완료되면 http프로토콜은 &lt;strong&gt;ws&lt;/strong&gt; 프로토콜로 변경된다 (wss -&amp;gt; https처럼 데이터 보안을 위해서 ssl을 적용한 프로토콜)
 이후 서로 messge를 주고받는다 (message : 여러 프레임이 모여 구성하는 하나의 논리적 메시지 단위)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프레임(frame)&lt;/strong&gt;    &lt;br /&gt;
커뮤니케이션에서 가장 작은 단위의 데이터이다 (작은헤더 + payload로 구성)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;페이로드(payload)&lt;/strong&gt;     &lt;br /&gt;
데이터와 함께 전송되는 데이터중, 헤더와 메타데이터와 같은 데이터는 제외한 전송의 근본적인 목적이 되는 데이터의 일부분이다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;웹-소켓-프로토콜-특징&quot;&gt;웹 소켓 프로토콜 특징&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;최초 접속할때 http 프로토콜 위에서 핸드쉐이킹을 하기 때문에 http header를 사용한다&lt;/li&gt;
  &lt;li&gt;웹 소켓을 위한 별도의 포트는 없으며 기존포트(80, 443)를 사용한다&lt;/li&gt;
  &lt;li&gt;프레임으로 구성된 메시지라는 논리적 단위로 송수신된다&lt;/li&gt;
  &lt;li&gt;메시지에 포함될 수 있는 교환 가능한 메시지는 텍스트와 바이너리이다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;socketio&quot;&gt;socket.io&lt;/h2&gt;
&lt;p&gt;socket.io란 WebSocket과 같이 클라이언트와 서버의 양방향 통신을 가능하게 해주는 모듈이다. WebSocket은 HTML5이후에 나왔기 때문에 엊ㄴ의 기술로 구현된 서비스에서 WebSocket처럼 사용할 수 있도록 도와주는 기술이다.&lt;/p&gt;

&lt;p&gt;socket.io는 통신을 시작할때 각 브라우저에 대해서 webSocket, streaming등등에서 가장 적절한 방법을 찾아 메시지를 보내준다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;reference&quot;&gt;reference&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://duckdevelope.tistory.com/19&quot;&gt;https://duckdevelope.tistory.com/19&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://rubberduck-debug.tistory.com/123&quot;&gt;https://rubberduck-debug.tistory.com/123&lt;/a&gt;   &lt;br /&gt;
&lt;a href=&quot;https://velog.io/@y1andyu&quot;&gt;https://velog.io/@y1andyu&lt;/a&gt;  &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=MPQHvwPxDUw&quot;&gt;https://www.youtube.com/watch?v=MPQHvwPxDUw&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="network" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Cookie, Session, Cache</title>
      <link href="https://heejung-gjt.github.io/cookie" rel="alternate" type="text/html" title="Cookie, Session, Cache" />
      <published>2021-09-06T14:32:00+09:00</published>
      <updated>2021-09-06T14:32:00+09:00</updated>
      <id>https://heejung-gjt.github.io/cookie</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/cookie">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Network 정리 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./structure&quot;&gt;스택과 큐의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./heap&quot;&gt;힙의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키&quot;&gt;쿠키&lt;/h2&gt;
&lt;p&gt;웹 사이트에 접속시 정보가 접속자 즉, 클라이언트의 로컬에 저장되는 작은 텍스트 파일이다&lt;/p&gt;

&lt;p&gt;ex) 쇼핑몰 사이트에 로그인 하지 않고 장바구니에 상품을 등록해놓은 후 나갔다가 다시 들어와도 상품이 여전히 등록될 수 있게 하는 역할을 해준다&lt;/p&gt;

&lt;h3 id=&quot;쿠키-동작-순서&quot;&gt;쿠키 동작 순서&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 페이지를 요청한다&lt;/li&gt;
  &lt;li&gt;웹 서버가 요청을 받은 후 쿠키를 생성한다&lt;/li&gt;
  &lt;li&gt;생성한 쿠키에 정보를 담아서 클라이언트에게 응답할때 함께 보낸다&lt;/li&gt;
  &lt;li&gt;쿠키를 받은 클라이언트가 다시 서버에 요청할때 함께 전송한다&lt;/li&gt;
  &lt;li&gt;웹 서버는 업데이트할 정보가 있으면 쿠키를 업데이트하여 다시 응답과 함께 전송한다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;클라이언트가 브라우저에 자신의 정보를 담고 있기 때문에 데이터를 요청할때 쿠키를 생성하고 브라우저를 종료할때 쿠키를 삭제한다&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(이때 쿠키는 최대 400개의 쿠키를 저장할 수 있고 몇몇개의 제약 조건이 존재한다)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;세션&quot;&gt;세션&lt;/h2&gt;
&lt;p&gt;쿠키를 기반으로 하고 있지만 사용자의 정보를 브라우저에 저장하는 쿠키와는 달리 세션은 서버측에서 관리하고 있다. 일정시간동안 같은 사용자로부터 들어오는 요구를 하나의 상태로 보고 그 상태를 일정하게 유지시켜주는 기술이다.&lt;/p&gt;

&lt;h4 id=&quot;세션-동작-순서&quot;&gt;세션 동작 순서&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;클라이언트가 서버로 접속을 시도한다&lt;/li&gt;
  &lt;li&gt;서버는 접근한 클라이언트의 쿠키를 확인하여 클라이언트가 해당 세션 id를 보냈는지 확인한다&lt;/li&gt;
  &lt;li&gt;세션 id가 존재하지 않으면 서버는 세션id를 생성해 클라이언트에게 돌려준다&lt;/li&gt;
  &lt;li&gt;서버에서 클라이언트로 돌려준 세션id를 쿠키를 사용해 서버에 저장한다&lt;/li&gt;
  &lt;li&gt;클라이언트는 재접속시 해당 쿠키를 서버에 보내 세션 id를 서버에 전달한다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠키-vs-세션&quot;&gt;쿠키 vs 세션&lt;/h2&gt;

&lt;p&gt;쿠키와 세션은 보안과 저장위치, 라이프 사이클의 차이가 있다. 쿠키는 브라우저에 저장되어 있기 때문에 서버에 접근할 필요가 없어 응답 속도가 빠른 반면에 데이터가 변질되거나 스니핑 당할 위험이 있어 보안에 취약하다. 세션은 서버에 저장되어 있기 때문에 서버의 접근이 필요하다. 그렇기에 쿠키에 비해 응답 속도가 느린 편이다. 하지만 서버에서 처리하기 때문에 비교적 보안성이 좋다.&lt;/p&gt;

&lt;p&gt;쿠키와 세션 둘 다 만료시간을 정할 수 있다. 세션의 경우에는 만료시간에 상관없이 브라우저가 종료되면 정보가 삭제가 된다. 쿠키의 경우 브라우저를 종료해도 만료시간이 남아 있는 경우 정보가 삭제되지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;캐시&quot;&gt;캐시&lt;/h2&gt;
&lt;p&gt;필요해 하는 데이터를 로컬등에 미리 저장해두어 보다 빠르게 데이터를 받아볼 수 있게 해주는 역할을 한다. (페이지 로딩 속도 개선)  &lt;br /&gt;
캐시를 이용해 cdn같은 서비스도 할 수 있다. cdn은 컨텐츠 즉, 데이터를 배달, 딜리버리해주는 서버이다. 다른 지역에서 데이터를 요청하는 경우 지역 중간의 서버에 미리 올려놓은 데이터에 접근하게 해주어 보다 빠르게 응답을 해줄 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단점      &lt;br /&gt;
 캐시로 인해 저장된 데이터 공간은 영구적인 메모리 공간이 아니기 때문에 데이터가 지워질 수 있다는 것을 유념해야한다. 캐시에 저장되어 있던 파일들이 업데이트가 된 경우 바로바로 업데이트 된 파일을 가져올 수 없을 수 있다는 단점이 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ex) 종종 변경되어야 하는 데이터가 업데이트 되지 않을때가 있다면 캐시가 이유일 수 있다. (캐시는 서버의 캐시클라우드라는 저장공간에 사용자의 의지와 상관없이 자동 저장되기 때문이다) 웹개발시 css가 업데이트 되지 않는 원인 중 하나가 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;session-based-auth-vs-token-based-authjwt&quot;&gt;Session based auth vs Token based auth(JWT)&lt;/h2&gt;
&lt;p&gt;대표적으로 로그인을 할때 로그인이 유지되는 방식은 위의 2가지가 존재한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;session based auth 동작 방식&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;클라이언트가 서버에게 id, pwd를 post요청으로 보낸다&lt;/li&gt;
    &lt;li&gt;서버에서 받은 id,pwd가 db와 일치하게 되면 클라이언트에게 알맞은 응답을 보낸다&lt;/li&gt;
    &lt;li&gt;로그인에 성공하게 되면 서버에서 세션을 생성한다(세션id, 유저id, timeout등의 정보가 담긴다)&lt;/li&gt;
    &lt;li&gt;클라이언트에게 쿠키안에 세션id를 담아서 보낸다&lt;/li&gt;
    &lt;li&gt;이후 클라이언트가 요청을 보낼때 쿠키를 함께 보낸다&lt;/li&gt;
    &lt;li&gt;세션id가 서버안에 존재하면 로그인이 되어졌을때의 페이지를 보여준다&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;session방식의-한계&quot;&gt;session방식의 한계&lt;/h4&gt;
&lt;p&gt;해당 작업은 I/O가 상당히 높은 작업이 된다. 서버 내부에 세션을 RAM이라는 공간에 DB형식으로 저장해 놓는데 이렇게 저장이 되는 경우
사용자가 많아지면 하나의 서버로 해결하기에는 한계가 있다&lt;/p&gt;

&lt;p&gt;세션 전용 DB를 만들어 해당 DB에 세션ID를 저장해두어 사용할 수 있지만 (로드밸런싱의 단점 보완) 모든 트래픽이 DB에 몰리는 문제가 발생한다&lt;/p&gt;

&lt;p&gt;DB를 분배형식으로 나누어 해결할 수 있다&lt;/p&gt;

&lt;p&gt;JWT 토큰 방식을 사용하여 효율적으로 해결 할 수 도 있다&lt;/p&gt;

&lt;h4 id=&quot;token-based-auth-동작-방식&quot;&gt;token based auth 동작 방식&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;클라이언트가 id와 pwd를 서버에 보내고 서버는 해당 값을 받아 인증 한 후 토큰을 발급한다&lt;/li&gt;
  &lt;li&gt;이후 클라이언트는 요청을 할때 해당 토큰을 가지고 데이터를 요청한다&lt;/li&gt;
  &lt;li&gt;서버에서는 해당 토큰이 맞다고 확인되면 그에 맞는 권한을 클라이언트에게 준다 (세션과는 달리 서버에서 내부적으로 세션을 관리하지 않는다)&lt;/li&gt;
  &lt;li&gt;서버에서 토큰이 올바른지만 확인하여 권한을 할당해준다 (오로지 요청안에 들어있는 토큰만을 보고 권한을 준다)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;대표적으로 JWT 토큰이 사용된다. 
(jwt의 포맷은 header(어떤 알고리즘으로 암호화 할것인지) - payload(data등을 넣어준다, Ex) 언제 토큰이 끝나는지 원하는 정보를 넣을 수 있다,  네트워크에 정보가 올라가기 때문에 최소한의 정보를 넣는게 좋다) - signiture(이부분만 암호화 된다.))&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Q1. 다수의 서버를 이용한다는 것은 무엇을 의미하는가&lt;/p&gt;

&lt;p&gt;Q2. 쿠키 헤더에 존재하는 도메인과 경로는 무엇을 말하는가
A2. HTTP 프로토콜의 쿠키헤더에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie: name=value [; expires=date] [; path=path] [; domain=domain] [; secure]&lt;/code&gt;리소스들이 존재한다&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;expires : 쿠키의 만료일 문자열이다. 쿠키의 유효한 날자가 날짜 형식으로 써져있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;domain : 쿠키가 적용되야하는 호스트를 지정한다. 지정하지 않으면 현재 URI를 기준으로 적용된다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;호스트란 ?  &lt;br /&gt;
네트워크에 연결되어 있는 컴퓨터들&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;호스트 설정이란 ?  &lt;br /&gt;
도메인을 호스트의 ip에 연결하는 행위이다
```&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;path : 쿠키 헤더를 서버에서 보내기 전에 요청된 리소스에 있어야하는 url경로를 나타낸다. 즉 path에 지정된 값과 일치하는 url요청에 대해 쿠키를 전송하도록 만드는 옵션이다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;secure : 보안 쿠키를 적용하는 옵션으로 서버에서 요청은 ssl을 사용하며 https를 상용할때만 전송할 수 있다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="network" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">(네트워크) 웹의 기본 동작 방식(작성중…)</title>
      <link href="https://heejung-gjt.github.io/web" rel="alternate" type="text/html" title="(네트워크) 웹의 기본 동작 방식(작성중...)" />
      <published>2021-06-28T16:30:00+09:00</published>
      <updated>2021-06-28T16:30:00+09:00</updated>
      <id>https://heejung-gjt.github.io/web</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/web">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Network 정리 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./structure&quot;&gt;스택과 큐의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./heap&quot;&gt;힙의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/123659425-a23eed80-d86d-11eb-9cb0-26e4fa411e60.png&quot; alt=&quot;network&quot; width=&quot;500&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;웹이-동작하는-방식&quot;&gt;웹이 동작하는 방식&lt;/h2&gt;
&lt;p&gt;클라이언트가 요청을 보내면 서버가 해당 요청을 받아 응답해준다
client는 서비스를 요청하는 프로그램이고 server는 클라이언트의 요청에 대한 응답을 주는 프로그램이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="network" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">HTTP 와 HTTPS</title>
      <link href="https://heejung-gjt.github.io/https" rel="alternate" type="text/html" title="HTTP 와 HTTPS" />
      <published>2021-05-06T14:30:00+09:00</published>
      <updated>2021-05-06T14:30:00+09:00</updated>
      <id>https://heejung-gjt.github.io/https</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/https">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Network 정리 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./structure&quot;&gt;스택과 큐의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./heap&quot;&gt;힙의 특징&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;h2 id=&quot;프로토콜&quot;&gt;프로토콜&lt;/h2&gt;
&lt;p&gt;컴퓨터나 네트워크 장비가 서로 통신하기 위해 미리 정해놓은 약속,규약이다
사람과 사람이 서로 통신할때 이해할수 있는 공통된 언어를 사용하는 것처럼 컴퓨터와 컴퓨터 사이에도 서로 이해할 수 있는 공통된 언어를 사용하는데 이것을 프로토콜이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;/h2&gt;
&lt;p&gt;HTTP는 클라이언트와 서버를 통신해주는 프로토콜이다. 풀어서 서버와 클라이언트 사이에서 이루어지는 요청/응답이다. HTTP는 통신이 암호화 되지 않는 상태로 되기때문에 보안에 취약한 문제점이 있다. 이를 개선한 HTTPS가 등장하였다&lt;/p&gt;

&lt;h4 id=&quot;특징&quot;&gt;특징&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;80번 포트를 사용하며 TCP와 직접 통신하는 방식이다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비연결지향(connectionless)  &lt;br /&gt;
http는 클라이언트가 서버에 요청을 보내고 서버는 클라이언트에게 응답을 준 후 connection을 끊는 특징을 갖는다 (http header에 keep-alive을 통해 연결을 재활용 할 수는 있지만 기본적으로 비연결지향적인 프로토콜이다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;무상태(stateless) &lt;br /&gt;
서버와의 연결이 끊기는 순간 통신이 끝나며 해당 연결의 상태 정보를 유지하지 않는 특징을 갖는다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP의 특성때문에 HTTP는 매 통신마다 새로운 connection을 만들어 인증부터 새롭게 시작해야 하는 상황이 발생한다. =&amp;gt; 이를 해결하기 위해 쿠키와 세션, 토큰방식등을 사용하여 통신을 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;httpshypertext-transfer-protocol-secure&quot;&gt;HTTPS(Hypertext Transfer Protocol Secure)&lt;/h2&gt;
&lt;p&gt;클라이언트와 서버간의 안전한 통신을 위해 데이터를 암호화하여 전송한다.
HTTPS는 클라이언트와 서버간의 통신을 제 3자인 CA가 인증을 해준다.SSL 디지털 인증서를 기준으로 클라이언트가 접속한 서버가 맞는지 확인해준다.&lt;/p&gt;

&lt;h4 id=&quot;특징-1&quot;&gt;특징&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;443포트를 사용하며 http -&amp;gt; ssl -&amp;gt; tcp 순서롤 통신을 하는 방식이다&lt;/li&gt;
  &lt;li&gt;통신 속도가 http보다는 느리지만 보안에는 상대적으로 강하다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-프로토콜&quot;&gt;HTTP 프로토콜&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷 통신을 위해 사용되는 프로토콜이다&lt;/li&gt;
  &lt;li&gt;HTTP프로토콜은 인터넷상에서 데이터를 주고 받기 위한 서버/클라이언트 모델을 따르는 프로토콜이다&lt;/li&gt;
  &lt;li&gt;HTTP프로토콜은 HTML문서와 같은 리소스들을 가져올 수 있도록 해준다&lt;/li&gt;
  &lt;li&gt;HTTP는 서버/클라이언트 모델이다&lt;/li&gt;
  &lt;li&gt;HTTP는 기본적으로 평문 데이터 전송을 원칙으로 하기 때문에 프라이버시가 오가는 서비스에서 사용하기는 어려움이 있다(HTTPS사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-request-method&quot;&gt;HTTP Request Method&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GET : URL에 해당하는 자료의 전송을 요청, 클라이언트가 GET을 보내면 서버에서 그 주소에 해당하는 응답을 보내준다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;POST : 서버가 처리할 수 있는 자료를 전송, 예를 들면 로그인할때 클라이언트가 폼에 아이디와 비밀번호를 입력하면 로그인 될 수 있게 해당되는 자료를 서버에서 처리한 후 결과를 전송해준다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PUT : 해당 URL에 자료를 저장&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DELETE : 해당 URL의 자료를 삭제&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-status-code&quot;&gt;HTTP Status Code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Status&quot;&gt;mdn참고하기&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;200번대&lt;/li&gt;
  &lt;li&gt;300번대&lt;/li&gt;
  &lt;li&gt;400번대&lt;/li&gt;
  &lt;li&gt;500번대&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;url&quot;&gt;URL&lt;/h2&gt;
&lt;p&gt;URL은 서버에 자원(데이터)를 요청하기 위한 주소이다. URL은 URI의 상위개념으로 네트워크 상에서 자원 위치를 알려주기 위한 규약이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssl인증서&quot;&gt;SSL인증서&lt;/h2&gt;
&lt;p&gt;클라이언트와 서버간의 통신을 제3자인 CA가 보증해주는 전자화된 문서이다. SSL은 암호화된 데이터를 전송하기 위해서 공개키와 대칭키를 혼합해서 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인증서의 내용&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;서비스의 정보(인증서를 발급한 CA, 서비스의 도메인)&lt;/strong&gt;&lt;br /&gt;
클라이너트가 접속한 서버가 클라이언트가 의도한 서버가 맞는지에 대한 내용을 담고 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;서버측 공개키(공개키의 내용, 공개키의 암호화 방법)&lt;/strong&gt; &lt;br /&gt;
서버와 통신을 할때 사용할 공개키와 그 공개키의 암호화 방법들의 정보를 담고 있다. 서버의 공개키와 같은 정보는 서비스가 CA로부터 인증서를 구입할때 제출해야 한다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;인증서의 목표&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트가 접속한 서버가 신뢰할 수 있는 서버인지 판단해준다&lt;/li&gt;
  &lt;li&gt;SSL 통신에 사용되는 공개키를 클라이언트에게 전달한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cacertificate-authority&quot;&gt;CA(Certificate Authority)&lt;/h2&gt;
&lt;p&gt;SSL인증서를 기준으로 클라이언트가 서버가 의도한 서버가 맞는지 확인하는 역할을 한다. 이때 이 역할을 하는 공인된 기업을 CA라고 부른다. &lt;strong&gt;SSL을 통해서 암호화된 통신을 제공하려는 서비스는 CA를 통해서 인증서를 구입해야 한다&lt;/strong&gt;   &lt;br /&gt;
인증서를 이해하기 위해서 꼭 알아야 하는것이 CA의 리스트이다. 브라우저는 내부적으로 CA의 리스트를 미리 파악하고 있다. 브라우저가 미리 파악하고 있는 CA의 리스트에 포함되어야만 공인된 CA가 될 수 있다. CA의 리스트와 함께 각 CA의 공개키를 브라우저는 이미 알고 있다.&lt;/p&gt;

&lt;h2 id=&quot;ssltls-handshake&quot;&gt;SSL/TLS Handshake&lt;/h2&gt;
&lt;p&gt;HTTPS는 SSL/TLS 전송기술을 사용한다. TLS는 SSL의 개선버전으로 최신 인증서는 TLS를 사용하지만 SSL인증서라고 불린다. 즉 같은 말이라고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;handshake 과정을 보기 전에 먼저 필요한 암호화 방식을 살펴본다&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;대칭키-암호화-방식&quot;&gt;대칭키 암호화 방식&lt;/h2&gt;
&lt;p&gt;대칭키 암호화 방식은 하나의 키로 데이터를 암호화/복호화를 하는 방식이다.  &lt;br /&gt;
a가 문자가 써져있는 평문을 b에게 보낼때 a,b가 공통적으로 가지고 있는 키로 암호화하여 b에게 암호화된 암호문을 전송한다. 암호문을 받은 b는 공통적으로 가지고 있는 키로 암호문을 복호화하여 실제 내용을 볼 수 있다. 이때 사용되는 키를 &lt;strong&gt;대칭키&lt;/strong&gt; 라고 부르며 이 방식을 대칭키 암호화 방식이라고 부른다.  &lt;br /&gt;
하지만 만약 둘 중 한명이 키를 도난,분실하면 다른 누군가가 복호화하여 볼 수 있는 단점이 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/117237085-21fb9d80-ae65-11eb-8886-751781a4e618.png&quot; alt=&quot;대칭키&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;공개키-암호화-방식&quot;&gt;공개키 암호화 방식&lt;/h2&gt;
&lt;p&gt;공개키 암호화 방식은 대칭키와 달리 &lt;strong&gt;공개키&lt;/strong&gt; 와 &lt;strong&gt;개인키&lt;/strong&gt; 를 한쌍으로 묶어 암호화와 복호화에 사용한다. 보통 공개키로 평문을 암호화하여 전송하고 개인키로 암호문을 복호화한다. b가 a에게 데이터를 전달받고 싶을때 b가 먼저 개인키와 공개키를 생성한후 공개키를 a에게 전달한다. 이 후 b의 공개키를 받은 a는 평문을 b의 공개키로 암호화하여 b에게 전달한다. b는 전달받은 암호문을 자신의 개인키로 복호화한다.&lt;/p&gt;

&lt;p&gt;공개키는 누구에게나 공개될 수 있는 키이다. 하지만 개인키는 자기자신만이 가지고 있으므로 공개키로 암호화된 문서를 복호화하기 위해서는 개인키를 소지하고 있는 사람만이 볼 수 있다. 그렇게 때문에 개인키는 안전하게 보관되어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/117237629-4f951680-ae66-11eb-8d92-017db7dec12f.png&quot; alt=&quot;공개키&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssltls-handshake-동작-과정&quot;&gt;SSL/TLS Handshake 동작 과정&lt;/h2&gt;
&lt;p&gt;SSL방식을 이용해 통신을 하는 브라우저와 서버는 Handshake를 하는데 이때 SSL인증서를 주고 받는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/117244784-a73a7e80-ae74-11eb-8d9d-693bdc6f45cc.png&quot; alt=&quot;핸드세이크&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;먼저 클라이언트가 요청을 보낼 서버가 원하는 서버가 맞는지를 확인하기 위해 client hello단계에서 &lt;strong&gt;브라우저가 지원하는 암호화 방식 모음(cipher suite)&lt;/strong&gt; 과 &lt;strong&gt;랜덤한 난수&lt;/strong&gt; 등을 보낸다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트의 요청을 받은 서버는 server hello단계에서 브라우저가 보낸 암호화 방식 중 하나를 선택해 &lt;strong&gt;서버의 공개키 와 CA의 개인키로 암호화되어 발급된 SSL인증서&lt;/strong&gt;, &lt;strong&gt;랜덤한 난수&lt;/strong&gt;, &lt;strong&gt;클라이언트 인증서 요청&lt;/strong&gt; 등을 보낸다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버의 데이터를 받은 클라이언트는 서버에서 보낸 SSL인증서가 자신의 CA리스트에 있는 공개키로 복호화 되는지를 확인한 후 복호화가 되면 정상적인 서버에서 온 응답이라는 걸 인식한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 그후 데이터를 안전하게 주고받을수 있게 자신이 생성한 랜덤한 난수와 서버의 난수를 사용해 premaster secret을 만들어 서버의 공개키로 암호화 하여 서버로 전송한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버는 자신의 개인키로 클라이언트가 보낸 premaster secret값을 복호화 하여 master secret값으로 저장한다. 이를 이용해 session key를 생성하고 이 세션키는 대칭키 암호화해 사용이 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSL handshake가 정상적으로 완료되고 이제 웹 상에서 데이터를 대칭키를 이용해 암호화 복호화를 하며 HTTPS 프로토콜을 통해 주고받는다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Q1. HTTPS는 Stateful인가 Stateless인가. handshake과정은 매번 발생하는 것인가?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://opentutorials.org/course/228/4894&quot;&gt;referance- 생활코딩&lt;/a&gt;
&lt;a href=&quot;https://blog.naver.com/PostView.nhn?blogId=sehyunfa&amp;amp;logNo=221812730631&amp;amp;categoryNo=19&amp;amp;parentCategoryNo=0&amp;amp;viewDate=&amp;amp;currentPage=1&amp;amp;postListTopCurrentPage=1&amp;amp;from=postView&quot;&gt;referance- blog&lt;/a&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="network" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
