<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/tag/til/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2021-05-06T22:15:32+09:00</updated>
  <id>https://heejung-gjt.github.io/tag/til/feed.xml</id>

  
  
  

  
    <title type="html">Studying  Develop | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">210421-TIL</title>
      <link href="https://heejung-gjt.github.io/til40" rel="alternate" type="text/html" title="210421-TIL" />
      <published>2021-04-21T16:00:04+09:00</published>
      <updated>2021-04-21T16:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til40</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til40">&lt;h2 id=&quot;-공부한-내용&quot;&gt;👉 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-백준-알고리즘--1문제---문자열&quot;&gt;✔ 백준 알고리즘  1문제 - 문자열&lt;/h4&gt;

&lt;h4 id=&quot;--장고-urlspy-viewspy-templates의-구조&quot;&gt;✔  장고 urls.py, views.py, templates의 구조&lt;/h4&gt;

&lt;h4 id=&quot;--장고-실습---요청받은-데이터-가공하여-출력하기&quot;&gt;✔  장고 실습 - 요청받은 데이터 가공하여 출력하기&lt;/h4&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210420-TIL</title>
      <link href="https://heejung-gjt.github.io/til39" rel="alternate" type="text/html" title="210420-TIL" />
      <published>2021-04-20T16:00:04+09:00</published>
      <updated>2021-04-20T16:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til39</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til39">&lt;h2 id=&quot;-공부한-내용&quot;&gt;👉 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-백준-알고리즘-5문제---문자열&quot;&gt;✔ 백준 알고리즘 5문제 - 문자열&lt;/h4&gt;

&lt;h4 id=&quot;--파이썬-스크래핑---원티드-원하는-정보-json이용해-스크래핑하기&quot;&gt;✔  파이썬 스크래핑 - 원티드 원하는 정보 json이용해 스크래핑하기&lt;/h4&gt;

&lt;h4 id=&quot;--장고-가상환경-설치-기본-구조-실습&quot;&gt;✔  장고 가상환경, 설치, 기본 구조 실습&lt;/h4&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210419-TIL(자바스크립트 클래스, es6메서드)</title>
      <link href="https://heejung-gjt.github.io/til38" rel="alternate" type="text/html" title="210419-TIL(자바스크립트 클래스, es6메서드)" />
      <published>2021-04-19T16:00:04+09:00</published>
      <updated>2021-04-19T16:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til38</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til38">&lt;h2 id=&quot;-공부한-내용&quot;&gt;👉 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-자바스크립트-클래스-es6-메서드&quot;&gt;✔ ~&lt;del&gt;자바스크립트 클래스, ES6 메서드&lt;/del&gt;~&lt;/h4&gt;

&lt;h4 id=&quot;--단방향-연결리스트-양뱡향-연결리스트-구현&quot;&gt;✔  ~&lt;del&gt;단방향 연결리스트, 양뱡향 연결리스트 구현&lt;/del&gt;~&lt;/h4&gt;

&lt;h4 id=&quot;--프로그래머스-강의-part7--part10&quot;&gt;✔  ~&lt;del&gt;프로그래머스 강의 part7 ~ part10&lt;/del&gt;~&lt;/h4&gt;

&lt;h4 id=&quot;--python-scrapping-실습&quot;&gt;✔  ~&lt;del&gt;python scrapping 실습&lt;/del&gt;~&lt;/h4&gt;

&lt;h4 id=&quot;-csv-변환-연습&quot;&gt;✔ ~&lt;del&gt;csv 변환 연습&lt;/del&gt;~&lt;/h4&gt;

&lt;h4 id=&quot;-멜론-차트-스크래핑-csv변환-실습&quot;&gt;✔ ~&lt;del&gt;멜론 차트 스크래핑, csv변환 실습&lt;/del&gt;~&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;--정리-내용&quot;&gt;👉  정리 내용&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;클래스&quot;&gt;클래스&lt;/h2&gt;
&lt;h3 id=&quot;1es5에서의-생성자-함수&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1.ES5에서의 생성자 함수&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;자바스크립트는 프로토타입 기반 객체지향 언어이다. 클래스가 필요없는 객체지향 프로그래밍 언어이기 때문에 클래스 없이도 아래와 같이 생성자 함수와 프로토타입을 통해 구현할 수 있다
&lt;br /&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 생성자 함수&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 프로토타입 메서드&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi my name is '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 생성자 함수 반환&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 인스턴스 생성&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Lee'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;위의-코드의-단점&quot;&gt;위의 코드의 단점&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;프로토타입기반 프로그래밍 방식이 생소하기 때문에 어렵게 느낄 수 있다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2es6에-도입된-클래스&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2.ES6에 도입된 클래스&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;클래스-정의&quot;&gt;클래스 정의&lt;/h4&gt;
&lt;p&gt;클래스는 class 키워드를 사용하여 정의한다. 클래스 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;파스칼케이스&lt;/code&gt;를 사용하는 것이 일반적이다.
일반적이지는 않지만 표현식으로 클래스를 정의할 수 있다. 즉 클래스를 표현식으로 정의할 수 있다는 것은 클래스가 값으로 사용할 수 있는 일급객체라는 것을 의미한다
&lt;code class=&quot;highlighter-rouge&quot;&gt;const Person = class {};&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 클래스 선언문&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;변수나 자료구조(객체,배열)에 저장할 수 있다&lt;/p&gt;

  &lt;p&gt;함수의 매개변수에 전달할 수 있다&lt;/p&gt;

  &lt;p&gt;함수의 반환값으로 사용할 수 있다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;클래스-몸체&quot;&gt;클래스 몸체&lt;/h3&gt;
&lt;p&gt;0개 이상의 메서드만 정의할 수 있다. 클래스 몸체에서 정의할 수 있는 메서드는 세가지가 있다
&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor(생성자)&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;프로토타입 메서드&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;정적메서드&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;constructor&lt;/strong&gt;  &lt;br /&gt;
인스턴스를 생성하고 초기화하기 위한 메서드이다.이름을 바꿀수 없으며 클래스내 최대 한개만 존재할 수 있다. 생략하게 되면 빈 constructor가 암무적으로 정의된다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;프로토타입 메서드&lt;/strong&gt;  &lt;br /&gt;
생성자 함수를 사용하여 인스턴스를 생성하는 경우, 프로토타입 메서드를 생성하기 위해서는 명시적으로 프로토타입에 메서드를 추가해야 하지만 클래스 몸체에서 정의한 메서드는 프로퍼티 메서드를 추가하지 않아도 기본적으로 프로토타입 메서드가 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;정적메서드&lt;/strong&gt;      &lt;br /&gt;
정적메서드는 인스턴스를 생성하지 않아도 호출할 수 있는 메서드를 말한다. 메서드에 static 키워드를 붙이면 정적메서드가 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//클래스 선언문&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//생성자&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
    python 생성자
    def __init__(self,name):
      self.name = name
    */&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sayHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`hi &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*
  python 메서드
  def say_hi(self):
    print('f'hi {this.name}'')
  */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//정적메서드&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;클래스-호이스팅&quot;&gt;클래스 호이스팅&lt;/h3&gt;
&lt;p&gt;클래스는 함수로 평가된다. 함수 선언문과 같이 런타임 이전에 먼저 평가되어 함수 객체를 생성한다. 클래스가 평가되어 생성된 함수객체는 &lt;code class=&quot;highlighter-rouge&quot;&gt;생성자 함수&lt;/code&gt;로서 호출할 수 있는 함수 즉 constructor이다.
단, 클래스는 클래스 정의 이전에 참조할 수 없다&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇듯 클래스 선언문은 마치 호이스팅이 발생하지 않는것처럼 보이지만 그렇지 않다. 클래스 선언문도 변수 선언, 함수정의와 마찬가지로 호이스팅이 발생한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;단 클래스는 let, const키워드로 선언한 변수처럼 호이스팅된다&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;인스턴스-생성&quot;&gt;인스턴스 생성&lt;/h3&gt;
&lt;p&gt;클래스는 생성자 함수이며 new연산자와 함께 호출되어 인스턴스를 생성한다. 클래스는 인스턴스를 생성하는 것이 유일한 존재 이유이기 때문에 반드시 new연산자와 함께 호출해야한다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Person {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;new연산자와 함께 클래스를 호출하면 3가지의 과정을 거쳐 인스턴스가 생성된다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인스턴스 생성과 this바인딩  &lt;br /&gt;
new 연산자와 함께 클래스를 호출하면 constructor의 내부 코드가 실행되기에 앞서 암묵적으로 빈 객체가 생성된다. 이 빈 객체가 바로 클래스가 생성한 인스턴스이다. 이 빈 객체 즉 인스턴스는 this에 바인딩된다. 따라서 contructor 내부의 this는 클래스가 생성한 인스턴스를 가리킨다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;인스턴스 초기화  &lt;br /&gt;
constructor의 내부코드가 실행되어 This에 바인딩되어 있는 인스턴스를 인수로 전달받은 초기값으로 인스턴스의 프로퍼티값을 초기화한다 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.name = name&lt;/code&gt;
-&amp;gt; 초기화 과정은 constructor가 생략되었다면 생략되며 암묵적으로 빈 객체를 생성한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;인스턴스 반환  &lt;br /&gt;
클래스의 모든 처리가 끝나면 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환된다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;함수의-구분&quot;&gt;함수의 구분&lt;/h2&gt;
&lt;p&gt;ES6이전의 모든 함수는 일반함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// foo{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 메서드로서 호출&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;메서드&quot;&gt;메서드&lt;/h3&gt;
&lt;p&gt;일반적인 메서드는 객체에 바인딩된 함수를 일컫는 의미로 사용되었지만 es6사양에서 메서드는 메서드 축약 표현으로 정의된 함수만을 의미한다
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;화살표-함수&quot;&gt;화살표 함수&lt;/h2&gt;
&lt;p&gt;화살표 함수는 function 키워드 대신 화살표를 사용하여 기존의 함수 정의 방식보다 간략하게 함수를 정의할 수 있다
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정의&quot;&gt;정의&lt;/h3&gt;
&lt;p&gt;화살표 함수는 함수 선언문으로 정의할 수 없고 함수 표현식으로 정의해야 한다&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;매개변수-선언&quot;&gt;매개변수 선언&lt;/h3&gt;
&lt;p&gt;매개변수가 여러개인 경우 ()안에 매개변수를 선언한다. 매개변수가 한개인 경우 ()를 생략할 수 있다. 매개변수가 없는 경우에는 ()를 생략할 수 없다&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;함수-몸체-정의&quot;&gt;함수 몸체 정의&lt;/h3&gt;
&lt;p&gt;함수 몸체가 하나의 문으로 구성된다면 {}를 생략할 수 있다. 이때 함수 몸체 내부의 문이 값으로 평가될수 있는 표현식인 문이라면 암묵적으로 반환된다&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;power&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//동일&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;power&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;{}를 생략한 경우 함수 몸체 내부의 문이 표현식이 아닌 문이라면 에러가 발생한다. 표현식이 아닌 문은 반환할 수 없기 때문이다
즉 함수 몸체가 하나의 문으로 구성된다 해도 함수 몸체의 문이 표현식이 아닌 문이라면 중괄호를 생략할 수 없다&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rest-파라미터&quot;&gt;Rest 파라미터&lt;/h2&gt;
&lt;p&gt;rest파라미터는 함수에 전달된 인수들의 목록을 배열로 전달받는다.매개변수 이름 앞에 세개의 점을 붙여서 정의한 매개변수를 의미한다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//[1,2,3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일반 매개변수와 Rest 파리미터는 같이 사용될 수 있다. 이때 함수에 전달된 인수들은 매개변수에 Rest파라미터에 순차적으로 할당된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//[2,3,4,5]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rest파라미터는 먼저 선언된 매개변수에 할당된 인수를 제외한 나머지 인수들로 구성된 배열이 할당된다. 따라서 rest파라미터는 반드시 마지막 파라미터이어야 한다&lt;/p&gt;
&lt;h2 id=&quot;arguments-객체&quot;&gt;arguments 객체&lt;/h2&gt;
&lt;p&gt;arguments 객체는 함수 호출시 전달된 인수들의 정보를 담고 있는 순회가능한 유사배열객체이다. 유사배열객체를 rest파라미터를 사용하여 배열로 변환할 수 있다
화살표함수는 함수 자체의 Arguments객체를 가지고 있지 않기때문에 화살표함수로 가변인자함수를 구현해야 할땐 Rest파라미터를 사용한다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210415-TIL(알고리즘 - 배열, 연결리스트, 스택)</title>
      <link href="https://heejung-gjt.github.io/til37" rel="alternate" type="text/html" title="210415-TIL(알고리즘 - 배열, 연결리스트, 스택)" />
      <published>2021-04-15T16:00:04+09:00</published>
      <updated>2021-04-15T16:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til37</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til37">&lt;h2 id=&quot;배열arrays-과-리스트list&quot;&gt;배열(Arrays) 과 리스트(List)&lt;/h2&gt;

&lt;h4 id=&quot;배열이란&quot;&gt;배열이란&lt;/h4&gt;

&lt;p&gt;같은 종류의 데이터를 효율적으로 관리하고 순차적으로 저장하여 처리하기 위해 사용하는 자료구조이다&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;배열-특징&quot;&gt;배열 특징&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;생성될때 크기가 정해진다(정적할당)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스를 활용하여 자료에 빠르게 접근이 가능하다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배열의 모든 아이템들은 똑같은 사이즈를 갖는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아이템이 메모리상에 연속적으로 위치해 있다
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;배열-장점&quot;&gt;배열 장점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스로 아이템에 빠르게 접근이 가능하다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아이템의 메모리주소가 연속적이므로 메모리 관리가 편하다  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;배열-단점&quot;&gt;배열 단점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;배열의 길이는 생성될때 정해지기 때문에 변경할 수 없으며 배열의 크기를 변경하고 싶을때마다 새로운 배열을 만들어야 한다(데이터 추가, 삭제 불편)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;요소를 삭제하면 배열에 빈 틈이 생겨 메모리가 낭비된다 (실제로는 요소삭제가 불가능)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;리스트란&quot;&gt;리스트란&lt;/h4&gt;

&lt;p&gt;파이썬에서 사용되는 자료구조로 배열과 비슷한 기능을 하지만 배열 자료구조와는 다르며 고수준의 기능을 포함한다. 
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;리스트-특징&quot;&gt;리스트 특징&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;생성되는 아이템이 불연속적으로 메모리 공간을 차지한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;포인터를 통해 데이터에 접근한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스는 단순히 아이템이 몇번째 데이터인가를 의미한다&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;리스트-장점&quot;&gt;리스트 장점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;포인터를 통해 데이터에 접근하기 때문에 데이터 삭제,삽입이 용이하다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;생성될때 크기가 정해져 있지 않기 때문에(동적할당) 메모리 재사용이 편리하다  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;리스트-단점&quot;&gt;리스트 단점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;리스트는 데이터에 직접적인 접근이 불가능하고 몇번째인지 처음부터 찾아야 하므로 검색 성능이 좋지 않다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;array-list-implementation&quot;&gt;Array List implementation&lt;/h2&gt;

&lt;h3 id=&quot;구현-조건&quot;&gt;구현 조건&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;class와 array.array를 이용하여 Array List를 구현한다.
    &lt;ul&gt;
      &lt;li&gt;데이터의 타입은 l(signed long)으로 한다.&lt;/li&gt;
      &lt;li&gt;array.array 객체의 메소드는 아래 메소드만을 사용한다.
        &lt;ul&gt;
          &lt;li&gt;arr&lt;a href=&quot;인덱스로 접근&quot;&gt;ind&lt;/a&gt;, arr&lt;a href=&quot;슬라이싱&quot;&gt;ind:&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;array.array의 용량(capacity)은 고정되어 있다고 가정한다.
    &lt;ul&gt;
      &lt;li&gt;배열의 크기가 부족할 때 마다 2배 길이의 array.array를 새로 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다음과 같은 리스트 ADT의 연산자를 구현해야 한다.
    &lt;ul&gt;
      &lt;li&gt;비어있는 리스트를 생성하는 생성자&lt;/li&gt;
      &lt;li&gt;리스트가 비어있는지 확인하는 연산자&lt;/li&gt;
      &lt;li&gt;리스트의 앞에 개체를 삽입(prepending)하는 연산자&lt;/li&gt;
      &lt;li&gt;리스트의 뒤에 개체를 삽입(appending)하는 연산자&lt;/li&gt;
      &lt;li&gt;리스트의 첫 머리(head)를 결정하는 연산자&lt;/li&gt;
      &lt;li&gt;주어진 인덱스에 해당하는 요소에 접근하는 연산자&lt;/li&gt;
      &lt;li&gt;주어진 인덱스에 새로운 요소를 삽입하는 연산자&lt;/li&gt;
      &lt;li&gt;주어진 인덱스에 해당하는 요소를 제거하는 연산자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/Algorithm/Array_practice/array.py&quot;&gt;실습보러가기&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;선형탐색순차탐색&quot;&gt;선형탐색(순차탐색)&lt;/h2&gt;
&lt;p&gt;순서대로 비교하면서 찾는다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;linear_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이진탐색&quot;&gt;이진탐색&lt;/h2&gt;
&lt;p&gt;이미 정렬되어 있는 경우만 적용되는 탐색기법으로 반씩 쪼개어 비교하면서 찾는다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binary_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;연결리스트&quot;&gt;연결리스트&lt;/h2&gt;
&lt;p&gt;데이터와 다음 노드의 주소를 담고 있는 노드들이 한줄로 연결되어 있는 방식의 자료구조&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;연결리스트는 데이터 원소들을 순서를 지어 늘어놓는다는 점에서 배열과 비슷한점이 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연결리스트는 각 원소들을 줄줄이 엮어서 관리하는 방식이다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연결리스트는 원소들이 링크라고 부르는 고리로 연결되어 있기 때문에 데이터를 삭제하거나 삽입하는것이 배열보다 쉽다(시간이 빠르다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자료의 순서는 정해져있으나 메모리상 연속성이 보장되지 않는다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;장점&quot;&gt;장점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 삽입이 간단하다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;항목 생성 후 포인터 값만 변경해주면 된다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;단점&quot;&gt;단점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;선형 배열에 비해 데이터 구조 표현에 소요되는 저장공간, 즉 메모리 소요가 크다. 데이터를 연결하는 링크도 메모리에 저장되어 있어야 하므로 메모리 요구량이 크다는 단점이 있다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;순차적으로 탐색되기 때문에 원하는 데이터를 찾기까지 더 오랜 시간이 걸리는 단점이 있다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;자료구조-모습&quot;&gt;자료구조 모습&lt;/h4&gt;

&lt;p&gt;연결리스트는 데이터를 노드의 형태로 저장한다. 노드에는 데이터와 다음 노드를 가르키는 포인터를 담은 구조로 이루어져 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;단뱡향-연결-리스트singly-linked-list-구현&quot;&gt;단뱡향 연결 리스트(Singly linked list) 구현&lt;/h2&gt;

&lt;p&gt;그림과 같이 연결리스트는 각 노드에 자료공간과 한개의 포인터 공간이 있고 각 노드의 포인터는 다음 노드를 가리키는 역할을 한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/114816078-665dc580-9df2-11eb-9640-d03f2bb2e279.png&quot; alt=&quot;연결리스트&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;스택stack&quot;&gt;스택(stack)&lt;/h2&gt;
&lt;p&gt;자료를 보관할 수 있는 (선형)구조이다. 데이터를 넣을때는(push)한 쪽 끝에서 밀어 넣어야 하고 꺼낼 때에는 같은 쪽에서 뽑아 꺼내야 하는(pop) 후입선출 자료구조이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;스택에서-발생하는-오류&quot;&gt;스택에서 발생하는 오류&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;비어있는 스택에서 데이터 원소를 꺼내려 할때 생기는 오류 : 스택 언더플로우&lt;/li&gt;
  &lt;li&gt;꽉 차있는 스택에 데이터 원소를 넣으려 할때 생기는 오류 : 스택 오버플로우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;스택의-추상적-자료구조-구현&quot;&gt;스택의 추상적 자료구조 구현&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;배열을 이용하여 구현 : python 리스트와 메서드를 이용
    &lt;blockquote&gt;
      &lt;p&gt;size() : 현재 스택에 들어있는 데이터 원소의 수를 구한다   &lt;br /&gt;
isEmpty() : 현재 스택이 비어 있는지를 판단   &lt;br /&gt;
push(x) : 데이터 원소 x를 스택에 추가  &lt;br /&gt;
pop() : 스택의 맨 위에 저장된 데이터 원소를 제거    &lt;br /&gt;
peek() : 스택의 맨 위에 저장된 데이터 원소를 반환(제거x)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#빈 스택을 초기화한다&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#스택이 비어 있는지 판단&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#bool탕입을 리턴해준다 &lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 스택의 맨위에 있는 값 반환&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;연결리스트를 이용하여 구현 : 양방향 연결 리스트를 이용(이후에 해보기)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;스택의-응용---수식의-후위-표기법&quot;&gt;스택의 응용 - 수식의 후위 표기법&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;중위 표기법&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(A + B) * (C + D)&lt;/code&gt;  : 연산자가 피연산자들의 사이에 위치한다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;후위 표기법&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AB+CD+*&lt;/code&gt; : 연산자가 피연산자들의 뒤에 위치한다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;스택을 이용해 중위 표현식을 후위 표현식으로 바꾸는 실습을 해보자&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;알고리즘의 설계
    &lt;ul&gt;
      &lt;li&gt;연산자의 우선순위 설정
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;prec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;중위 표현식을 왼쪽부터 한 글자씩 읽어서 피연산자이면 그냥 출력한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;’(‘이면 스택에 push, ‘)’이면 ‘(‘이 나올때까지 스택에서 pop, 출력한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연산자이면 스택에서 이보다 높거나 같은 우선순위을 것들은 pop해주고 출력한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그 후 이 연산자는 스택에 push한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스택에 남아 있는 연산자는 모두 pop하고 출력한다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210318-TIL</title>
      <link href="https://heejung-gjt.github.io/til34" rel="alternate" type="text/html" title="210318-TIL" />
      <published>2021-03-18T14:00:04+09:00</published>
      <updated>2021-03-18T14:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til34</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til34">&lt;h2 id=&quot;--오늘-공부한-내용&quot;&gt;👉  오늘 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;정리한-내용-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/javascript/day5.md&quot;&gt;정리한 내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;함수 호출
    &lt;ul&gt;
      &lt;li&gt;일반적인 함수로서 호출&lt;/li&gt;
      &lt;li&gt;생성장 함수로서 호출&lt;/li&gt;
      &lt;li&gt;메서드로서 호출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메서드&lt;/li&gt;
  &lt;li&gt;화살표 함수&lt;/li&gt;
  &lt;li&gt;rest 파라미터&lt;/li&gt;
  &lt;li&gt;매개변수 기본값&lt;/li&gt;
  &lt;li&gt;배열&lt;/li&gt;
  &lt;li&gt;자료구조 배열과 js배열&lt;/li&gt;
  &lt;li&gt;배열리터럴&lt;/li&gt;
  &lt;li&gt;희소배열&lt;/li&gt;
  &lt;li&gt;배열추가,삭제,갱신&lt;/li&gt;
  &lt;li&gt;배열 메서드
    &lt;ul&gt;
      &lt;li&gt;mutator 메서드&lt;/li&gt;
      &lt;li&gt;accessor 메서드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스프레드 문법&lt;/li&gt;
  &lt;li&gt;얕은/깊은복사&lt;/li&gt;
  &lt;li&gt;프로토타입 체인&lt;/li&gt;
  &lt;li&gt;Array.isArray&lt;/li&gt;
  &lt;li&gt;리터럴로 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-0318-해야-할-일&quot;&gt;🌟 0318 해야 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;~&lt;del&gt;js 복습/예습&lt;/del&gt;~&lt;/li&gt;
  &lt;li&gt;html/css (nav,aboutme) 리펙토링&lt;/li&gt;
  &lt;li&gt;알고리즘 기초 (3문제 이상)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210316-TIL</title>
      <link href="https://heejung-gjt.github.io/til33" rel="alternate" type="text/html" title="210316-TIL" />
      <published>2021-03-16T14:00:04+09:00</published>
      <updated>2021-03-16T14:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til33</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til33">&lt;h2 id=&quot;--오늘-공부한-내용&quot;&gt;👉  오늘 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;중첩함수&lt;/li&gt;
  &lt;li&gt;콜백함수
    &lt;ul&gt;
      &lt;li&gt;고차함수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;순수함수와 비순수함수&lt;/li&gt;
  &lt;li&gt;스코프
    &lt;ul&gt;
      &lt;li&gt;전역코드&lt;/li&gt;
      &lt;li&gt;함수코드&lt;/li&gt;
      &lt;li&gt;스코프 체인 과정&lt;/li&gt;
      &lt;li&gt;함수레벨 스코프&lt;/li&gt;
      &lt;li&gt;렉시컬 스코프&lt;/li&gt;
      &lt;li&gt;전역변수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;let과 const
    &lt;ul&gt;
      &lt;li&gt;var의 단점&lt;/li&gt;
      &lt;li&gt;let,const 장점&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;변수와 상수&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정리내용-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/javascript/day4.md&quot;&gt;정리내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-실습---마크업&quot;&gt;🌟 실습 - 마크업&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;html/css 스타벅스 마크업&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정리내용-보러가기-1&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/HTML5-CSS3/tree/master/%EC%8A%A4%ED%83%80%EB%B2%85%EC%8A%A4%20%EB%A9%94%EC%9D%B8%20%ED%8E%98%EC%9D%B4%EC%A7%80%20%EB%A7%88%ED%81%AC%EC%97%85&quot;&gt;정리내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-0318-해야-할-일&quot;&gt;🌟 0318 해야 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;~&lt;del&gt;js 복습/예습&lt;/del&gt;~&lt;/li&gt;
  &lt;li&gt;html/css (nav,aboutme) 리펙토링&lt;/li&gt;
  &lt;li&gt;알고리즘 기초 (3문제 이상)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210315-TIL</title>
      <link href="https://heejung-gjt.github.io/til32" rel="alternate" type="text/html" title="210315-TIL" />
      <published>2021-03-15T14:00:04+09:00</published>
      <updated>2021-03-15T14:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til32</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til32">&lt;h2 id=&quot;--오늘-공부한-내용&quot;&gt;👉  오늘 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수&lt;/li&gt;
  &lt;li&gt;함수정의&lt;/li&gt;
  &lt;li&gt;함수 네이밍&lt;/li&gt;
  &lt;li&gt;함수 선언문&lt;/li&gt;
  &lt;li&gt;함수 표현식&lt;/li&gt;
  &lt;li&gt;함수 리터럴&lt;/li&gt;
  &lt;li&gt;함수 호이스팅&lt;/li&gt;
  &lt;li&gt;일반객체와 함수객체&lt;/li&gt;
  &lt;li&gt;파라미터와 알규먼트&lt;/li&gt;
  &lt;li&gt;arguments 객체&lt;/li&gt;
  &lt;li&gt;가변인자 함수&lt;/li&gt;
  &lt;li&gt;참조에 의한 전달&lt;/li&gt;
  &lt;li&gt;즉시 실행 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정리내용-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/javascript/day4.md&quot;&gt;정리내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-0316-해야-할-일&quot;&gt;🌟 0316 해야 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;~&lt;del&gt;js 복습/예습&lt;/del&gt;~&lt;/li&gt;
  &lt;li&gt;~&lt;del&gt;html/css 스타벅스 마크업&lt;/del&gt;~&lt;/li&gt;
  &lt;li&gt;html/css (nav,aboutme) 리펙토링&lt;/li&gt;
  &lt;li&gt;알고리즘 기초 (3문제 이상)&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210314-TIL</title>
      <link href="https://heejung-gjt.github.io/til31" rel="alternate" type="text/html" title="210314-TIL" />
      <published>2021-03-14T12:00:04+09:00</published>
      <updated>2021-03-14T12:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til31</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til31">&lt;h2 id=&quot;--오늘-공부한-내용&quot;&gt;👉  오늘 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;논리연산자(&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;객체&lt;/li&gt;
  &lt;li&gt;this의 역할
    &lt;ul&gt;
      &lt;li&gt;프로퍼티&lt;/li&gt;
      &lt;li&gt;프로퍼티 네이밍&lt;/li&gt;
      &lt;li&gt;프로퍼티 접근 2가지&lt;/li&gt;
      &lt;li&gt;프로퍼티 값 갱신과 이유&lt;/li&gt;
      &lt;li&gt;객체 리터럴&lt;/li&gt;
      &lt;li&gt;메서드&lt;/li&gt;
      &lt;li&gt;프로퍼티 축약표현(중요)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원시타입과 객체타입&lt;/li&gt;
  &lt;li&gt;가비지 콜렉터&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정리내용-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/javascript/day03.md&quot;&gt;정리내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;--실습---문제풀이&quot;&gt;👉  실습 - 문제풀이&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;자바스크립트 제어문 20문제&lt;/li&gt;
  &lt;li&gt;html/css(header,nav) 리펙토링&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;실습-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/tree/master/javascript/day2-exercise&quot;&gt;실습 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-0315-해야-할-일&quot;&gt;🌟 0315 해야 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;js 복습&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210312-TIL</title>
      <link href="https://heejung-gjt.github.io/til30" rel="alternate" type="text/html" title="210312-TIL" />
      <published>2021-03-12T12:00:04+09:00</published>
      <updated>2021-03-12T12:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til30</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til30">&lt;h2 id=&quot;--오늘-공부한-내용&quot;&gt;👉  오늘 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;false/true value&lt;/li&gt;
  &lt;li&gt;코드블록&lt;/li&gt;
  &lt;li&gt;for(;;){}&lt;/li&gt;
  &lt;li&gt;for문 실행 순서&lt;/li&gt;
  &lt;li&gt;while문의 스택오버플로우&lt;/li&gt;
  &lt;li&gt;break문과 continue의 기능&lt;/li&gt;
  &lt;li&gt;마침표/중괄호 표기법&lt;/li&gt;
  &lt;li&gt;타입변환
    &lt;ul&gt;
      &lt;li&gt;명시적 타입변환&lt;/li&gt;
      &lt;li&gt;암묵적 타입변환&lt;/li&gt;
      &lt;li&gt;부수효과&lt;/li&gt;
      &lt;li&gt;x+’’ 와 ‘10’+2&lt;/li&gt;
      &lt;li&gt;false로 평가되는 falsy(?)값&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단축평가(개념만 간단히)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정리내용-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/javascript/day03.md&quot;&gt;정리내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-0314-해야-할-일&quot;&gt;🌟 0314 해야 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;js 복습&lt;/li&gt;
  &lt;li&gt;js 문제풀이&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">210311-TIL</title>
      <link href="https://heejung-gjt.github.io/til29" rel="alternate" type="text/html" title="210311-TIL" />
      <published>2021-03-11T12:00:04+09:00</published>
      <updated>2021-03-11T12:00:04+09:00</updated>
      <id>https://heejung-gjt.github.io/til29</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til29">&lt;h2 id=&quot;--오늘-공부한-내용&quot;&gt;👉  오늘 공부한 내용&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;할당과 재할당&lt;/li&gt;
  &lt;li&gt;메모리 관리
    &lt;ul&gt;
      &lt;li&gt;바인딩&lt;/li&gt;
      &lt;li&gt;allocate&lt;/li&gt;
      &lt;li&gt;release&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원시타입과 참조타입&lt;/li&gt;
  &lt;li&gt;네이밍 컨벤션&lt;/li&gt;
  &lt;li&gt;표현식
    &lt;ul&gt;
      &lt;li&gt;값&lt;/li&gt;
      &lt;li&gt;리터럴&lt;/li&gt;
      &lt;li&gt;표현식&lt;/li&gt;
      &lt;li&gt;문&lt;/li&gt;
      &lt;li&gt;토큰&lt;/li&gt;
      &lt;li&gt;표현식인 문과 아닌문&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;템플릿 리터럴&lt;/li&gt;
  &lt;li&gt;연산자&lt;/li&gt;
  &lt;li&gt;제어문&lt;/li&gt;
  &lt;li&gt;콜백함수(예정)&lt;/li&gt;
  &lt;li&gt;[예습]
    &lt;ul&gt;
      &lt;li&gt;타입 변환과 단축 평가&lt;/li&gt;
      &lt;li&gt;객체 리터럴&lt;/li&gt;
      &lt;li&gt;원시값과 객체의 비교&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;문제풀이&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;제어문 문제풀이&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;백준 알고리즘 1문제&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;정리내용-보러가기&quot;&gt;&lt;a href=&quot;https://github.com/heejung-gjt/TIL/blob/master/javascript/day02.md&quot;&gt;정리내용 보러가기&lt;/a&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-0312-해야-할-일&quot;&gt;🌟 0312 해야 할 일&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;js 복습&lt;/li&gt;
  &lt;li&gt;알고리즘 한문제&lt;/li&gt;
  &lt;li&gt;사이트 리팩토링하기&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
