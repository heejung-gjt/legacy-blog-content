<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/tag/wanted/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2021-11-17T22:36:55+09:00</updated>
  <id>https://heejung-gjt.github.io/tag/wanted/feed.xml</id>

  
  
  

  
    <title type="html">studying developer | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">백엔드 프리온보딩 2주차 두번째 과제(작성중..)</title>
      <link href="https://heejung-gjt.github.io/project4" rel="alternate" type="text/html" title="백엔드 프리온보딩 2주차 두번째 과제(작성중..)" />
      <published>2021-11-14T15:00:00+09:00</published>
      <updated>2021-11-14T15:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project4</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project4">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-2주차-8퍼센트-기업과제&quot;&gt;원티드 2주차 8퍼센트 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.10 ~ 21.11.12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="8퍼센트" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 2주차 첫번째 과제(작성중..)</title>
      <link href="https://heejung-gjt.github.io/project3" rel="alternate" type="text/html" title="백엔드 프리온보딩 2주차 첫번째 과제(작성중..)" />
      <published>2021-11-10T14:00:00+09:00</published>
      <updated>2021-11-10T14:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project3</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project3">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-2주차-원티드-기업과제&quot;&gt;원티드 2주차 원티드 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.08 ~ 21.11.10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;회사명 자동 완성
    &lt;ul&gt;
      &lt;li&gt;회사명의 일부만 들어가도 검색이 되어야 한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;회사 이름으로 회사 검색&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 회사 추가&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;회사 추가 기능
    &lt;ul&gt;
      &lt;li&gt;언어별로 추가되는 회사, 태그 추가하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unit test 구현&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;flask&lt;/li&gt;
  &lt;li&gt;다대다 참조시 중계 테이블 생성&lt;/li&gt;
  &lt;li&gt;리펙토링의 중요성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;이번 원티드의 기업과제에서 내가 개발해야 하는 기능은 추가되는 회사를 언어별로 따로 추가해주어야 하고 각 언어별 회사의 태그를 추가해주는 기능이였다.&lt;/p&gt;

&lt;p&gt;이번과제 역시 모델링 설계가 중요했지만 유독 더 중요했던 과제였다. 회사는 동일한데 각 회사가 가지고 있는 언어별로 기업을 추가해주어야 했고 태그 또한 각 언어별로 
태그가 추가되어야 했다. 더군다나 flask를 사용하기로 했기 때문에 모델링이 더욱 중요해질 수 밖에 없었다. 회의만 2시간 넘게 진행한 것 같다.&lt;/p&gt;

&lt;p&gt;여기서 팀원들의 의견이 갈렸었다. company라는 테이블에 모든 데이터를 넣어야 하는가 테이블을 나누어야 하는가로 의견이 갈렸다. 하지만 하나의 테이블로 만들때 생기는 문제점이 여러개 있을 수 있었고
 이를 고려하여 최대한 테이블을 나누어 설계하는 쪽을 택했다.&lt;/p&gt;

&lt;p&gt;아래의 이미지와 같이 모델링 설계를 진행했으며 다대다로 엮인 중계 테이블을 만들기로 하였다.  &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/140931939-781a552f-46ed-46be-a239-85751fd329f1.png&quot; alt=&quot;wanted_erd&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회사를 대표하는 companies라는 테이블과  각 company에 해당하는 언어를 다대다로 참조한 중계테이블인 company_contries 테이블을 생성&lt;/li&gt;
  &lt;li&gt;tag와 여러 언어의 tag를 가지고 있는 tag_contries라는 중계 테이블 생성&lt;/li&gt;
  &lt;li&gt;company와 company가 가지고 있는 tag를 다대다로 참조한 중계 테이블인 company_tags를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이후 회사를 추가할때 회사가 존재하지 않으면 먼저 회사를 추가해주었다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;company_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 추가하는 회사가 가지고 있어야 하는 언어가 country테이블에 존재하지 않으면 테이블에 추가해주었다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translated_company&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company_infor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 company와 country의 중계 테이블에 각 언어에 대한 회사를 생성해주었다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;com_country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company_countries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;country_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;country&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;company_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;company_entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;translated_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translated_company&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com_country&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;태그 기능 또한 위의 로직과 같이 진행했다.&lt;/p&gt;

&lt;p&gt;이후 팀원의 피드백을 받아 코드를 전체적으로 리펙토링 하는 시간을 가졌다. 함께해서 좋은 점은 내 코드에 대한 피드백을 주고 받을 수 있다는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;코드의 가독성에 더 많은 신경을 쓰게 된다&lt;/li&gt;
  &lt;li&gt;코드를 왜 그렇게 짰는지에 대한 이유를 생각하게 된다&lt;/li&gt;
  &lt;li&gt;더 개선된 로직을 짤 수 있게 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="wanted" />
      
        <category term="wecode" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 1주차 두번째 과제</title>
      <link href="https://heejung-gjt.github.io/project2" rel="alternate" type="text/html" title="백엔드 프리온보딩 1주차 두번째 과제" />
      <published>2021-11-07T12:00:00+09:00</published>
      <updated>2021-11-07T12:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project2</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project2">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-1주차-프레시코드-기업과제&quot;&gt;원티드 1주차 프레시코드 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.04 ~ 21.11.06&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;로그인 기능
    &lt;ul&gt;
      &lt;li&gt;사용자 인증을 통해 상품 관리를 할 수 있어야 한다&lt;/li&gt;
      &lt;li&gt;JWT 인증 방식을 이용한다&lt;/li&gt;
      &lt;li&gt;상품 추가/수정/삭제는 admin권한을 가지 사용자만 이용할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;상품 관리 기능
    &lt;ul&gt;
      &lt;li&gt;상품 조회는 하나 또는 전체 목록을 조회할 수 있으며 전체 목록은 페이징 기능이 있다&lt;/li&gt;
      &lt;li&gt;한 페이지당 아이템 수는 5개이다&lt;/li&gt;
      &lt;li&gt;사용자는 상품 조회만 가능하다&lt;/li&gt;
      &lt;li&gt;관리자는 상품 추가/수정/삭제를 할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;상품 관리 기능(상품 목록 조회, 상품 페이징 처리, 메뉴 수정, 메뉴 태그 수정)&lt;/li&gt;
  &lt;li&gt;모델링 설계(공통)&lt;/li&gt;
  &lt;li&gt;PostMan API 명세 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;unit test 코드 구현&lt;/li&gt;
  &lt;li&gt;기본 환경 세팅에 있어 팀원 컨벤션 맞추기&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;과제가 주어지면 팀원들과 가장 먼저 진행하는 것은 과제 기능에 대한 모델링이다. 모델링 설계가 제대로 진행되어야 
기능 개발 할때 어려움이 덜 할 것이라는 것을 모두들 알고 있었다. 프레시코드의 API과제에서는 유저가 관리자와 사용자로 나뉘어져 있어야 했다.
관리자만이 상품 C, U, D가 가능했고 사용자는 상품 조회만이 가능했다.&lt;/p&gt;

&lt;p&gt;모델링 설계를 진행할때 고려했던 점은 서비스가 확장되는 것을 고려하여 테이블을 생성했다. Badge, Size, Tag의 테이블을 따로 두었고 Item, Menu 테이블에서 FK로 참조하는 방식으로 모델을 설계했다.&lt;/p&gt;

&lt;p&gt;이 과정에서 &lt;strong&gt;모델 정규화&lt;/strong&gt;  라는 단어를 쓰게 되었는데 모델링을 설계하며 데이터의 중복을 방지하고 이후 c,r,u,d를 구현하는 과정에서 문제 없이 진행할 수 있게 스키마를 설계하는 방식이 바로 모델 정규화라는 것을 이번에 제대로 이해하게 되었다.&lt;/p&gt;

&lt;p&gt;이 과제에서 나는 상품 관리 기능 중 상품 조회와 상품 수정 부분을 구현하게 되었다. 이 과정에서 조금 고민이 되었던 부분이 존재했다. 메뉴를 수정하는 것과 메뉴가 가지고 있는 태그부분을 수정하는 것을 어떻게 진행해야 하는지 고민이 되었다.
처음에 하나의 view에서 메뉴와 메뉴의 태그를 모두 수정하는 로직을 작성하였다. 이후 코드를 보게 되니 if~else 파티였다. ^^ 코드 가독성면에서 좋지 않은것 같았고 그래서 다른 팀원의 의견을 묻게 되었다.&lt;/p&gt;

&lt;p&gt;그리고 들었던 피드백은 굳이 메뉴 수정과 메뉴에 해당되는 태그를 같은 view에서 진행할 필요가 있냐는 것였다. 나는 당연히 메뉴를 수정하는 로직이니 같은 view에다 넣은게 당연하다고 생각했다. 그런데 팀원의 의견을 들어보니 
메뉴 수정하는 view와 메뉴의 태그를 수정하는 view가 나뉘는 것이 가독성 면에서도 훨씬 나아질 것 이라는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;피드백을 들은 후 MenuDetailView class에서 제품의 name과 description을 수정하는 로직을 구현하였고 MenuItemsView라는 새로운 class를 만들어 이곳에서 메뉴에 해당하는 item들의 정보를 업데이트 하는 
로직을 구현하였다.&lt;/p&gt;

&lt;p&gt;메뉴가 존재하는지 안하는지 조건을 걸기 위해 first라는 쿼리문을 사용하였지만 exists라는 더 명확한 쿼리문이 존재하였고 다른 팀원이 이를 
언급해주었다. 어떻게 보면 굉장히 사소해 보이지만 이런 부분을 피드백 해주는 덕분에 코드의 가독성과 효율적인 로직에 대한 생각을 많이 하게 되는 것 같았다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# if not Menu.objects.filter(id=data[&quot;menu_id&quot;]).first():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MENU_NOT_FOUND&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음으로 적절한 조건처리가 되지 않아 배포후에 발생하는 에러가 ListView에서 나왔다.. 밤을 새고 있었기에 팀원들에게 굉장히 미안했다..&lt;br /&gt;
아래 로직에서 badge 부분의 적절한 조건 처리를 해주지 않아 실제 badge에 들어가는 데이터가 없으면 에러가 발생했다. 
badge는 해당 제품이 신상품인지 best 상품인지 이런 데이터가 들어가야 하는 부분이다. 실제로 아무런 데이터가 들어가지 않을 수 있으니
그 부분을 처리해주어야 한다. 하지만 나는 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;product.badge.name&lt;/code&gt; 으로 name을 가져오게만 처리하여 데이터가 들어가지 않았을때를
 생각해주지 않았다. 이 덕분에 30-40분이라는 시간이 더 걸린듯 했다..&lt;/p&gt;

&lt;p&gt;적절한 조건 처리와 에러처리에 굉장히 신경써야 겠다는 생각을 이날 새벽에 다짐하고 또 다짐했던 것 같다. 휴&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;menus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;category&quot;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;description&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;isSold&quot;&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;badge&quot;&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;badge&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;item&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;memuID&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;price&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;isSold&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_sold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;tags&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;menuID&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 다음으로 고민이였던 부분은 unit test였다. 사실 unit test작성에 미숙하였기에 정해놓았던 시간안에 unit test를 전부
작성하지 못했다. (이것도 새벽에 일어난 일이라 나 대신 unit test를 도와 작성해주신 팀원에게 감사하다..) unit test에 대한
 로직 작성을 제대로 이해하지 못하고 view에서 해주는 일까지 unit test에 작성하게 되면서 더 꼬여버렸다. test를 위해서 필요한 필드는 모두 create해주어야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필요한 필드는 create한다. 이때 id는 직접 지정해주어야 한다&lt;/li&gt;
  &lt;li&gt;생성한 필드는 test이후에 모두 삭제되어야 한다. 이때 참조되어 있는 순으로 먼저 삭제해주어야 에러가 나지 않는다&lt;/li&gt;
  &lt;li&gt;성공 케이스의 경우 성공할 수 밖에 없는 데이터를 넣어서 요청만 하면 된다. 나머지는 view의 로직들이 해결해 줄 것이다&lt;/li&gt;
  &lt;li&gt;실패 케이스의 경우 view에서 작성한 에러의 경우를 생각해서 이에 맞게 실패하는 케이스를 만들어주면 된다. 마찬가지로 view에서 상황에 맞게
 실패 메시지와 status를 반환해 줄 것이기 때문에 이에 맞는 메시지와 status만 잘 작성해주면 된다.&lt;/li&gt;
  &lt;li&gt;FK등으로 참조하고 있는 곳에 객체를 넣을때는 그냥 간단하게 &lt;strong&gt;menu_id = 1&lt;/strong&gt; 이런식으로 넣어주자. 굳이 &lt;strong&gt;menu = menu.objects.get(id=1)&lt;/strong&gt; 
이런식으로 넣어줄 필요가 없다 !&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;익숙치 않은 unit test작성, 아직 미숙한 팀원끼리의 커뮤니케이션으로 또다시 밤을 새게 되었다. 아주 꼴딱 새버렸다.. 모든 팀원들이
 지친게 눈에 보였고 어떻게든 프로젝트가 마무리 되었지만 누구 하나 웃을수 없는 상황이 되었다. 아무리 서로 배려한다고 해도
  밤을 새운건 모든 사람들에게 굉장한 체력소모가 되버렸다. 무사히 프로젝트는 제출되었지만 이날 제대로 잠을 잘 수가 없었다. unit test를 제대로 작성하지 못한 것과 ListView의 조건 처리를 제대로 하지 못한
  부분이 마음에 걸렸다.&lt;/p&gt;

&lt;p&gt;unit test는 이후에 완벽하게 숙지하고 이해해서 다음 프로젝트는 똑같은 일로 문제가 발생하지 않게 신경써야겠다. 
조건 처리 부분에 대해서는 나의 부주의였던 것 같다. 나는 완벽히 구현되었다고 생각했지만 그렇지 못했다. 앞으로는 조건처리, 에러처리에 대해
 처음부터 생각하고 로직을 작성해야 겠다는 생각을 하게 된 것 같다.&lt;/p&gt;

&lt;p&gt;혼자 프로젝트를 진행하는것과 다른점은 내가 하는 작은 실수가 큰 실수가 된다는것이다.&lt;/p&gt;

&lt;p&gt;다음 프로젝트부터는 이런 부분을 신경쓰고 진행 할 것이다. 똑같은 실수를 하지 않기 위해서 ! &lt;br /&gt;
처음의 실수는 누구나 할 수 있다고 생각한다. 하지만 똑같은 실수를 되풀이 한다는 것은 있어서는 안된다 !!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="프레시코드" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">백엔드 프리온보딩 1주차 첫번째 과제</title>
      <link href="https://heejung-gjt.github.io/project1" rel="alternate" type="text/html" title="백엔드 프리온보딩 1주차 첫번째 과제" />
      <published>2021-11-03T12:00:00+09:00</published>
      <updated>2021-11-03T12:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/project1</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/project1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원티드-1주차-aimmo-기업과제&quot;&gt;원티드 1주차 Aimmo 기업과제&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진행기간&quot;&gt;진행기간&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;21.11.01 ~ 21.11.03&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;구현해야-하는-기능&quot;&gt;구현해야 하는 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;게시글 카테고리&lt;/li&gt;
  &lt;li&gt;댓글/대댓글&lt;/li&gt;
  &lt;li&gt;게시글 조회수 중복 방지&lt;/li&gt;
  &lt;li&gt;AWS 배포&lt;/li&gt;
  &lt;li&gt;postman / swagger를 사용한 API 명세&lt;/li&gt;
  &lt;li&gt;몽고DB 연동하기&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;배운내용&quot;&gt;배운내용&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;몽고 DB란&lt;/li&gt;
  &lt;li&gt;REST API란&lt;/li&gt;
  &lt;li&gt;git rebase와 squash&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나의-역할&quot;&gt;나의 역할&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;게시글 조회수 기능 구현&lt;/li&gt;
  &lt;li&gt;README.md 작성&lt;/li&gt;
  &lt;li&gt;헤로쿠 배포하기(실패)&lt;/li&gt;
  &lt;li&gt;의견 제시하기(네비게이터)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;프로젝트-회고&quot;&gt;프로젝트 회고&lt;/h3&gt;

&lt;p&gt;기존에 선발과제였던 게시판 CRUD API에서 업그레이드 된 API를 구현해내야 하는 문제였다. 나에게 주어진 시간은 3일이였다. 몽고DB를 처음 사용해 본 나로써는 굉장히 두려웠다. 막막했지만 몽고DB를 써본 팀원이 있었다. 덕분에 몽고DB 연동은 생각보다 쉽게 해결했다. 
과제에서는 API 테스트를 Swagger나 Postman로 하기를 요구했다. PostMan은 써보았지만 Swagger는 처음 들었다. Swagger를 써본 팀원이 존재했기에 그분의 설명을 들으며 
Swagger를 적용시켰다.&lt;/p&gt;

&lt;p&gt;API를 최근에 접해본 나로써는 REST API를 Django에서 DRF없이 구현할 수 있다는 것을 처음 알았다. 장고 공부를 시작한지 꽤 되었지만 정작 백엔드가 필요로 하는 기능들은 제대로 
공부하지 않았던것을 깨달았다.&lt;/p&gt;

&lt;p&gt;팀원들과 함께 프로젝트를 진행하며 깨달은 것 &lt;code class=&quot;highlighter-rouge&quot;&gt;협업&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;커뮤니케이션&lt;/code&gt; 항상 글로만 보고 들었던 백엔드 개발자가 가져야 할 중요한 능력,, 팀프로젝트 한지 이틀만에 몸으로 깨달아버렸다. 
일단 용어를 알아야 의사소통이 된다는것.. 혼자 공부하는 시간이 많았던 나로써는 머리에 있는 내용을 개발자스럽게 꺼내기란 너무너무 힘들었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;진행한-소감&quot;&gt;진행한 소감&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/140023944-ed781e8e-ceda-43d8-a705-00bbd87a1212.jpg&quot; alt=&quot;우울2&quot; /&gt;
진짜 이틀만에 2키로가 빠졌다.. 멋지게 과제를 해내고 싶었지만 그러지 못한 것. 피곤함이 의욕을 이긴것. 객관적으로 내 실력을 바라보니 우물안 개구리였다는 생각.
꼼꼼하지 못한 성격이 너무나 큰 단점으로 돌아온 것. 진짜 첫번째 과제를 하면서 나 자신을 계속해서 자책했던 것 같다. 나만 이렇게 어려운가 ? 나만 이렇게 못하나 ? 이 생각을
혼자서 계속 되뇌었던 것 같다. 그러다 원티드 멘토 예리님의 15분 강의를 들었다. 원래 이런 강의를 들으며 위로 받는 편이 아닌데 뭔가 위로가 되었다.  그리고 생각을 조금 바꿔보기로 결심했다. 
꼼꼼해지려고 노력하기. 말할때 2번은 아니 3번은 더 생각하고 찾아보고 말하기.&lt;/p&gt;

&lt;p&gt;무엇보다 협업이 왜 중요한지 진짜 너무 잘 알아가고 있는중이다. 부디 빨리 내가 적응 할 수 있기를 바란다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="project" />
      
        <category term="에이모" />
      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">원티드 프리온보딩 시작</title>
      <link href="https://heejung-gjt.github.io/wanted1" rel="alternate" type="text/html" title="원티드 프리온보딩 시작" />
      <published>2021-11-02T17:00:00+09:00</published>
      <updated>2021-11-02T17:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/wanted1</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/wanted1">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발자가-되기로-결심한-계기와-과정&quot;&gt;개발자가 되기로 결심한 계기와 과정&lt;/h3&gt;
&lt;p&gt;처음으로 앱 개발로 대학교에서 상을 받은 기억이 난다. 이게 계기가 되었다. 내가 열심히 만든 앱을 누군가 보고 사용한다는 
그 기분이 좋았다. 그렇게 개발자의 길을 걷고 싶었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;내가-위코드-x-원티드-프리온보딩에-참여하게-된-동기이유&quot;&gt;내가 위코드 x 원티드 프리온보딩에 참여하게 된 동기/이유&lt;/h3&gt;
&lt;p&gt;가장 큰 이유는 협업이였다. 항상 다른사람과 함께 개발을 해보고 싶은 욕구가 컸다. 짧은 시간동안 여러개의 기업과제를 해결해야 한다는
프로그램이 마음에 들었다. 또 다른 이유로는 실제 기업에서 어떤 과제를 내며 어떤걸 중요하게 생각하는지 미리 겪어볼 수 있는 기회여서 참여하게 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;나는-앞으로-어떤-개발자가-되고-싶은가&quot;&gt;나는 앞으로 어떤 개발자가 되고 싶은가&lt;/h3&gt;
&lt;p&gt;1주차 첫번째 과제를 하면서 평소 나의 단점이 그대로 드러났다. 내가 직접 느끼게 되니 굉장히 스트레스였다. 
개발자라는 직업은 자신이 왜 그렇게 짰는지 왜 이렇게 짜야하는지 자신의 의견을 명확하게 말 할 수 있어야 하고 함께 하는 사람에게
 신뢰를 주어야 한다. 그리고 책임을 져야한다. 나는 신뢰할 수 있는 개발자, 내가 짠 코드를 설명할 수 있는 개발자가 되고 싶다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="wecode" />
      
        <category term="wanted" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
