<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/tag/git/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2021-02-03T18:21:11+09:00</updated>
  <id>https://heejung-gjt.github.io/tag/git/feed.xml</id>

  
  
  

  
    <title type="html">Studying  Develope | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">git flow 이용해서 merge하기</title>
      <link href="https://heejung-gjt.github.io/git-flow" rel="alternate" type="text/html" title="git flow 이용해서 merge하기" />
      <published>2021-01-30T13:47:00+09:00</published>
      <updated>2021-01-30T13:47:00+09:00</updated>
      <id>https://heejung-gjt.github.io/git-flow</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/git-flow">&lt;h3 id=&quot;git-flow-이용하기&quot;&gt;git flow 이용하기&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-installation&quot;&gt;✔ installation&lt;/h4&gt;

&lt;p&gt;ubuntu 설치방법 (사용자 환경마다 설치 방법 다름)
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install git-flow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-git-flow-init-은-새로운-기능의-개발을-develop-브랜치에서-시작하기-위한-명령어이다-해당-명령어를-작성하면-develop라는-branch가-생성되며-해당-branch로-이동하게-된다&quot;&gt;✔ git flow init 은 새로운 기능의 개발을 develop 브랜치에서 시작하기 위한 명령어이다. 해당 명령어를 작성하면 develop라는 branch가 생성되며 해당 branch로 이동하게 된다.&lt;/h4&gt;
&lt;p&gt;(몇몇 질문은 기본값으로 설정하자. enter를 쳐서 넘어가면 된다)&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git flow init

Which branch should be used &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;bringing forth production releases?
   - main
Branch name &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;production releases: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;main] 
Branch name &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;next release&quot;&lt;/span&gt; development: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;develop] 

How to name your supporting branch prefixes?
Feature branches? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;feature/] 
Bugfix branches? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bugfix/] 
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; develop
  main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-새-기능의-개발을-시작하기-위해서-develop에-기반한-새-기능-브랜치를-생성하고-해당-브랜치로-전환한다&quot;&gt;✔ 새 기능의 개발을 시작하기 위해서 develop에 기반한 새 기능 브랜치를 생성하고 해당 브랜치로 전환한다&lt;/h4&gt;
&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git flow feature start &amp;lt;브랜치명&amp;gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch

develop
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; feature/add-hint &lt;span class=&quot;c&quot;&gt;# 브랜치 생성됨&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-해당-브랜치에서-numguesspy의-기능등을-수정한-후-add-commit을-차례대로-해준다&quot;&gt;✔ 해당 브랜치에서 numguess.py의 기능등을 수정한 후 add, commit을 차례대로 해준다&lt;/h4&gt;
&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-numguesspy의-기능-개발이-완료되었다면&quot;&gt;✔ numguess.py의 기능 개발이 완료되었다면&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;feature/add-hint 브랜치를  develop 브랜치에 병합한다&lt;/li&gt;
  &lt;li&gt;기능 브랜치를 feature/add-hint 브랜치를 삭제한다&lt;/li&gt;
  &lt;li&gt;develop 브랜치로 전환한다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;아래의 명령어가 1~3번의 모든것을 수행한다&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git flow feature finish add-hint

Switched to branch &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;
Updating cb25953..9eede5f
Fast-forward
 numguess.py | 9 ++++++---
 1 file changed, 6 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 3 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Deleted branch feature/add-hint &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;was 9eede5f&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Summary of actions:
- The feature branch &lt;span class=&quot;s1&quot;&gt;'feature/add-hint'&lt;/span&gt; was merged into &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;
- Feature branch &lt;span class=&quot;s1&quot;&gt;'feature/add-hint'&lt;/span&gt; has been locally deleted
- You are now on branch &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; develop
  main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-수정한-numguesspy-를-출시하기-위해-릴리스를-시작한다&quot;&gt;✔ 수정한 numguess.py 를 출시하기 위해 릴리스를 시작한다.&lt;/h4&gt;
&lt;p&gt;develop 브랜치로부터 release브랜치를 생성한다&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git flow release start v.1.0.0.210130001

Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'release/v.1.0.0.210130001'&lt;/span&gt;

Summary of actions:
- A new branch &lt;span class=&quot;s1&quot;&gt;'release/v.1.0.0.210130001'&lt;/span&gt; was created, based on &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;
- You are now on branch &lt;span class=&quot;s1&quot;&gt;'release/v.1.0.0.210130001'&lt;/span&gt;

Follow-up actions:
- Bump the version number now!
- Start committing last-minute fixes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;preparing your release
- When &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;, run:
     git flow release finish &lt;span class=&quot;s1&quot;&gt;'v.1.0.0.210130001'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-릴리스를-완료해주면-된다-이때-vi창이-3번-뜨게-된다&quot;&gt;✔ 릴리스를 완료해주면 된다. 이때 vi창이 3번 뜨게 된다.&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;release브랜치를 main브랜치에 병합을 한다는 vi창  (저장)&lt;/li&gt;
  &lt;li&gt;릴리스를 릴리스 이름으로 태그 (작성 후 저장)&lt;/li&gt;
  &lt;li&gt;릴리스를 develop 브랜치로 재병합 (저장)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;release 브랜치는 자동으로 삭제된다&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git flow release finish &lt;span class=&quot;s1&quot;&gt;'v.1.0.0.210130001'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 첫번째 vi창&lt;/span&gt;
Merge branch &lt;span class=&quot;s1&quot;&gt;'release/v.1.0.0.210130001'&lt;/span&gt; into main
&lt;span class=&quot;c&quot;&gt;# Please enter a commit message to explain why this merge is necessary,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# especially if it merges an updated upstream into a topic branch.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lines starting with '#' will be ignored, and an empty message aborts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the commit.&lt;/span&gt;
~              

&lt;span class=&quot;c&quot;&gt;# 두번째 vi창&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Write a message for tag:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   v.1.0.0.210130001&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lines starting with '#' will be ignored.&lt;/span&gt;
~         

&lt;span class=&quot;c&quot;&gt;# 세번째 vi창&lt;/span&gt;
Merge tag &lt;span class=&quot;s1&quot;&gt;'v.1.0.0.210130001'&lt;/span&gt; into develop

feat: numguess v1.0.0
&lt;span class=&quot;c&quot;&gt;# Please enter a commit message to explain why this merge is necessary,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# especially if it merges an updated upstream into a topic branch.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lines starting with '#' will be ignored, and an empty message aborts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the commit.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-develop-브랜치와-main을-각각-push를-해서-리모트에-업로드-해준다&quot;&gt;✔ develop 브랜치와 main을 각각 push를 해서 리모트에 업로드 해준다&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin develop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(파란선부터 시작) 아래의 이미지처럼 merge된 것을 볼 수 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77425963/106345983-f792c500-62f6-11eb-82e4-42891484c344.png&quot; alt=&quot;merge&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-정리&quot;&gt;⭐ 정리&lt;/h3&gt;

&lt;h4 id=&quot;명령어&quot;&gt;명령어&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;feature : 특정 기능을 개발하거나 수정할때 사용하는 브랜치 (자동으로 생성, 삭제)&lt;/li&gt;
  &lt;li&gt;release : 수정한 기능을 배포할때 사용하는 브랜치 (버전네이밍 짓는 방법 알아보기)&lt;/li&gt;
  &lt;li&gt;git flow feature start &lt;branch-name&gt; : 기능 개발 시작&lt;/branch-name&gt;&lt;/li&gt;
  &lt;li&gt;git flow release start &lt;branch-name&gt; : 기능 배포 시작&lt;/branch-name&gt;&lt;/li&gt;
  &lt;li&gt;git flow feature finish &lt;branch-name&gt; : 기능 개발 완료 (develop 에 feature 브랜치 병합후 feature 브랜치 삭제)&lt;/branch-name&gt;&lt;/li&gt;
  &lt;li&gt;git flow release finish &lt;version-name&gt; : 기능 배포 완료 (main에 release 병합후 release 브랜치 삭제)&lt;/version-name&gt;&lt;/li&gt;
  &lt;li&gt;프로젝트에 적용 : develop 와 main에 push 해준다&lt;/li&gt;
&lt;/ul&gt;

&lt;hotfix는 나중에=&quot;&quot; 알아보자=&quot;&quot;&gt;  
&lt;/hotfix는&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">git init 사용하지 않고 clone 사용해 git 연결하기</title>
      <link href="https://heejung-gjt.github.io/git-create" rel="alternate" type="text/html" title="git init 사용하지 않고 clone 사용해 git 연결하기" />
      <published>2021-01-30T12:47:00+09:00</published>
      <updated>2021-01-30T12:47:00+09:00</updated>
      <id>https://heejung-gjt.github.io/git-create</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/git-create">&lt;h2 id=&quot;-git에-작성-내용-업로드하기&quot;&gt;👉 git에 작성 내용 업로드하기&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-1-github페이지에서-새로운-repository를-생성한다&quot;&gt;📌 1. github페이지에서 새로운 repository를 생성한다&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;여기서 만약 README.md를 생성했다면 4번-7번은 생략해준다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-2-로컬로-돌아와-저장할-폴더를-지정한-곳에-clone--해준다--클론-주소---github---생성한-repo---code-클릭---https-url을-복사-후-붙여넣기&quot;&gt;📌 2. 로컬로 돌아와 저장할 폴더를 지정한 곳에 clone  해준다.  (클론 주소 :  github -&amp;gt; 생성한 repo -&amp;gt; code 클릭 -&amp;gt; https url을 복사 후 붙여넣기)&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone &amp;lt;url주소&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-3-해당-폴더에-github의--repo이름으로-폴더가-생성된다-해당-로컬과-repo가-연결되었다&quot;&gt;📌 3. 해당 폴더에 github의  repo이름으로 폴더가 생성된다. (해당 로컬과 repo가 연결되었다)&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-4-readmemd파일이-없다면-touch-readmemd를-해준다&quot;&gt;📌 4. README.md파일이 없다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;touch README.md&lt;/code&gt;를 해준다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-5-git-add-후-git-commit을-해준다&quot;&gt;📌 5. git add 후 git commit을 해준다&lt;/h4&gt;
&lt;p&gt;(이때 git commit -m ““은 삼가해준다. 직접 편집기 들어가 변경후 저장 선호)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add README.md
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-6-main으로-branch를-연결해준다&quot;&gt;📌 6. main으로 branch를 연결해준다&lt;/h4&gt;
&lt;p&gt;(만약 바로 push를 해준다면 master로 연결됨)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-7-해당-내용을-main에-push해준다&quot;&gt;📌 7. 해당 내용을 main에 push해준다&lt;/h4&gt;
&lt;p&gt;(처음 push를 해줄땐 -u를 써준다)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin main 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-8-github에서-확인해-잘-올라갔으면-끝-&quot;&gt;📌 8. github에서 확인해 잘 올라갔으면 끝 !&lt;/h4&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Fork and Merge로 동료와 협업해보기 - 실습</title>
      <link href="https://heejung-gjt.github.io/git-collaborate" rel="alternate" type="text/html" title="Fork and Merge로 동료와 협업해보기 - 실습" />
      <published>2021-01-30T11:47:00+09:00</published>
      <updated>2021-01-30T11:47:00+09:00</updated>
      <id>https://heejung-gjt.github.io/git-collaborate</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/git-collaborate">&lt;h3 id=&quot;-fork-and-merge로-동료와-협업---실습으로-알아보기&quot;&gt;👉 Fork and Merge로 동료와 협업 - 실습으로 알아보기&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;PM(팀장)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;github에서 새로운 repo를 생성하고 내 컴에 clone 한다.&lt;/li&gt;
  &lt;li&gt;git flow init 후 develop에서 numguess.py를 만들고 add, commit, push&lt;/li&gt;
  &lt;li&gt;팀원에게 알린다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;DEV(팀원)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;알림 받은 후, 방문하여 fork 한다. fork한 나의 repo를 내 컴에 clone한다.&lt;/li&gt;
  &lt;li&gt;팀장 repo에 방문하여 issue를 생성한다.&lt;/li&gt;
  &lt;li&gt;git flow init 후, dev -&amp;gt; feature/{MYFEATURE} 브랜칭 하여 작업한다. &lt;br /&gt;
(commit 시 발급한 issue 번호 매기기)&lt;/li&gt;
  &lt;li&gt;feature finish 후 나의 develop으로 push 한다.&lt;/li&gt;
  &lt;li&gt;create pull request 하고 팀장에게 알린다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;PM&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;pull request를 리뷰한다.&lt;/li&gt;
  &lt;li&gt;수정할 것을 지시한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;DEV&lt;/strong&gt; 6. 수정사항을 반영하여 다시 add,commit,push&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PM&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;merge한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;DEV&lt;/strong&gt; 7. PM repo 업데이트 발생시 PM의 develop을 pull한다.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-pm&quot;&gt;👉 PM&lt;/h3&gt;

&lt;h4 id=&quot;1-pm-github에-fork-and-merge-repo를-생성한-후-clone해준다&quot;&gt;1. pm github에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fork-and-merge&lt;/code&gt; repo를 생성한 후 clone해준다&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git clone &amp;lt;url명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-git-flow-init으로--develop-브랜치를-생성한-후-해당-브랜치-내에서-numguesspy파일을-생성하여-add-commit을-해준다&quot;&gt;2. git flow init으로  develop 브랜치를 생성한 후 해당 브랜치 내에서 numguess.py파일을 생성하여 add, commit을 해준다&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git flow init

$ git branch #develop 생성되었는지 확인
* develop
  master

$ touch numguess.py
$ vi numguess.py # 팀원이 해야할 일 기록
$ git add numguess.py
$ git commit  
$ git push -u origin develop# master는 이미 remote와 로컬이 연결되어 있으므로 -u를 해주지 않아도 되지만 develop 브랜치는 생성된 후 처음 push를 하기 때문에    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-팀원에게-알린다&quot;&gt;3. 팀원에게 알린다&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dev&quot;&gt;DEV&lt;/h4&gt;

&lt;h4 id=&quot;1-pm-의-git에-방문하여-해당-repo-fork한-후-clone-해준다&quot;&gt;1. PM 의 git에 방문하여 해당 repo fork한 후 clone 해준다.&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;해당 repo로 이동 -&amp;gt; 오른쪽 상단에 fork click&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git clone &amp;lt;fork한 dev의 url&amp;gt;
$ cd &amp;lt;clone명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-dev가-pm-의-repo에서-issue를-만든다&quot;&gt;2. dev가 pm 의 repo에서 issue를 만든다&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-git-flow-init-후-dev---featuremyfeature-브랜칭-하여-작업한다&quot;&gt;3. git flow init 후, dev -&amp;gt; feature/{MYFEATURE} 브랜칭 하여 작업한다.&lt;/h4&gt;
&lt;h5 id=&quot;commit-시-발급한-issue-번호-매기기&quot;&gt;(commit 시 발급한 issue 번호 매기기)&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git flow init # develop 브랜치로 들어오면 pm이 작성한 numguess.py 가 있다
$ git flow feature start &amp;lt;feature/브랜치명&amp;gt;
$ vi numguess.py # 내용을 수정한다
$ git add numguess.py
$ git commit (commit 시 발급한 issue번호를 매겨준다) # solved: #n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-feature-finish-후-dev의-develop으로-push-한다&quot;&gt;4. feature finish 후 dev의 develop으로 push 한다.&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git flow feature finish &amp;lt;feature/브랜치명&amp;gt;  # 기능 개발이 끝난 경우
$ git push origin develop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-create-pull-request-하고-팀장에게-알린다&quot;&gt;5. create pull request 하고 팀장에게 알린다.&lt;/h4&gt;
&lt;p&gt;pm의 repo로 돌아가 develop 브랜치에서 pull request를 눌러준다
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-이때-conflict이-발생-할-수-있다-이유는-이미-pm이-다른-내용을-merge했기-때문이다&quot;&gt;6. 이때 conflict이 발생 할 수 있다. 이유는 이미 pm이 다른 내용을 merge했기 때문이다.&lt;/h4&gt;
&lt;h5 id=&quot;다시-자신의-로컬로-돌아가-7번을-수행보자-conflict이-발생한다&quot;&gt;다시 자신의 로컬로 돌아가 7번을 수행보자 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONFLICT이 발생한다&lt;/code&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;.
.
.
CONFLICT (content): Merge conflict in zero-to-number.py
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 다시 vi로 conflct 나는 파일로 들어가 변경해준다  &lt;br /&gt;
그 후 add , commit 을 차례대로 해준뒤 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin develop&lt;/code&gt;으로 다시 push해주고 pull request해주면  끝 ! 👍&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pm&quot;&gt;PM&lt;/h3&gt;

&lt;h4 id=&quot;4-pull-request를-리뷰한다&quot;&gt;4. pull request를 리뷰한다.&lt;/h4&gt;
&lt;h4 id=&quot;5-수정할-것을-지시한다&quot;&gt;5. 수정할 것을 지시한다.&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dev-1&quot;&gt;DEV&lt;/h3&gt;

&lt;h4 id=&quot;6-수정사항을-반영하여-다시-addcommitpush&quot;&gt;6. 수정사항을 반영하여 다시 add,commit,push&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ vi numguess.py # 수정사항 변경
$ git add numguess.py
$ git commit
$ git push origin develop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pm-1&quot;&gt;PM&lt;/h3&gt;
&lt;h4 id=&quot;6-merge-버튼을-눌러준다&quot;&gt;6. &lt;code class=&quot;highlighter-rouge&quot;&gt;merge 버튼을 눌러준다&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dev-2&quot;&gt;DEV&lt;/h3&gt;

&lt;h4 id=&quot;7-pm-repo-업데이트-발생시-pm의-develop을-pull한다&quot;&gt;7. PM repo 업데이트 발생시 PM의 develop을 pull한다.&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git remote -v # 자신의 remote인지 확인
$ git remote add pmorigin &amp;lt;pm의 url명&amp;gt;
$ git pull pmorigin develop # pm의 변경된 내용 pull
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pm-2&quot;&gt;PM&lt;/h3&gt;

&lt;h4 id=&quot;6-자신의-로컬도-변경해준다&quot;&gt;6. 자신의 로컬도 변경해준다&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git pull origin develop
&lt;/code&gt;&lt;/pre&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">git branch로 checkout, merge 하기</title>
      <link href="https://heejung-gjt.github.io/git-branch" rel="alternate" type="text/html" title="git branch로 checkout, merge 하기" />
      <published>2021-01-30T11:00:00+09:00</published>
      <updated>2021-01-30T11:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/git-branch</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/git-branch">&lt;h2 id=&quot;-git-branch로-checkout-merge-하기------branch생성-후-main의-변화가-없을때&quot;&gt;📌 git branch로 checkout, merge 하기   -  branch생성 후 main의 변화가 없을때&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-git-branch-명령어로-현재-존재-하는-branch와-위치하고-있는-branch를-볼-수-있다&quot;&gt;✔ git branch 명령어로 현재 존재 하는 branch와 위치하고 있는 branch를 볼 수 있다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-main에-위치한-상황에서-python-파일을-하나-생성한-후-addcommit을-차례대로-해준다&quot;&gt;✔ main에 위치한 상황에서 python 파일을 하나 생성한 후 add,commit을 차례대로 해준다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;vi 편집기에서 작성&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;main에 numguess.py 파일이 commit된 상태로 존재하는 것을 볼 수 있다. 해당 파일을 새로운 branch를 생성해 편집해보자&lt;/p&gt;

&lt;h4 id=&quot;-새로운-branch를-생성-한-후-해당-branch로-전환&quot;&gt;✔ 새로운 branch를 생성 한 후 해당 branch로 전환&lt;/h4&gt;
&lt;p&gt;(git branch로 잘 전환되었는지 확인하자)&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iteration&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#브랜치 생성&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iteration&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 브랜치 전환&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-해당-브랜치에서-numguesspy의-내용을-편집한-후-add-commit을-차례대로-해준다&quot;&gt;✔ 해당 브랜치에서 numguess.py의 내용을 편집한 후 add, commit을 차례대로 해준다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;vi 편집기에서 작성&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-수정된-numguesspy파일을-main과-병합하기-위해-merge-옵션을-사용한다-merge가-끝난-후에는-생성했던-branch를-지워주자&quot;&gt;✔ 수정된 numguess.py파일을 main과 병합하기 위해 merge 옵션을 사용한다. merge가 끝난 후에는 생성했던 branch를 지워주자&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout main  &lt;span class=&quot;c&quot;&gt;# main으로 이동 후 병합&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; iteration
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-main에-있는-numguesspy를-확인해보면-iteration-브랜치에서-편집한-내용이-들어가-있는-것을-볼-수-있다&quot;&gt;✔ main에 있는 numguess.py를 확인해보면 iteration 브랜치에서 편집한 내용이 들어가 있는 것을 볼 수 있다&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 방법은 main에서 branch를 생성한 후 main의 내용에 변화가 없을때 merge할 수 있는 방법이다.  &lt;br /&gt;
branch를 만든 후에 main의 변화가 있을땐 merge하는 과정에서 conflict, 즉 충돌이 일어나게 된다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-branch생성-후-main의-변화가-있을때-conflict-해결하여-merge하기&quot;&gt;📌 branch생성 후 main의 변화가 있을때 Conflict 해결하여 merge하기&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-새로운-branch를-생성한-후-해당-브랜치로-들어간다&quot;&gt;✔ 새로운 branch를 생성한 후 해당 브랜치로 들어간다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch discard
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout discard

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-discrad-브랜치에서-numguesspy-파일을-수정한-후-add-commit을-해준다&quot;&gt;✔ discrad 브랜치에서 numguess.py 파일을 수정한 후 add, commit을 해준다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-그-뒤-충돌을-일부러-내기-위해-main으로-돌아와-merge전-numguesspy의-내용을-수정-후-add-commit을-해준다&quot;&gt;✔ 그 뒤 충돌을 일부러 내기 위해 main으로 돌아와 merge전 numguess.py의 내용을 수정 후 add, commit을 해준다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout main
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add numguess.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-main에서-discard와-merge를-하면-충돌이-발생하게-된다&quot;&gt;✔ main에서 discard와 merge를 하면 충돌이 발생하게 된다&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge discard

Auto-merging numguess.py
CONFLICT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Merge conflict &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;numguess.py
Automatic merge failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; fix conflicts and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;commit the result.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;-numguesspy를-편집기를-통해-들어오면-아래와-같이-내용이-추가되어-있는-것을-볼-수-있다&quot;&gt;✔ numguess.py를 편집기를 통해 들어오면 아래와 같이 내용이 추가되어 있는 것을 볼 수 있다&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=======&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'OK BYEBYE SEE YOU LATER.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ANSWER : {num1}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'YOUR ANSWER : {guess}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discard&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'NOPE !'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GAME OVER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code&gt;     &lt;br /&gt;
&amp;lt; main에서 작성한 numgguess.py 내용 &amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-=========```&quot;&gt;```&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; discard```   
&amp;lt;branch discard에서 작성한 numguess.py 내용&amp;gt;      

병합을 위해서 위의 두가지의 코드를 적절히 조합하여 수정, 삭제 등 변경해주면된다. (단 ! 위의 코드에 생성되있는 ===, &amp;lt;&amp;lt;&amp;lt; 기호들은 지워준다)    
#### ✔ 적절히 수정한 후 저장 후  실행이 잘 되는지 확인한 후 (```python3 numguess.py```) add,commit을 해준다    

#### ✔ 만들었던 branch는 깔끔하게 지워준다
```bash
git branch -D discard
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;github에  들어가  insights -&amp;gt; network를 확인해보면 아래의 이미지처럼 branch가 병합된 것을 볼 수 있다 🙌&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77425963/106344584-f3ae7500-62ed-11eb-9304-265a1194c5f5.png&quot; alt=&quot;merge&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">git (1) - Tutorial</title>
      <link href="https://heejung-gjt.github.io/git-01" rel="alternate" type="text/html" title="git (1) - Tutorial" />
      <published>2021-01-03T14:47:00+09:00</published>
      <updated>2021-01-03T14:47:00+09:00</updated>
      <id>https://heejung-gjt.github.io/git-01</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/git-01">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;git 강좌 순서 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./git-01&quot;&gt;git(1) - Git Tutorial&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h2 id=&quot;-git-tutorial&quot;&gt;🗝 Git Tutorial&lt;/h2&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;p&gt;✔ Set Up&lt;/p&gt;

&lt;p&gt;✔ Git의 WorkFlow&lt;/p&gt;

&lt;p&gt;✔ Git의 기본 명령어&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up&quot;&gt;Set Up&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;사용한 터미널 : cmder&lt;/p&gt;

&lt;h3 id=&quot;사용자-정보&quot;&gt;📌사용자 정보&lt;/h3&gt;
&lt;p&gt;git을 사용할 때 가장 먼저 해야 하는 것은 사용자 이름과 이메일 주소를 설정하는 것이다. git은 커밋할때마다 이 정보를 사용한다. 한 번 커밋한 이후에는 정보를 변경할 수 없으니 주의하자. –global 옵션으로 설정하는 것은 딱 한번만 설정 해주면 된다.   만약 프로젝트마다 다른 이름과 이메일을 사용하고 싶다면 –global을 빼고 작성해주면 된다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git config --global user.name &quot;YourName&quot;
λ git config --global user.email &quot;YourEmail&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;편집기&quot;&gt;📌편집기&lt;/h3&gt;
&lt;p&gt;편집기는 VScode로 열 수 있게 설정해준다. 이때 Windows 사용자들은 VS Code를 설치할때 PATH에 추가하기를 선택해준다. 
–wait옵션을 주는 이유는 vscode를 터미널에서 열었을때 편집이 끝나 해당 편집기가 닫힐때까지 대기하도록 해준다.
-e를 실행하면 vscode를 편집기로 사용할 수 있다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git config --global core.editor &quot;code --wait&quot;
λ git config --global -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;crlf-설정하기&quot;&gt;📌CRLF 설정하기&lt;/h3&gt;
&lt;p&gt;OS마다 에디터에서 새로운 줄바꿈을 할 때 들어가는 문자열이 각각 다르기 때문에 (window는 text\r\n, mac은 text\n) autocrlf를 설정해주어 이를 해결해준다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git config --global core.autocrlf true #for Windows
λ git config --global core.autocrlf input #for Mac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설정값-확인&quot;&gt;📌설정값 확인&lt;/h3&gt;
&lt;p&gt;–list 옵션을 통해 지금까지 설정한 값들을 볼 수 있다&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git config --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git의-workflow&quot;&gt;Git의 WorkFlow&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;git은 3가지의 공간으로 나뉜다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/103476617-cfe53580-4dfa-11eb-829f-592ff960c6b8.PNG&quot; alt=&quot;git 이미지&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;working directory 는 프로젝트의 파일들을 수정하는 작업을 한다
    &lt;blockquote&gt;
      &lt;p&gt;working directory에 있는 파일은 Untracked과 tracked 두가지로 나뉜다
tracked 파일은 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록할) 상태 중 하나이다. 
untracked 파일은 그 외 모든 파일을 말한다&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;staging area 는 히스토리에 저장할 준비가 되어있는 파일들을 옮겨놓는 공간이다&lt;/li&gt;
  &lt;li&gt;.git directory(Repository)는 버전의 히스토리를 가지고 있는 공간이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-ex01-git안에--first_gittxt-second_gittxt이-존재한다&quot;&gt;📑 EX01) git안에  first_git.txt, second_git.txt이 존재한다&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;
✔ __1. git status로 확인 결과 아무것도 commit된 것이 없고 모든 파일은 untracked 파일이다__

λ git status
On branch master

No commits yet

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)
        first_git.txt
        second_git.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)

✔ __2. git add first_git.txt로 파일 하나를 add해준다__

λ git add first_git.txt


__3. first_git 파일은 커밋이 가능한 staging area에 들어가 있고 second_git 파일은 여전히 untracked 이다__

λ git status
On branch master

No commits yet

Changes to be committed:
  (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)
        new file:   first_git.txt

Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)
        second_git.txt

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-ex02-first_gittxt는-staging-area-공간에-있고--second_gittxt는-untracked-파일이다&quot;&gt;📑 EX02) first_git.txt는 staging area 공간에 있고 , second_git.txt는 untracked 파일이다&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;
✔ __1. git commit으로 first_git.txt를 repository 공간으로 이동시켰다__

λ git commit
[master (root-commit) fe11377] This is First Commit File !
 1 file changed, 1 insertion(+)
 create mode 100644 first_git.txt

✔ __2. git log로 확인 결과 한개의 commit이 된 것을 볼 수 있다__

λ git log
commit fe11377c487ae9eccfd802aba21ba31b176e35bd (HEAD -&amp;gt; master)
Author: heejung &amp;lt;dkfkffkf115@naver.com&amp;gt;
Date:   Sun Jan 3 20:02:43 2021 +0900

    This is First Commit File !
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git의-기본-명령어&quot;&gt;Git의 기본 명령어&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;git-init&quot;&gt;git init&lt;/h4&gt;
&lt;p&gt;init명령어는 .git이라는 하위 디렉토리를 만들어준다. 해당 디렉토리에는 git에 관한 필요한 파일들이 들어있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;git-add&quot;&gt;git add&lt;/h4&gt;
&lt;p&gt;add명령어로 파일들을 staging area에 추가해준다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git add &amp;lt;fileName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add 뒤에 .을 붙이면 모든 파일을 add 하겠다는 명령어이다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;git-commit&quot;&gt;git commit&lt;/h4&gt;
&lt;p&gt;commit 명령어로 파일들을 git directory에 추가해준다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git commit -m &quot;&amp;lt;fileDescription&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;git-status&quot;&gt;git status&lt;/h4&gt;
&lt;p&gt;status 명령어로 파일의 상태를 확인한다. 해당된 파일이 add가 된 상태인지 commit이 된 상태인지 알 수 있다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ignore&quot;&gt;ignore&lt;/h4&gt;
&lt;p&gt;commit 하고 싶지 않은 파일들은 해당 폴더를 만들어 넣는다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ echo *.log &amp;gt; .gitignore  #모든 .log 파일을 ignore폴더에 넣는다
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;git-diff&quot;&gt;git diff&lt;/h4&gt;
&lt;p&gt;working directory에 있는 파일들을 비교할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git diff
diff --git a/third_git.txt b/third_git.txt
index e69de29..f2aa86d 100644
--- a/third_git.txt   #이전버전 third_git과 
+++ b/third_git.txt   #현재버전 third_git을 비교한다는 뜻
@@ -0,0 +1 @@         #이전 버전의 0번째부터 현재버전 0~1번째줄을 비교해보라는 뜻
+hello                #hello라는 문자가 추가 되었다는 뜻

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;git-diff-staged&quot;&gt;git diff –staged&lt;/h4&gt;
&lt;p&gt;staging area에 있는 파일들을 비교할 수 있다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git diff
diff --git a/third_git.txt b/third_git.txt
index e69de29..f2aa86d 100644
--- a/third_git.txt   #이전버전 third_git과 
+++ b/third_git.txt   #현재버전 third_git을 비교한다는 뜻
@@ -0,0 +1 @@         #이전 버전의 0번째부터 현재버전 0~1번째줄을 비교해보라는 뜻
+hello                #hello라는 문자가 추가 되었다는 뜻
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-rm&quot;&gt;git rm&lt;/h4&gt;
&lt;p&gt;rm이 아니라 git rm을 사용하면 delete된 결과가 바로 staging area에 포함이 된다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git rm &amp;lt;삭제할 파일&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;git-log-oneline&quot;&gt;git log –oneline&lt;/h4&gt;
&lt;p&gt;해당 옵션을 사용하면 간단하게 commit된 파일들을 볼 수 있다. commit 된 파일들의 해쉬코드와 commit 메시지를 볼 수 있다
 –reverse를 붙이면 commit 가자 오래된 순부터 볼 수 있다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;λ git log --oneline
d643a6e (HEAD -&amp;gt; master) Update Welcome page  
b8e485f Add light theme
bd7bd28 Add About page
328708d Add Welcome page
0ad2dbb Add UserRepository module
9186a41 Add LoginService module
1563681 Initialise project

&lt;/code&gt;&lt;/pre&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="git" />
      

      
        <summary type="html">git 강좌 순서 git(1) - Git Tutorial</summary>
      

      
      
    </entry>
  
</feed>
