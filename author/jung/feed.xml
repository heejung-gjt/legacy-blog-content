<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://heejung-gjt.github.io/author/jung/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://heejung-gjt.github.io/" rel="alternate" type="text/html" />
  <updated>2021-07-11T23:04:15+09:00</updated>
  <id>https://heejung-gjt.github.io/author/jung/feed.xml</id>

  
  
  

  
    <title type="html">Studying  Develop | </title>
  

  
    <subtitle>개발 공부하는 블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">0711 TIL</title>
      <link href="https://heejung-gjt.github.io/til16" rel="alternate" type="text/html" title="0711 TIL" />
      <published>2021-07-11T14:00:00+09:00</published>
      <updated>2021-07-11T14:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/til16</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til16">&lt;h2 id=&quot;210711-계획&quot;&gt;210711 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;pm-300-&quot;&gt;PM 3:00 ~&lt;/h4&gt;

&lt;p&gt;주말이라 확실히 늘어진다.. 오늘도 3시에 시작했다. 팀원과 앞으로 백엔드 부분에 대한 진행상황에 대해 
회의를 하고 코드리뷰 날짜를 정했다. 다음주에는 프로젝트 백엔드 구현에 시간을 쓸 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;h4 id=&quot;--12일--18일-계획짜기&quot;&gt;- &lt;del&gt;12일 ~ 18일 계획짜기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--user-상속-부분-정리하기&quot;&gt;- user 상속 부분 정리하기&lt;/h4&gt;
&lt;h4 id=&quot;--form-modelform-정리하기&quot;&gt;- form, modelform 정리하기&lt;/h4&gt;
&lt;hr /&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">(Django) user 커스터마이징하기(UserManager, AbstractBaseUser)</title>
      <link href="https://heejung-gjt.github.io/user" rel="alternate" type="text/html" title="(Django) user 커스터마이징하기(UserManager, AbstractBaseUser)" />
      <published>2021-07-11T12:05:00+09:00</published>
      <updated>2021-07-11T12:05:00+09:00</updated>
      <id>https://heejung-gjt.github.io/user</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/user">&lt;p&gt;장고에는 기본적으로 user모델이 정의되어 있다. 기본적으로 정의 되어 있는 모델보다 더 다양한 정보를 입력받을 수 있게
하기 위해 Profile 모델을 생성해 User모델과  1:1로 묶어 구현하는 방식으로 프로젝트를 진행하다가 장고 v1.5 이후 user model을 커스텀하는 것이 일반적인
방법이 되었고 한번쯤은 user모델을 커스텀하는 방식을 정리하여 사용해보고 싶었다. 이다. &lt;strong&gt;나는 AbstractBaseUser를 사용하여 user를 커스텀 할 예정이다&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;abstractbaseuser&quot;&gt;AbstractBaseUser&lt;/h2&gt;

&lt;p&gt;로그인의 아이디를 이메일 주소로 사용하도록 하거나 장고의 로그인 절차가 아닌 인증 절차를 직접 구현하고 싶을때 사용한다. 즉
로그인 방식을 변경하고 싶을때나 원하는 필드들로 유저 모델을 구성하고 싶을때 사용하면 된다. 이때 해당 모델로 구현하기 위해서는
BaseUserManager를 상속하는 UserManager를 함께 정의하여 일반유저와 슈퍼유저의 생성 방식을 정의해주어야 한다. 나는 사실 UserManager의 역할을 이해하는 것부터
힘들었었다. 커스텀하는 방식이 이해가 잘 안가서 4일정도 헤맸던것 같다..(알고나니 생각보다 쉬웠다😂)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;내가-구현할-user모델의-요구사항&quot;&gt;내가 구현할 User모델의 요구사항&lt;/h2&gt;
&lt;blockquote&gt;

  &lt;p&gt;사용자의 아이디를 이메일로 받아 후에 이메일 인증을 구현한다&lt;/p&gt;

  &lt;p&gt;사용자의 닉네임과 이미지의 부가 정보를 받는다&lt;/p&gt;

  &lt;p&gt;이메일 인증을 위해 초반에 회원가입 하는 유저의 is_active의 default값을 False로 받는다&lt;/p&gt;

  &lt;p&gt;슈퍼유저의 is_active와 is_superuser의 기본값은 True로 받는다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;class-usermanagerbaseusermanger의-역할&quot;&gt;class UserManager(BaseUserManger)의 역할&lt;/h2&gt;
&lt;p&gt;AbstractBaseUser를 이용해 커스텀할때 가장 먼저 UserManager를 정의해주고 나중에 User 클래스를 작성할때 object = UserMnager()를 넣어주는 모습을
누구나 봤을 것이다. 이 부분을 이해하기 힘들었다.&lt;/p&gt;

&lt;p&gt;일단 UserManager는 헬퍼 클래스라고 불리며 두가지의 함수를 가지고 있다. 이 클래스는 간단하게 말해서 &lt;strong&gt;생성되는 사용자들을 등록해주는 역할을 한다.&lt;/strong&gt; 일반 유저를 
등록할때 일반 유저가 가질수 있는 권한이나 값들을 미리 메서드로 정의해두고 해당 메서드를 통해서 일반 유저가 모델에 담기게 된다. 이때 &lt;strong&gt;create_user&lt;/strong&gt; 가 바로 이 메서드의 
역할을 해준다고 생각하면 된다. 그렇다면 자연스럽게 create_superuser는 슈퍼유저를 생성할때 사용되는 메서드라는 것을 예상할 수 있을 것이다. 사실 
이 클래스 내부에 메서드가 쓰이는 방법이 여러가지라 더 헷갈렸던 것 같다. 그 중 가장 기본적으로 사용되는 형태를 사용하였다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;create_user&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;create_superuser&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;코드로-이해해보자&quot;&gt;코드로 이해해보자&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseUserManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Users must have an email address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalize_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 이메일 주소를 소문자로 변환하는 과정을 거친뒤 저장&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 사용자 모델 객체를 생성&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 패스워드를 장고에서 제공해주는 해시화 과정을 거쳐 저장 (set_password메서드 안에 make_password가 해시화를 진행해줌)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# db에 사용자 정보를 저장&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'is_superuser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# BaseUsrManager에 정의되어 있는 is_superuser 필드의 기본값을 False로 정의&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_superuser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'is_active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 슈퍼유저 생성이기 때문에 is_active등 슈퍼유저가 가져야 할 권한들의 기본값을 True로 정의&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'is_superuser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'is_staff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extra_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 코드를 많이 봤을거다. 커스텀할때 필요한 클래스인데 위에서 말한것처럼 유저가 생성될때 항상 UserManager 메서드를 거쳐 모델에 저장된다. 위에서는 2가지의
함수가 있다고 했지만 코드를 보면 총 3가지의 함수가 존재한다. 나는 create_user, create_superuser 메서드를 생성하여 이에 맞게 유저의 기본값들을 각각의 메서드에서
변경해준 뒤 _create_user 메서드로 변경한 값들을 매개변수로 넣어 리턴해주었다. 그후 _create_user가 실행되어 받은 값들을 토대로 실제 user 모델의 객체로 값들을 넣어준다. 
위키독스에서는 2가지의 메서드를 사용하는데 차이를 보고 싶다면 링크를 눌러 확인해보자. &lt;a href=&quot;https://wikidocs.net/10294&quot;&gt;https://wikidocs.net/10294&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그럼 이제 대충 UserManager의 역할이 무엇인지 감이 왔을거다. 이제 완벽하게 이해해보자. 만약 createsuperuser로 슈퍼 유저를 생성한다고 할때 
UserManager에서 어떤 메서드가 실행 될 것인지 생각해보자. create_superuser 메서드가 실행된다. :-) 그렇다면 어떤 데이터가 메서드의 파라미터로 들어갈지 생각해보자&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;email  &lt;br /&gt;
password   &lt;br /&gt;
**extra_fields&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 3가지의 값들이 파라미터로 들어가게 되는데 email과 password는 필수값이기 때문에 명시적으로 작성해주었다. 그렇다면 extra_fields에는 
뭐가 들어있을까 ? 일단 각자의 알규먼트에 무엇이 들어있는지 확인하고 싶다면 &lt;strong&gt;for문을 돌려 확인해보는 방법이 있다&lt;/strong&gt; (나는 이방법으로 이해했다) &lt;br /&gt;
다른 방법은 단순하게 User 클래스 내부에 있는 이 부분을 확인하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;USERNAME_FIELD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;REQUIRED_FIELDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'nickname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;username_field는 아이디를 username으로 받을지 email로 받을지 다른 값으로 받을지 정할때 이곳에 작성해주면 된다.
나는 email을 아이디로 쓸 예정이였기 때문에 이곳에 email을 작성해주었고 실제로 createsuperuser를 하게 되면 가장 먼저 email이 뜨게 될 것이다. 그리고 
required_fields가 바로 아이디 ,pwd 외에 값을 받고 싶을때 작성해주는 곳이다. &lt;strong&gt;이 required_fields는 다른곳에는 적용되지 않고 superuser를 만들때
나오는 값들이라고 생각하면 된다.&lt;/strong&gt;  위처럼 쓰고 난 후 createsuperuser를 해주면 email, pwd , nickname를 입력하도록 되어 있을 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기서 또 알아야 할 한가지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;extra_fields.setdefault('is_superuser', False)&lt;/code&gt;이 setdefault 이다. 메서드 안에 작성해주면
해당 값 또한 extra_fields에 담기게 된다는 것을 알고 있자 -!&lt;/p&gt;

&lt;p&gt;여기서 상속에 대한 이해가 없다면 분명 이해하기 힘든 부분들이 생길것이다. 내가 그랬다. 아래의 코드는 User 클래스 부분이다. 저기에 써진 필드들이 User가 생성될때
모델에 들어가는 필드들이다. 이때 이곳에 명시적으로 작성을 해주었다면 UserManager에서 해당 필드들의 기본값등을 (is_staff를 생각하면 된다) 변경해서 User 모델에 넣을 수 있다.(Usermanager를 통해 user가 생성되기 때문에)
이때 아래에는 is_superuser 필드가 존재하지 않지만 UserManager에서는 is_superuser를 setdefault를 이용해 디폴트 값을 변경해준다. 이게 가능한 이유는 is_superuser는 AbstractBaseUser내부에 정의가 되어 있기 때문이다.
User가 AbstractBaseUser를 상속받기 때문에 필드에 작성하지 않아도 사용할 수 있는 것이다.(AbstractBaseUser를 눌러서 눈으로 확인해보면 이해가 될것이다)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractBaseUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PermissionsMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeStampable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Deleteable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Profile image'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Email address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Nickname'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Is active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;is_staff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BooleanField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Is staff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이정도면 대충이라도 감은 잡았을거라고 생각한다. (난 여기까지 이해하는데 굉장히 많은 시간이 걸렸다.) 사실 코드가 전부 비슷해서 가져다 써도 큰 문제가 되지는 않지만 
이해하고 쓰는 코드와 이해하지 못한 코드를 쓰는 것에는 &lt;strong&gt;정말 엄청난 차이가 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;User 클래스를 통해 user가 생성이 되는데 이때 UserManger의 메서드가 유저를 모델에 넣어준다. User 클래스에 작성된 필드들과 함께 미리 상속 받은 값들의 기본값들을 변경시켜 함께 유저 필드에 넣어
줄 수 있다.&lt;/p&gt;

&lt;p&gt;이 정도가 기본인 것 같다. 이후에 PermissionsMixin등을 통해 여러 권한을 주는 방식이라던지 잘 정리되어 있는 블로그를 참고 하면 분명 이해하기가 수월할 것이라고 생각한다. :-)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="django" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">0710 TIL</title>
      <link href="https://heejung-gjt.github.io/til15" rel="alternate" type="text/html" title="0710 TIL" />
      <published>2021-07-10T17:00:00+09:00</published>
      <updated>2021-07-10T17:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/til15</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til15">&lt;h2 id=&quot;210710-계획&quot;&gt;210710 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;pm-300-&quot;&gt;PM 3:00 ~&lt;/h4&gt;

&lt;p&gt;오늘은 주말이라 꽤 늦게 공부를 시작한다. 오늘 프로젝트에 대한 모델링을 구축한 후 mysql과 s3에 연동시킬 예정이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;h4 id=&quot;--프로젝트-모델링-mysql과-연동시키기&quot;&gt;- &lt;del&gt;프로젝트 모델링 mysql과 연동시키기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--aws-s3와-연동하기&quot;&gt;- &lt;del&gt;aws s3와 연동하기&lt;/del&gt;&lt;/h4&gt;
&lt;hr /&gt;

&lt;h4 id=&quot;-pm-700-pm-1000--pm-1130&quot;&gt;~ PM 7:00, PM 10:00 ~ PM 11:30&lt;/h4&gt;

&lt;p&gt;오늘 생각보다 빨리 계획했던 것들을 끝냈다. 약속이 있어 저녁에 오랜만에 치킨을 먹었다 허허허허   &lt;br /&gt;
맛있었고 오랜만에 즐거웠다. 😁&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">0709 TIL</title>
      <link href="https://heejung-gjt.github.io/til14" rel="alternate" type="text/html" title="0709 TIL" />
      <published>2021-07-09T16:59:00+09:00</published>
      <updated>2021-07-09T16:59:00+09:00</updated>
      <id>https://heejung-gjt.github.io/til14</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til14">&lt;h2 id=&quot;210709-계획&quot;&gt;210709 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;am-1000-&quot;&gt;AM 10:00 ~&lt;/h4&gt;

&lt;p&gt;오늘은 어제 못했던 부분들과 함께 정리하는 시간을 가질 생각이다. 
그리고 모델링 완성과 회원가입 + 이메일 인증을 완성시켜 볼 예정이다&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;h4 id=&quot;--유저-상속-부분-공부하기&quot;&gt;- &lt;del&gt;유저 상속 부분 공부하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--form-구현하기&quot;&gt;- &lt;del&gt;Form 구현하기&lt;/del&gt;&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;모델링을 구축하는 부분에서 많은 어려움이 존재했다. 유저의 상속 부분을 정확히 이해하고 싶어 다른 것들을 진행하지 
못했다. 생각보다 form에 대한 다양한 기능이 많아서 어떤걸 쓰는 것이 더 효율적인지는 추후에 블로그 정리를 통해 
좀 더 자세하게 공부할 예정이다&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">0708 TIL</title>
      <link href="https://heejung-gjt.github.io/til13" rel="alternate" type="text/html" title="0708 TIL" />
      <published>2021-07-08T19:59:00+09:00</published>
      <updated>2021-07-08T19:59:00+09:00</updated>
      <id>https://heejung-gjt.github.io/til13</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til13">&lt;h2 id=&quot;210708-계획&quot;&gt;210708 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;am-900-&quot;&gt;AM 9:00 ~&lt;/h4&gt;

&lt;p&gt;어제 못했던 SQL과 장고를 연동시켜 간단한 TO DO LIST CRUD와 좋아요(ManyToMany 해결법)기능을 구현해 볼 예정이다. 
매직메소드에 대한 블로그 정리를 하고 시퀀스 강의를 마저 들을 예정이다. 모델링 구축을 완성할 예정이다&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;h4 id=&quot;--프로젝트-모델링-완성하기0709예정&quot;&gt;- &lt;del&gt;프로젝트 모델링 완성하기(0709예정)&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--장고-유저-상속-공부하기&quot;&gt;- &lt;del&gt;장고 유저 상속 공부하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--python-매직-메서드-블로그에-정리하기0709예정&quot;&gt;- python 매직 메서드 블로그에 정리하기(0709예정)&lt;/h4&gt;
&lt;h4 id=&quot;--python-시퀀스-강의-듣기0709예정&quot;&gt;- python 시퀀스 강의 듣기(0709예정)&lt;/h4&gt;

&lt;h4 id=&quot;--formmview-정리하기&quot;&gt;- &lt;del&gt;formmview 정리하기&lt;/del&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;del&gt;formview와 model-formview의 차이점 + 실습&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;--프로필-유저-정보-mywql에-저장--이미지-s3에-저장-실습하기&quot;&gt;- &lt;del&gt;프로필 유저 정보 mywql에 저장 + 이미지 s3에 저장 실습하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--keyword-저장-삭제-ajax-실습&quot;&gt;- &lt;del&gt;keyword 저장, 삭제 ajax 실습&lt;/del&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;-am-1230&quot;&gt;~ AM 12:30&lt;/h4&gt;

&lt;p&gt;상속과 form에 대한 지식이 부족해 오늘 하루종일 이 부분에 대한 공부를 했다. 이해하는 속도가 빠르지 못해 시간이 많이 걸렸지만
그래도 form에 대해서 알고 쓸 수 있을 것 같다. 생각보다 formview에 대한 이해가 꽤 필요해서 어려웠다.. 상속에 대한 이해도
아직 덜 되어서 내일엔 정리를 하는 시간을 가져야 할 것 같다.:-)&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">0707 TIL</title>
      <link href="https://heejung-gjt.github.io/til12" rel="alternate" type="text/html" title="0707 TIL" />
      <published>2021-07-07T20:55:00+09:00</published>
      <updated>2021-07-07T20:55:00+09:00</updated>
      <id>https://heejung-gjt.github.io/til12</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til12">&lt;h2 id=&quot;210707-계획&quot;&gt;210707 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;am-1000-&quot;&gt;AM 10:00 ~&lt;/h4&gt;

&lt;p&gt;요즘 좀 늦게 자다 보니까 확실히 아침에 늦게 눈이 떠진다. 이 정확한 몸같으니라고…  &lt;br /&gt;
오늘은 장고와 MYSQL 연동하는 법과 MYSQL에 데이터 저장되는지 확인까지 먼저 정리를 하려고 한다. 그 뒤 
어제 공부했던 파이썬 정리를 간단히 한 뒤 강의를 이어서 들을 예정이다. 오늘 매지메서드를 마저 다 듣고 시퀀스 부분을 나 갈 예정이다 &lt;br /&gt;
SQL과 장고를 연동시켜 간단한 TO DO LIST CRUD와 좋아요(ManyToMany 해결법)기능을 구현해 볼 예정이다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;h4 id=&quot;--ec2-인스턴스와-mysql-마저-정리하기&quot;&gt;- &lt;del&gt;EC2 인스턴스와 MYSQL 마저 정리하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--장고와-mysql-연동시켜-데이터-저장해보기&quot;&gt;- &lt;del&gt;장고와 MYSQL 연동시켜 데이터 저장해보기&lt;/del&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;del&gt;Crud 중 create&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;--python-매직-메서드-블로그에-정리하기예정&quot;&gt;- python 매직 메서드 블로그에 정리하기(예정)&lt;/h4&gt;
&lt;h4 id=&quot;--python-매직-메서드--시퀀스-강의-듣고-정리하기&quot;&gt;- &lt;del&gt;python 매직 메서드 + 시퀀스 강의 듣고 정리하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--장고와-mysql로-to-do-list-crud--좋아요-기능-구현해보기예정&quot;&gt;- 장고와 MYSQL로 to do list CRUD + 좋아요 기능 구현해보기(예정)&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;-am-12--00&quot;&gt;~ AM 12 : 00&lt;/h4&gt;

&lt;p&gt;mysql 연동후 모델을 구축해보는 부분에서 엄청 헤맸다.. 유저를 상속받아 커스터마이징 하는부분에 대한
이해가 부족해서 생겼던 문제인것 같기도 하다. 많이 해보는 수 밖에 없는것 같다&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">(MYSQL) Django에 MYSQL연동하기(진행중)</title>
      <link href="https://heejung-gjt.github.io/db1" rel="alternate" type="text/html" title="(MYSQL) Django에 MYSQL연동하기(진행중)" />
      <published>2021-07-07T19:09:00+09:00</published>
      <updated>2021-07-07T19:09:00+09:00</updated>
      <id>https://heejung-gjt.github.io/db1</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/db1">&lt;h4 id=&quot;aws-ec2에-구축된-mysql로-장고와-연동시키는-과정이다&quot;&gt;AWS EC2에 구축된 MYSQL로 장고와 연동시키는 과정이다&lt;/h4&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="database" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">AWS EC2 서버에 MYSQL 구축하기</title>
      <link href="https://heejung-gjt.github.io/aws3" rel="alternate" type="text/html" title="AWS EC2 서버에 MYSQL 구축하기" />
      <published>2021-07-07T18:32:00+09:00</published>
      <updated>2021-07-07T18:32:00+09:00</updated>
      <id>https://heejung-gjt.github.io/aws3</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/aws3">&lt;p&gt;AWS에서 EC2 인스턴스라는 물리적인 서버를 만든 후 이 안에 우분투 OS(메모리, 하드디스크, cpu의 자원을 관리하는 역할)를 설치하고 우분투 안에  MYSQL를 구축하는 과정입니다. 가장 먼저 AWS 사이트에 접속후
검색창에 EC2를 입력한 후 인스턴스 생성하기를 누른다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ubuntu 20.4 환경에서 실습 진행&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;진행-순서&quot;&gt;진행 순서&lt;/h3&gt;
  &lt;p&gt;AWS에서 EC2 인스턴스 생성하기&lt;/p&gt;

  &lt;p&gt;로컬 터미널에서 생성한 서버로 접속하기&lt;/p&gt;

  &lt;p&gt;접속한 서버에 MYSQL 구축하기&lt;/p&gt;

  &lt;p&gt;설치한 workbench에 생성한 서버와 연결한 후 2가지 방법으로 db의 샘플 데이터 보내기&lt;br /&gt;
(client에서 인터넷망을 통해 mysql서버에 접속하기)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-가장먼저-ami를-선택한다&quot;&gt;1. 가장먼저 AMI를 선택한다&lt;/h3&gt;
&lt;p&gt;AMI는 인스턴스를 시작할때 이 서버에서 필요한 SW 구성이 포함된 템플릿이다. 나는 Ubuntu 18.04 os를 선택하였다. 20.04를 선택해도 상관없다.  &lt;br /&gt;
AMI의 역할 중 하나는 &lt;strong&gt;EC2 인스턴스를 생성하는 이미지 역할이다.&lt;/strong&gt; 쉽게 말해 컴퓨터에 있는 프로그램들의 이미지와 같은 역할을 한다.   &lt;br /&gt;
또다른 역할 중 하나는 &lt;strong&gt;다른 계정에 똑같은 AMI를 생성하고 싶을때 해당 AMI를 복사해서 새로운 서버에 다시 올려서 사용되는 역할을 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610242-4bf42f00-deab-11eb-90b3-906df9d41e08.png&quot; alt=&quot;ec2-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2-인스턴스-유형을-선택해준다&quot;&gt;2. 인스턴스 유형을 선택해준다.&lt;/h3&gt;
&lt;p&gt;이때 &lt;code class=&quot;highlighter-rouge&quot;&gt;프리티어 사용 가능&lt;/code&gt;이라고 써져 있는 인스턴스를 선택해준다
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610309-5ca4a500-deab-11eb-83dd-83404ce2b6a6.png&quot; alt=&quot;ec2-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-35단계는-특별히-설정할게-없어서-건너-띄어주었다-6단계인-보안-그룹-구성에서는-설정해주어야-할-것-들이-여러개-있다&quot;&gt;3. 3~5단계는 특별히 설정할게 없어서 건너 띄어주었다. 6단계인 보안 그룹 구성에서는 설정해주어야 할 것 들이 여러개 있다&lt;/h3&gt;
&lt;p&gt;이 단계에서는 포트를 설정해주어야 한다. 필수는 아니지만 컨벤션하게 설정되는 포트들을 작성한다. 아래의 이미지처럼 총 6개의 포트를 설정해준다. 이때 보안 그룹 이름/설명은 변경할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;포트의 역할&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;외부에서 인스턴스(서버)로 들어올때 인터넷 망을 통해서 들어오는데 이때 포트가 문 역할을 해준다. 포트를 열어놓지 않으면 외부에서 해당 서버에 들어올 수 없다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610327-5f9f9580-deab-11eb-9c96-ebcb6b6bf164.png&quot; alt=&quot;ec2-3&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-7단계-인스턴스-시작-검토에서-시작하기를-누르면-새-키-페어-생성창이-화면처럼-뜨게-된다&quot;&gt;4. 7단계 인스턴스 시작 검토에서 시작하기를 누르면 새 키 페어 생성창이 화면처럼 뜨게 된다.&lt;/h3&gt;
&lt;p&gt;그럼 해당 키 페어의 이름을 작성해주면 된다. 나는 진행할 프로젝트의 앞 단어들을 따서 지어주었다. 이후 키 페어 다운로드를 눌러서 다운받아준다. 이 파일을
터미널을 통해 방금 만든 서버에 접속할때 키 페어 파일과 로컬에 저장된 위치를 알고 있어야 한다  &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/64240637/124610337-60d0c280-deab-11eb-8a2c-835c384485aa.png&quot; alt=&quot;ec2-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;5-이제-ec2-서버는-구축이-완성되었다-이제-터미널을-열어-방금-만든-서버에-접속해보자&quot;&gt;5. 이제 EC2 서버는 구축이 완성되었다. 이제 터미널을 열어 방금 만든 서버에 접속해보자&lt;/h3&gt;

&lt;p&gt;.ssh의 폴더을 만들어준다. 이곳에 이전에 저장해두었던 키페어 파일을 옮겨 준다. 이 과정은 컨벤션이므로 꼭 폴더
이름을 ssh로 하지 않아도 되지만 따르길 권장한다고 한다. mv 명령어로 키페어 파일을 옮겨주면 된다. 보통 파일은 downloads 디렉터리에
있지만 나는 파일을 옮겼기 때문에 옮긴곳의 디렉터리를 입력해주었다. 두번째의 명령어는 .ssh 폴더로 해당 파일을 옮기는 명령어이다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desktop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이후 키페어 파일은 파일 권한 가진 사람만 읽을 수 있게 설정해줘야 ssh의 키값으로 사용이 가능하다. 파일 권한을 400으로
바꿔준다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 서버에 접속하기 위한 기본 설정은 끝이났다. 아래의 명령어를 통해 ec2서버에 접속해보자. 이때 서버에 접속하기 위해서는 
퍼블릭 ip가 필요하다. 아래의 명령어와 같이 ubuntu@~를 작성하는 이유는 실제로 우분투에서 터미널에서 유저의 계정이 나오는 것처럼
ec2인스턴스에도 기본적으로 root가 있고 그 밑에 ubuntu 이름(인스턴스의 사용자 계정)을 가지는 &lt;strong&gt;사용자 계정이라고 생각하면 된다&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubuntu&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;생성한&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;퍼블릭&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;명령어 입력후 터미널 왼쪽에 방금 생성한 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu@{퍼블릭ip}&lt;/code&gt; 내용이 뜨면 접속에 성공한것 이다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubuntu&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;퍼블릭&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이때 위에 있는 명령어는 서버에 접속하기 위해 항상 입력해야 하는 명령어이기 때문에 alias로 설정해두는게 편하다 &lt;br /&gt;
나는 bashrc를 쓰기때문에 bashrc로 들어왔지만 .zshrc쓰는 사람은 이곳에서 설정해야 한다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bashrc&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ssh -i ~/.ssh/neo.pem ubuntu@{생성한 ec2의 퍼블릭 ip}&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bashrc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 neo를 입력하면 서버에 접속되는 것을 볼 수 있다.(neo는 내가 저장한 네임이다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;6-이제-접속한-ec2서버에-mysql-서버를-구축해보자&quot;&gt;6. 이제 접속한 ec2서버에 mysql 서버를 구축해보자&lt;/h3&gt;
&lt;p&gt;가장 먼저 apt-get를 업데이트 해주어야 한다. 뒤에 -y를 붙이는 이유는 모든 질문에 대한 답을 yes로 응답하겠다는 의미이기 때문에
자동으로 넘어가서 편리하다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;7-mysql-서버를-설치한다&quot;&gt;7. mysql 서버를 설치한다&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;8-mysql의-패스워드를-설정해준다&quot;&gt;8. mysql의 패스워드를 설정해준다&lt;/h3&gt;
&lt;p&gt;이때 비밀번호 설정전 최초로 mysql에 접속할땐 sudo mysql로 들어간다. 이후 비밀번호가 설정되면
&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql  -u root -p&lt;/code&gt;를 입력후 비밀번호를 입력하고 접속하면 된다.&lt;/p&gt;

&lt;p&gt;아래 명령문에서 SELECT로 시작하는 명령문은 실제 MYSQL에 비밀번호가 설정되어 있는지 확인하는 곳이다
ALTER로 비밀번호를 설정한후 SELECT~로 비밀번호가 제대로 설정되었는지 확인한다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'root@localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql_native_password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'비밀번호 입력'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;패스워드-수정하는-방법&quot;&gt;패스워드 수정하는 방법&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IIDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{변경할 비번}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;9-mysql의-외부접속을-설정을-변경해준다&quot;&gt;9. mysql의 외부접속을 설정을 변경해준다&lt;/h3&gt;
&lt;p&gt;bind address를 0.0.0.0으로 변경해준다. 127.0.0.1로 설정되면 로컬 호스트에서만 접근이 가능하기 때문에 외부에서 접속할 수 있도록
변경해주어야 한다. 이때 외부에서 접속할때 pwd를 설정해주어야 한다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysqld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnf&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# bind-address에 설정되어 있는 127.0.0.1 을 0.0.0.0으로 변경해준다&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;################### 외부 접속 패스워드 설정&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privileges&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*.*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{비밀번호 입력}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;10-설정-후-서버-재시작으로-설정-내용을-적용한다&quot;&gt;10. 설정 후 서버 재시작으로 설정 내용을 적용한다&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;systemctl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;restart는 자동으로 종료후 시작을 해주는 명령어이다 &lt;br /&gt;
start는 서버 시작을 해주는 명령어이다 &lt;br /&gt;
stop은 서버 종료 해주는 명령어이다 &lt;br /&gt;
status는 서버의 상태를 확인하는 명령어이다.(active가 떠있으면 서버가 실행중임을 의미한다)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;11-이제-workbench를-설치하여--mysql서버에-접속해보자&quot;&gt;11. 이제 workbench를 설치하여  mysql서버에 접속해보자&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;workbench 설치는 8.0.22버전으로 받아주었다.&lt;/strong&gt; 해당 버전으로 해야 workbench에서 서버를 연결할때 에러가 발생하지 않으니
이점 유의해서 설치하도록 하자 !
&lt;a href=&quot;https://dev.mysql.com/downloads/workbench/&quot;&gt;https://dev.mysql.com/downloads/workbench/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;설치후 workbench 에서 서버와 연결할때 username은 우분투 서버에 접속하는 것이 아니고 mysql서버에 접속하기 때문에 mysql 계정의 username을 써준다.
이후 workbench에 text를 눌러 success가 뜨면 연결에 성공한것이다&lt;/p&gt;

&lt;p&gt;그럼 이제 우리는 aws ec2 서버안에 우분투에 구축되어 있는 mysql 서버에 workbench(client)를 통해 접속해 있는 것이다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;12-이제-샘플-데이터를-로컬-서버에서-ec2서버로-파일을-보낸후-mysql에서-열어보자&quot;&gt;12. 이제 샘플 데이터를 로컬 서버에서 ec2서버로 파일을 보낸후 mysql에서 열어보자&lt;/h3&gt;
&lt;p&gt;이때 workbench에 샘플 데이터를 가져오는 방법은 2가지가 있다. &lt;strong&gt;서버와 연결되어 있는 workbench안에서 직접 다운받는
방법&lt;/strong&gt; 과 &lt;strong&gt;로컬서버에서 ec2서버로 직접 파일을 보내는 방법이 있다&lt;/strong&gt;  &lt;br /&gt;
먼저 얘기하자면 로컬서버에서 ec2서버로 직접 파일을 보내는 방법이 훨씬 빠르긴 하지만 좀 더 복잡할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;1-1-workbench에서-샘플데이터-추가하기&quot;&gt;1-1. workbench에서 샘플데이터 추가하기&lt;/h4&gt;
&lt;p&gt;먼저 &lt;a href=&quot;https://dev.mysql.com/doc/index-other.html&quot;&gt;https://dev.mysql.com/doc/index-other.html&lt;/a&gt; 이곳에서 world, sakila 데이터 베이스를
추가한다.(다른거 추가해도 된다. 주로 사용되는 샘플데이터이다)&lt;/p&gt;

&lt;h4 id=&quot;1-2-workbench의-파일메뉴에서-open-sql-script를-선택한-후-worldsql-파일을-선택한다&quot;&gt;1-2. workbench의 파일메뉴에서 open SQL Script를 선택한 후 world.sql 파일을 선택한다&lt;/h4&gt;
&lt;p&gt;world.sql 파일에 있는 쿼리문이 로드되면 쿼리 실행 아이콘(상단 번개표시)을 클릭한다. 이후 좌측 레이아웃에서
오른쪽 마우스 클릭후 refresh all 메뉴를 선택하면 world 데이터 베이스가 나타난다.&lt;/p&gt;

&lt;p&gt;sakila의 경우에는 스키마 파일과 데이터 파일이 분리되어 있다. 이땐 데이터 베이스의 구조를 만든 후에 데이터를
입력할 수 있기 때문에 스키마 피일(sakila-schema.sql)을 실행한 후에 데이터 파일(sakila-data.sql)을 실행해준다&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-1-서버에서-데이터베이스-데이터-추가하기&quot;&gt;2-1. 서버에서 데이터베이스 데이터 추가하기&lt;/h4&gt;
&lt;p&gt;먼저 ec2 서버로 sql 파일을 전송한다. 아래의 명령어는 로컬 desktop에 sql폴더에 있는 도모든 파일을 ec2서버를
보내는 명령어이다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desktop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubuntu&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;주소&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;__ 다운받은 .sql 파일들을 sql 폴더를 생성한후 sql폴더에 넣는 명령어이다__&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/*.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;데이터베이스를 생성해준다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;데이터베이스에 데이터를 추가해준다. 이때 -p바로 다음에 설정된 pwd를 입력하고 아래와 같이 작성하면 sql폴더에 있는 world.sql파일이
생성한 world데이터베이스에 들어간다&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;비밀번호&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이렇게 해서 긴 과정이 끝이났다. 사실 처음 할때는 굉장히 복잡해보이고 어려운데 하나하나 이해하면서 구축하면 재밌다. :-)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q1-왜-데이터베이스를-ec2-서버안에서-구축하여-사용할까-&quot;&gt;Q1. 왜 데이터베이스를 ec2 서버안에서 구축하여 사용할까 ?&lt;/h4&gt;
&lt;h4 id=&quot;a-알아보는-중입니다--&quot;&gt;A) 알아보는 중입니다 :-)&lt;/h4&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="aws" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">0706 TIL</title>
      <link href="https://heejung-gjt.github.io/til11" rel="alternate" type="text/html" title="0706 TIL" />
      <published>2021-07-06T20:50:00+09:00</published>
      <updated>2021-07-06T20:50:00+09:00</updated>
      <id>https://heejung-gjt.github.io/til11</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/til11">&lt;h2 id=&quot;210706-계획&quot;&gt;210706 계획&lt;/h2&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;am-900-&quot;&gt;AM 9:00 ~&lt;/h4&gt;

&lt;p&gt;오전에 어제 공부했던 python 클래스 부분을 블로그에 정리할 예정이다. 이어서 매직 메서드 강의를 듣고 공부할 예정이며
파이썬의 기본 코딩 컨벤션에 관한 책을 읽을 예정이다. mysql 기본 쿼리에 대한 강의를 듣고 실제로 모델링 한 데이터베이스에 데이터를
넣는 실습을 해볼 예정이다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;해야-할-일&quot;&gt;해야 할 일&lt;/h2&gt;

&lt;h4 id=&quot;--python-클래스-부분-블로그에-정리하기&quot;&gt;- &lt;del&gt;python 클래스 부분 블로그에 정리하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--매직-메서드-강의-듣고-정리하기&quot;&gt;- &lt;del&gt;매직 메서드 강의 듣고 정리하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--aws-ec2-서버에-mysql-구축해보기--블로그-정리하기&quot;&gt;- &lt;del&gt;AWS EC2 서버에 MYSQL 구축해보기 + 블로그 정리하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--django에-mysql-연동시킨후-데이터-넣어보는-실습하기&quot;&gt;- &lt;del&gt;Django에 mysql 연동시킨후 데이터 넣어보는 실습하기&lt;/del&gt;&lt;/h4&gt;
&lt;h4 id=&quot;--nn-프로젝트-모델링-취합하기&quot;&gt;- &lt;del&gt;NN 프로젝트 모델링 취합하기&lt;/del&gt;&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;-am-1200&quot;&gt;~ AM 12:00&lt;/h4&gt;

&lt;p&gt;하루가 굉장히 짧다&lt;/p&gt;

&lt;p&gt;오늘 하루도 수고했다 -! 💨&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="til" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">(Python) instance method, class method, static method</title>
      <link href="https://heejung-gjt.github.io/python3" rel="alternate" type="text/html" title="(Python) instance method, class method, static method" />
      <published>2021-07-06T17:00:00+09:00</published>
      <updated>2021-07-06T17:00:00+09:00</updated>
      <id>https://heejung-gjt.github.io/python3</id>
      <content type="html" xml:base="https://heejung-gjt.github.io/python3">&lt;!--&lt;span class=&quot;table-of-contents-list&quot;&gt;Python 목록 순서 &lt;/span&gt;--&gt;
&lt;!--&lt;ul class=&quot;table-of-contents-list&quot;&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./python-DataStructure&quot;&gt;Python 강좌(1) - 자료구조&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content01 content&quot;&gt;1. 리스트&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content02 content&quot;&gt;2. 튜플&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content03 content&quot;&gt;3. 딕셔너리&lt;/li&gt;--&gt;
&lt;!--    &lt;li class=&quot;content04 content&quot;&gt;4. 문자열 리스트로 변환 후 딕셔너리 변환&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Function&quot;&gt;Python 강좌(2) - 함수&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-INOutput&quot;&gt;Python 강좌(3) - 입출력&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Class&quot;&gt;Python 강좌(4) - 클래스&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li &gt;&lt;a href=&quot;./python-Exception&quot;&gt;Python 강좌(5) - 예외처리&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--&lt;/ul&gt;--&gt;

&lt;!--&lt;script&gt;--&gt;
&lt;!--    const content = document.querySelector('.content')--&gt;
&lt;!--    const lists01 = document.querySelector('.content01');--&gt;
&lt;!--    const lists02 = document.querySelector('.content02');--&gt;
&lt;!--    const lists03 = document.querySelector('.content03');--&gt;
&lt;!--    const lists04 = document.querySelector('.content04');--&gt;
&lt;!--    lists01.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,850);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists02.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,3500);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists03.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,4700);--&gt;
&lt;!--    });--&gt;
&lt;!--    lists04.addEventListener('click',(event)=&gt;{--&gt;
&lt;!--        window.scrollTo(0,8300);--&gt;
&lt;!--    });--&gt;

&lt;!--&lt;/script&gt;--&gt;

&lt;h2 id=&quot;instance-method&quot;&gt;instance method&lt;/h2&gt;
&lt;p&gt;가장 흔하게 쓰이는 메서드로 생성된 인스턴스 변수에 접근할 수 있도록 첫번째 인자에 항상 객체 자신을 의미하는 self파라미터를 갖는다.&lt;/p&gt;

&lt;h4 id=&quot;접근방법&quot;&gt;접근방법&lt;/h4&gt;
&lt;p&gt;클래스 내부에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.메서드명&lt;/code&gt;으로 접근이 가능하고 클래스 밖에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;객체.메서드명&lt;/code&gt;으로 접근이 가능하다&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;class-method&quot;&gt;class method&lt;/h2&gt;
&lt;p&gt;클래스 메서드는 인스턴스 없이 호출이 가능하다. 즉 &lt;strong&gt;클래스 변수에 대한 메서드라고 생각하면 된다.
(클래스변수의 crud가 필요한 경우 사용)&lt;/strong&gt; 첫번째 인자에 항상 클래스를 의미하는 cls 파라미터를 갖는다. 
cls를 사용하면 클래스 메서드 내부에서 현재 클래스의 인스턴스를 만들수도 있다.&lt;/p&gt;

&lt;h4 id=&quot;접근방법-1&quot;&gt;접근방법&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;@classmethod&lt;/strong&gt; 라는 데코레이터를 붙여 해당 메서드가 클래스 메서드임을 표시한다&lt;/p&gt;

&lt;p&gt;호출방법으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;클래스명.클래스메서드명&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;객체명.클래스 메서드명&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;static-method&quot;&gt;static method&lt;/h2&gt;
&lt;p&gt;객체에 영향을 받지 않는 독립적인 메서드이지만 로직상 클래스 내부에 포함되는 메서드이다. 
self, cls와 같은 파라미터를 가지고 있지 않다. 그렇기 때문에 인스턴스 변수에 접근이 불가능하다. 
하지만 클래스 변수에는 클래스명,클래스속성명으로 접근이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;정적 메서드는 메서드의 실행이 인스턴스 상태에 영향을 끼치지 않을때 사용한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;접근방법-2&quot;&gt;접근방법&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;@staticmethod&lt;/strong&gt; 라는 데코레이터를 붙여 해당 메서드가 정적 메서드임을 표시한다.&lt;/p&gt;

&lt;p&gt;호출방법으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;클래스명.정적메서드명&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;객체명.정적메서드명&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;아래의 코드는 지금까지 설명한 내용들을 활용한 실습 코드이다. 방금 본 내용들을 적용시키며 천천히 읽어보자.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;### 3가지 메서드를 활용한 실습 코드&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# class 설명서 __doc__ 로 볼 수 있음&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Car class
    Author: kim
    Date:2021.07.05
    Description: class, static, instance method
    &quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 클래스 변수(모든 인스턴스가 공유)     &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price_per_raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 이곳 안에서 인스턴스 변수 생성됨&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;details&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# str과 repr&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'str: {} - {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'repr: {} - {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    
    &lt;span class=&quot;c&quot;&gt;# 인스턴스 메서드&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;detail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'current ID : {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'car detail info : {} {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 인스턴스 메서드&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Before Car Price -&amp;gt; company: {}, price: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 인스턴스 메서드&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'After Car Price -&amp;gt; company: {}, price: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price_per_raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# 클래스 메서드 &lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raise_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'please enter 1 or more'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price_per_raise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'succeed! price increased.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;c&quot;&gt;# 스태틱 메서드&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# utils형으로 유연하게 사용될때 사용&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ok! this car is {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Sorry this car is not Bmw'&lt;/span&gt;
  

&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Ferrari'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Silver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bmw'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Black'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'horsepower'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;270&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 전체 정보&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격 정보(직접 접근)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 변수값이 변경 될 수 있기 때문에 직접 자기 인스턴스 변수에 접근하는 것은 좋지 못한 방법임&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'price'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 마찬가지로 값이 변경 될 위험이 있기때문에  좋지 못한방법 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 보통은 메서드를 만들어서 필요로하는 정보만 반환받게 사용함&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격 정보 (인상전)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격 인상(클래스 메서드 미사용) -&amp;gt; 직접접근해서 변경하는 것 좋지 못하다. 메서드 만들자&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Car.price_per_raise = 1.4 # 40% 상승 &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 가격인상(클래스 메서드 사용)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raise_price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_price_culc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 인스턴스로 호출(스테이틱)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# staticmethod의 매개변수는 비워있다, 유연하고 메서드를 정의할때 좀 공통적으로 만드는데 유연하게 만들고 싶을때 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 자동차가 만개있을때 해당 자동차가 bmw에서 나온 자동차인지 확인하는 메서드&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 클래스로 호출(스테이틱)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 스택틱 메서드는 클래스로도 호출이 가능하다, 공통적으로 클래스로 호출해도 된다&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#클래스와 관련이 있는 기능을 조작하는데 매개변수로 Self나 cls등을 받지 않고도 동작이 가능할때 사용한다&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;코드-결과값&quot;&gt;코드 결과값&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140576165418264&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140576165474712&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;


&lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Before&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6000.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5000.0&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;please&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;succeed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increased&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ferrari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9600.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;After&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;8000.0&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;Sorry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sorry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bmw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>jung</name>
        
        
      </author>

      

      
        <category term="python" />
      

      
        <summary type="html"></summary>
      

      
      
    </entry>
  
</feed>
